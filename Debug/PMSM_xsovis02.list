
PMSM_xsovis02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  08005148  08005148  00015148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080059a8  080059a8  000159a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080059b0  080059b0  000159b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080059b4  080059b4  000159b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000020  20000000  080059b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000093c  20000020  080059d8  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000095c  080059d8  0002095c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ed2b  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003076  00000000  00000000  0003ed7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00016d10  00000000  00000000  00041df1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f40  00000000  00000000  00058b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003560  00000000  00000000  00059a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00029184  00000000  00000000  0005cfa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00011925  00000000  00000000  0008612c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00109852  00000000  00000000  00097a51  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000eb  00000000  00000000  001a12a3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000038dc  00000000  00000000  001a1390  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005130 	.word	0x08005130

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08005130 	.word	0x08005130

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b972 	b.w	8000d00 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4688      	mov	r8, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14b      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4615      	mov	r5, r2
 8000a46:	d967      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0720 	rsb	r7, r2, #32
 8000a52:	fa01 f302 	lsl.w	r3, r1, r2
 8000a56:	fa20 f707 	lsr.w	r7, r0, r7
 8000a5a:	4095      	lsls	r5, r2
 8000a5c:	ea47 0803 	orr.w	r8, r7, r3
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a6c:	fa1f fc85 	uxth.w	ip, r5
 8000a70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a78:	fb07 f10c 	mul.w	r1, r7, ip
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18eb      	adds	r3, r5, r3
 8000a82:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a86:	f080 811b 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8118 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000a90:	3f02      	subs	r7, #2
 8000a92:	442b      	add	r3, r5
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aa8:	45a4      	cmp	ip, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	192c      	adds	r4, r5, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8107 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	f240 8104 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000abc:	3802      	subs	r0, #2
 8000abe:	442c      	add	r4, r5
 8000ac0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ac4:	eba4 040c 	sub.w	r4, r4, ip
 8000ac8:	2700      	movs	r7, #0
 8000aca:	b11e      	cbz	r6, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad4:	4639      	mov	r1, r7
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d909      	bls.n	8000af2 <__udivmoddi4+0xbe>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80eb 	beq.w	8000cba <__udivmoddi4+0x286>
 8000ae4:	2700      	movs	r7, #0
 8000ae6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aea:	4638      	mov	r0, r7
 8000aec:	4639      	mov	r1, r7
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	fab3 f783 	clz	r7, r3
 8000af6:	2f00      	cmp	r7, #0
 8000af8:	d147      	bne.n	8000b8a <__udivmoddi4+0x156>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0xd0>
 8000afe:	4282      	cmp	r2, r0
 8000b00:	f200 80fa 	bhi.w	8000cf8 <__udivmoddi4+0x2c4>
 8000b04:	1a84      	subs	r4, r0, r2
 8000b06:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4698      	mov	r8, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d0e0      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b12:	e9c6 4800 	strd	r4, r8, [r6]
 8000b16:	e7dd      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b18:	b902      	cbnz	r2, 8000b1c <__udivmoddi4+0xe8>
 8000b1a:	deff      	udf	#255	; 0xff
 8000b1c:	fab2 f282 	clz	r2, r2
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	f040 808f 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b26:	1b49      	subs	r1, r1, r5
 8000b28:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2c:	fa1f f885 	uxth.w	r8, r5
 8000b30:	2701      	movs	r7, #1
 8000b32:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b36:	0c23      	lsrs	r3, r4, #16
 8000b38:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b40:	fb08 f10c 	mul.w	r1, r8, ip
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b48:	18eb      	adds	r3, r5, r3
 8000b4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	f200 80cd 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b56:	4684      	mov	ip, r0
 8000b58:	1a59      	subs	r1, r3, r1
 8000b5a:	b2a3      	uxth	r3, r4
 8000b5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b60:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b68:	fb08 f800 	mul.w	r8, r8, r0
 8000b6c:	45a0      	cmp	r8, r4
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x14c>
 8000b70:	192c      	adds	r4, r5, r4
 8000b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x14a>
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	f200 80b6 	bhi.w	8000cea <__udivmoddi4+0x2b6>
 8000b7e:	4618      	mov	r0, r3
 8000b80:	eba4 0408 	sub.w	r4, r4, r8
 8000b84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b88:	e79f      	b.n	8000aca <__udivmoddi4+0x96>
 8000b8a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b8e:	40bb      	lsls	r3, r7
 8000b90:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b94:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b98:	fa01 f407 	lsl.w	r4, r1, r7
 8000b9c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ba0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ba4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ba8:	4325      	orrs	r5, r4
 8000baa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bae:	0c2c      	lsrs	r4, r5, #16
 8000bb0:	fb08 3319 	mls	r3, r8, r9, r3
 8000bb4:	fa1f fa8e 	uxth.w	sl, lr
 8000bb8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bbc:	fb09 f40a 	mul.w	r4, r9, sl
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bc6:	fa00 f107 	lsl.w	r1, r0, r7
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1e 0303 	adds.w	r3, lr, r3
 8000bd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bd4:	f080 8087 	bcs.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f240 8084 	bls.w	8000ce6 <__udivmoddi4+0x2b2>
 8000bde:	f1a9 0902 	sub.w	r9, r9, #2
 8000be2:	4473      	add	r3, lr
 8000be4:	1b1b      	subs	r3, r3, r4
 8000be6:	b2ad      	uxth	r5, r5
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bf4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bf8:	45a2      	cmp	sl, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1e 0404 	adds.w	r4, lr, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	d26b      	bcs.n	8000cde <__udivmoddi4+0x2aa>
 8000c06:	45a2      	cmp	sl, r4
 8000c08:	d969      	bls.n	8000cde <__udivmoddi4+0x2aa>
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	4474      	add	r4, lr
 8000c0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c12:	fba0 8902 	umull	r8, r9, r0, r2
 8000c16:	eba4 040a 	sub.w	r4, r4, sl
 8000c1a:	454c      	cmp	r4, r9
 8000c1c:	46c2      	mov	sl, r8
 8000c1e:	464b      	mov	r3, r9
 8000c20:	d354      	bcc.n	8000ccc <__udivmoddi4+0x298>
 8000c22:	d051      	beq.n	8000cc8 <__udivmoddi4+0x294>
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d069      	beq.n	8000cfc <__udivmoddi4+0x2c8>
 8000c28:	ebb1 050a 	subs.w	r5, r1, sl
 8000c2c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c30:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c34:	40fd      	lsrs	r5, r7
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	ea4c 0505 	orr.w	r5, ip, r5
 8000c3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c40:	2700      	movs	r7, #0
 8000c42:	e747      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000c44:	f1c2 0320 	rsb	r3, r2, #32
 8000c48:	fa20 f703 	lsr.w	r7, r0, r3
 8000c4c:	4095      	lsls	r5, r2
 8000c4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c52:	fa21 f303 	lsr.w	r3, r1, r3
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	4338      	orrs	r0, r7
 8000c5c:	0c01      	lsrs	r1, r0, #16
 8000c5e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c62:	fa1f f885 	uxth.w	r8, r5
 8000c66:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6e:	fb07 f308 	mul.w	r3, r7, r8
 8000c72:	428b      	cmp	r3, r1
 8000c74:	fa04 f402 	lsl.w	r4, r4, r2
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x256>
 8000c7a:	1869      	adds	r1, r5, r1
 8000c7c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c80:	d22f      	bcs.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d92d      	bls.n	8000ce2 <__udivmoddi4+0x2ae>
 8000c86:	3f02      	subs	r7, #2
 8000c88:	4429      	add	r1, r5
 8000c8a:	1acb      	subs	r3, r1, r3
 8000c8c:	b281      	uxth	r1, r0
 8000c8e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c92:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9a:	fb00 f308 	mul.w	r3, r0, r8
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x27e>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca8:	d217      	bcs.n	8000cda <__udivmoddi4+0x2a6>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d915      	bls.n	8000cda <__udivmoddi4+0x2a6>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1ac9      	subs	r1, r1, r3
 8000cb4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cb8:	e73b      	b.n	8000b32 <__udivmoddi4+0xfe>
 8000cba:	4637      	mov	r7, r6
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	e709      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cc0:	4607      	mov	r7, r0
 8000cc2:	e6e7      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	e6fb      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc8:	4541      	cmp	r1, r8
 8000cca:	d2ab      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000ccc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cd0:	eb69 020e 	sbc.w	r2, r9, lr
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	e7a4      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cda:	4660      	mov	r0, ip
 8000cdc:	e7e9      	b.n	8000cb2 <__udivmoddi4+0x27e>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	e795      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce2:	4667      	mov	r7, ip
 8000ce4:	e7d1      	b.n	8000c8a <__udivmoddi4+0x256>
 8000ce6:	4681      	mov	r9, r0
 8000ce8:	e77c      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cea:	3802      	subs	r0, #2
 8000cec:	442c      	add	r4, r5
 8000cee:	e747      	b.n	8000b80 <__udivmoddi4+0x14c>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	442b      	add	r3, r5
 8000cf6:	e72f      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	e708      	b.n	8000b0e <__udivmoddi4+0xda>
 8000cfc:	4637      	mov	r7, r6
 8000cfe:	e6e9      	b.n	8000ad4 <__udivmoddi4+0xa0>

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <HAL_TIM_PeriodElapsedCallback>:
//		  pointer++;
//	} else {
//		pointer = 0;
//	}*/
//	}
}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <HAL_ADCEx_InjectedConvCpltCallback>:

// 50us period
void HAL_ADCEx_InjectedConvCpltCallback (ADC_HandleTypeDef * hadc)
 {
 8000d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  measureI[0] = hadc1.Instance->JDR1; // (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1));
	  measureI[1] = hadc1.Instance->JDR2; // (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2));
	  // measureI[2] = hadc1.Instance->JDR3; // (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3)); // will be calculated

	  // 6us
	  __HAL_SPI_ENABLE(&hspi3);
 8000d0c:	4ad4      	ldr	r2, [pc, #848]	; (8001060 <HAL_ADCEx_InjectedConvCpltCallback+0x358>)
	  measureI[0] = hadc1.Instance->JDR1; // (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1));
 8000d0e:	4bd5      	ldr	r3, [pc, #852]	; (8001064 <HAL_ADCEx_InjectedConvCpltCallback+0x35c>)
void HAL_GPIO_WritePin_Fast(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
    if(PinState != GPIO_PIN_RESET)
    	GPIOx->BSRR = GPIO_Pin;
    else
        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d10:	49d5      	ldr	r1, [pc, #852]	; (8001068 <HAL_ADCEx_InjectedConvCpltCallback+0x360>)
	  measureI[0] = hadc1.Instance->JDR1; // (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1));
 8000d12:	681b      	ldr	r3, [r3, #0]
	  __HAL_SPI_ENABLE(&hspi3);
 8000d14:	6812      	ldr	r2, [r2, #0]
	  measureI[0] = hadc1.Instance->JDR1; // (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1));
 8000d16:	4ed5      	ldr	r6, [pc, #852]	; (800106c <HAL_ADCEx_InjectedConvCpltCallback+0x364>)
        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d18:	48d5      	ldr	r0, [pc, #852]	; (8001070 <HAL_ADCEx_InjectedConvCpltCallback+0x368>)
 8000d1a:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 {
 8000d1e:	ed2d 8b04 	vpush	{d8-d9}
        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d22:	618c      	str	r4, [r1, #24]
	  measureI[0] = hadc1.Instance->JDR1; // (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1));
 8000d24:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
	  measureI[1] = hadc1.Instance->JDR2; // (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2));
 8000d28:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
	  __HAL_SPI_ENABLE(&hspi3);
 8000d2c:	6813      	ldr	r3, [r2, #0]
	  measureI[0] = hadc1.Instance->JDR1; // (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1));
 8000d2e:	8034      	strh	r4, [r6, #0]
	  measureI[1] = hadc1.Instance->JDR2; // (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2));
 8000d30:	8071      	strh	r1, [r6, #2]
	  __HAL_SPI_ENABLE(&hspi3);
 8000d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d36:	f44f 2480 	mov.w	r4, #262144	; 0x40000
	  hspi3.Instance->DR = 0;
 8000d3a:	2100      	movs	r1, #0
	  __HAL_SPI_ENABLE(&hspi3);
 8000d3c:	6013      	str	r3, [r2, #0]
        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d3e:	6184      	str	r4, [r0, #24]
	  hspi3.Instance->DR = 0;
 8000d40:	60d1      	str	r1, [r2, #12]
	  while ((hspi3.Instance->SR & SPI_FLAG_RXNE) == 0){}  	//Wait for Data Ready to Read
 8000d42:	6893      	ldr	r3, [r2, #8]
 8000d44:	07db      	lsls	r3, r3, #31
 8000d46:	d5fc      	bpl.n	8000d42 <HAL_ADCEx_InjectedConvCpltCallback+0x3a>
	  spiRxBuffer = hspi3.Instance->DR;						//Read Data Register Directly
 8000d48:	68d0      	ldr	r0, [r2, #12]
    	GPIOx->BSRR = GPIO_Pin;
 8000d4a:	49c9      	ldr	r1, [pc, #804]	; (8001070 <HAL_ADCEx_InjectedConvCpltCallback+0x368>)
	  spiRxBuffer &= 0x3FFE;
 8000d4c:	4cc9      	ldr	r4, [pc, #804]	; (8001074 <HAL_ADCEx_InjectedConvCpltCallback+0x36c>)
	  encod = encoder*encoderConst*11.0f; // x / 16384 * 11 (polpares) (0.0 - 11.0)
 8000d4e:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8001078 <HAL_ADCEx_InjectedConvCpltCallback+0x370>
	  angleRad = (encod - (int) encod) * twoPI;	// ((0.0 - 0.99) * 2PI
 8000d52:	eddf 6aca 	vldr	s13, [pc, #808]	; 800107c <HAL_ADCEx_InjectedConvCpltCallback+0x374>
 8000d56:	f8df 83d4 	ldr.w	r8, [pc, #980]	; 800112c <HAL_ADCEx_InjectedConvCpltCallback+0x424>
	  VFsine = arm_sin_f32(VFcounter)*1500.0f;
 8000d5a:	4fc9      	ldr	r7, [pc, #804]	; (8001080 <HAL_ADCEx_InjectedConvCpltCallback+0x378>)
	  sine = arm_cos_f32(angleRad);
 8000d5c:	4dc9      	ldr	r5, [pc, #804]	; (8001084 <HAL_ADCEx_InjectedConvCpltCallback+0x37c>)
	  spiRxBuffer &= 0x3FFE;
 8000d5e:	f643 73fe 	movw	r3, #16382	; 0x3ffe
 8000d62:	4003      	ands	r3, r0
    	GPIOx->BSRR = GPIO_Pin;
 8000d64:	2004      	movs	r0, #4
 8000d66:	6188      	str	r0, [r1, #24]
	  __HAL_SPI_DISABLE(&hspi3);
 8000d68:	6810      	ldr	r0, [r2, #0]
	  encoder = (0x3FFF-spiRxBuffer)+150;
 8000d6a:	f5c3 4181 	rsb	r1, r3, #16512	; 0x4080
	  __HAL_SPI_DISABLE(&hspi3);
 8000d6e:	f020 0040 	bic.w	r0, r0, #64	; 0x40
	  encoder = (0x3FFF-spiRxBuffer)+150;
 8000d72:	3115      	adds	r1, #21
	  __HAL_SPI_DISABLE(&hspi3);
 8000d74:	6010      	str	r0, [r2, #0]
	  encoder = (0x3FFF-spiRxBuffer)+150;
 8000d76:	b289      	uxth	r1, r1
	  else if (encoder > 16387)
 8000d78:	f244 0203 	movw	r2, #16387	; 0x4003
 8000d7c:	4291      	cmp	r1, r2
	  spiRxBuffer &= 0x3FFE;
 8000d7e:	8023      	strh	r3, [r4, #0]
	  encoder = (0x3FFF-spiRxBuffer)+150;
 8000d80:	bf94      	ite	ls
 8000d82:	b20b      	sxthls	r3, r1
		  encoder = encoder - 16387;
 8000d84:	f1c3 0392 	rsbhi	r3, r3, #146	; 0x92
	  encod = encoder*encoderConst*11.0f; // x / 16384 * 11 (polpares) (0.0 - 11.0)
 8000d88:	ee07 3a90 	vmov	s15, r3
 8000d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		  encoder = encoder - 16387;
 8000d90:	4abd      	ldr	r2, [pc, #756]	; (8001088 <HAL_ADCEx_InjectedConvCpltCallback+0x380>)
	  cosine = arm_sin_f32(angleRad);
 8000d92:	4cbe      	ldr	r4, [pc, #760]	; (800108c <HAL_ADCEx_InjectedConvCpltCallback+0x384>)
		  encoder = encoder - 16387;
 8000d94:	8013      	strh	r3, [r2, #0]
	  encod = encoder*encoderConst*11.0f; // x / 16384 * 11 (polpares) (0.0 - 11.0)
 8000d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d9a:	4bbd      	ldr	r3, [pc, #756]	; (8001090 <HAL_ADCEx_InjectedConvCpltCallback+0x388>)
	  angleRad = (encod - (int) encod) * twoPI;	// ((0.0 - 0.99) * 2PI
 8000d9c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
	  encod = encoder*encoderConst*11.0f; // x / 16384 * 11 (polpares) (0.0 - 11.0)
 8000da0:	edc3 7a00 	vstr	s15, [r3]
	  angleRad = (encod - (int) encod) * twoPI;	// ((0.0 - 0.99) * 2PI
 8000da4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000da8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000dac:	ee67 7aa6 	vmul.f32	s15, s15, s13
	  cosine = arm_sin_f32(angleRad);
 8000db0:	eeb0 0a67 	vmov.f32	s0, s15
	  angleRad = (encod - (int) encod) * twoPI;	// ((0.0 - 0.99) * 2PI
 8000db4:	edc8 7a00 	vstr	s15, [r8]
	  cosine = arm_sin_f32(angleRad);
 8000db8:	f004 f90a 	bl	8004fd0 <arm_sin_f32>
 8000dbc:	ed84 0a00 	vstr	s0, [r4]
	  sine = arm_cos_f32(angleRad);
 8000dc0:	ed98 0a00 	vldr	s0, [r8]
 8000dc4:	f004 f948 	bl	8005058 <arm_cos_f32>
 8000dc8:	ed85 0a00 	vstr	s0, [r5]
	  VFsine = arm_sin_f32(VFcounter)*1500.0f;
 8000dcc:	ed97 0a00 	vldr	s0, [r7]
 8000dd0:	f004 f8fe 	bl	8004fd0 <arm_sin_f32>
 8000dd4:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8001094 <HAL_ADCEx_InjectedConvCpltCallback+0x38c>
	  VFcounter = VFcounter + VFstep;
 8000dd8:	ed97 7a00 	vldr	s14, [r7]
	  if (VFcounter > twoPI)
 8000ddc:	eddf 6aae 	vldr	s13, [pc, #696]	; 8001098 <HAL_ADCEx_InjectedConvCpltCallback+0x390>
	  VFsine = arm_sin_f32(VFcounter)*1500.0f;
 8000de0:	4bae      	ldr	r3, [pc, #696]	; (800109c <HAL_ADCEx_InjectedConvCpltCallback+0x394>)
 8000de2:	ee20 0a27 	vmul.f32	s0, s0, s15
	  if (VFcounter > twoPI)
 8000de6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8000dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  VFsine = arm_sin_f32(VFcounter)*1500.0f;
 8000dee:	ed83 0a00 	vstr	s0, [r3]
	  if (VFcounter > twoPI)
 8000df2:	f300 81eb 	bgt.w	80011cc <HAL_ADCEx_InjectedConvCpltCallback+0x4c4>
	  VFcounter = VFcounter + VFstep;
 8000df6:	eddf 7aaa 	vldr	s15, [pc, #680]	; 80010a0 <HAL_ADCEx_InjectedConvCpltCallback+0x398>
 8000dfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dfe:	ed87 7a00 	vstr	s14, [r7]
	  measA = (1.5957f* (float) measureI[0])-3089.72f; 	// iA (mA)
 8000e02:	8833      	ldrh	r3, [r6, #0]
 8000e04:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80010a4 <HAL_ADCEx_InjectedConvCpltCallback+0x39c>
 8000e08:	ed9f 4aa7 	vldr	s8, [pc, #668]	; 80010a8 <HAL_ADCEx_InjectedConvCpltCallback+0x3a0>
	  beta  = 0.577f * (measB - measC);
 8000e0c:	eddf 2aa7 	vldr	s5, [pc, #668]	; 80010ac <HAL_ADCEx_InjectedConvCpltCallback+0x3a4>
	  PV_id = cosine*alpha + sine*beta;
 8000e10:	edd4 4a00 	vldr	s9, [r4]
	  alpha = 0.333f * (2*measA - measB - measC);
 8000e14:	ed9f 3aa6 	vldr	s6, [pc, #664]	; 80010b0 <HAL_ADCEx_InjectedConvCpltCallback+0x3a8>
	  PV_id = cosine*alpha + sine*beta;
 8000e18:	ed95 5a00 	vldr	s10, [r5]
	  yq = 0.9608f*yqk + 0.03921*uqk;
 8000e1c:	4fa5      	ldr	r7, [pc, #660]	; (80010b4 <HAL_ADCEx_InjectedConvCpltCallback+0x3ac>)
 8000e1e:	ed9f 9aa6 	vldr	s18, [pc, #664]	; 80010b8 <HAL_ADCEx_InjectedConvCpltCallback+0x3b0>
 8000e22:	edd7 3a00 	vldr	s7, [r7]
	  measA = (1.5957f* (float) measureI[0])-3089.72f; 	// iA (mA)
 8000e26:	f8df c308 	ldr.w	ip, [pc, #776]	; 8001130 <HAL_ADCEx_InjectedConvCpltCallback+0x428>
	  PV_id = cosine*alpha + sine*beta;
 8000e2a:	4aa4      	ldr	r2, [pc, #656]	; (80010bc <HAL_ADCEx_InjectedConvCpltCallback+0x3b4>)
	  measB = (1.5957f* (float) measureI[1])-3089.72f; 	// iB (mA)
 8000e2c:	48a4      	ldr	r0, [pc, #656]	; (80010c0 <HAL_ADCEx_InjectedConvCpltCallback+0x3b8>)
	  measC = -measA-measB;								// iC (mA) calculated
 8000e2e:	49a5      	ldr	r1, [pc, #660]	; (80010c4 <HAL_ADCEx_InjectedConvCpltCallback+0x3bc>)
	  yd = 0.9608f*ydk + 0.03921*udk;
 8000e30:	f8df a300 	ldr.w	sl, [pc, #768]	; 8001134 <HAL_ADCEx_InjectedConvCpltCallback+0x42c>
	  measA = (1.5957f* (float) measureI[0])-3089.72f; 	// iA (mA)
 8000e34:	ee05 3a90 	vmov	s11, r3
	  measB = (1.5957f* (float) measureI[1])-3089.72f; 	// iB (mA)
 8000e38:	8873      	ldrh	r3, [r6, #2]
	  yd = 0.9608f*ydk + 0.03921*udk;
 8000e3a:	4ea3      	ldr	r6, [pc, #652]	; (80010c8 <HAL_ADCEx_InjectedConvCpltCallback+0x3c0>)
	  measB = (1.5957f* (float) measureI[1])-3089.72f; 	// iB (mA)
 8000e3c:	ee06 3a10 	vmov	s12, r3
	  measA = (1.5957f* (float) measureI[0])-3089.72f; 	// iA (mA)
 8000e40:	eef8 5a65 	vcvt.f32.u32	s11, s11
	  measB = (1.5957f* (float) measureI[1])-3089.72f; 	// iB (mA)
 8000e44:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	  measA = (1.5957f* (float) measureI[0])-3089.72f; 	// iA (mA)
 8000e48:	eef0 7a47 	vmov.f32	s15, s14
 8000e4c:	eee5 7a84 	vfma.f32	s15, s11, s8
	  PV_iq = -sine*alpha + cosine*beta;
 8000e50:	4b9e      	ldr	r3, [pc, #632]	; (80010cc <HAL_ADCEx_InjectedConvCpltCallback+0x3c4>)
	  measB = (1.5957f* (float) measureI[1])-3089.72f; 	// iB (mA)
 8000e52:	eea6 7a04 	vfma.f32	s14, s12, s8
	  measA = (1.5957f* (float) measureI[0])-3089.72f; 	// iA (mA)
 8000e56:	eef0 5a67 	vmov.f32	s11, s15
 8000e5a:	ee35 6a87 	vadd.f32	s12, s11, s14
	  alpha = 0.333f * (2*measA - measB - measC);
 8000e5e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8000e62:	eef0 6a46 	vmov.f32	s13, s12
 8000e66:	eee5 6aa7 	vfma.f32	s13, s11, s15
	  measB = (1.5957f* (float) measureI[1])-3089.72f; 	// iB (mA)
 8000e6a:	ed80 7a00 	vstr	s14, [r0]
	  alpha = 0.333f * (2*measA - measB - measC);
 8000e6e:	eef0 7a66 	vmov.f32	s15, s13
	  beta  = 0.577f * (measB - measC);
 8000e72:	ee77 6a06 	vadd.f32	s13, s14, s12
	  alpha = 0.333f * (2*measA - measB - measC);
 8000e76:	ee77 7ac7 	vsub.f32	s15, s15, s14
	  beta  = 0.577f * (measB - measC);
 8000e7a:	ee66 6aa2 	vmul.f32	s13, s13, s5
	  alpha = 0.333f * (2*measA - measB - measC);
 8000e7e:	ee67 7a83 	vmul.f32	s15, s15, s6
	  PV_iq = -sine*alpha + cosine*beta;
 8000e82:	ee66 8aa4 	vmul.f32	s17, s13, s9
	  PV_id = cosine*alpha + sine*beta;
 8000e86:	ee26 8a85 	vmul.f32	s16, s13, s10
 8000e8a:	eee7 8ac5 	vfms.f32	s17, s15, s10
 8000e8e:	eea7 8aa4 	vfma.f32	s16, s15, s9
	  PV_iq = -sine*alpha + cosine*beta;
 8000e92:	edc3 8a00 	vstr	s17, [r3]
	  alpha = 0.333f * (2*measA - measB - measC);
 8000e96:	4b8e      	ldr	r3, [pc, #568]	; (80010d0 <HAL_ADCEx_InjectedConvCpltCallback+0x3c8>)
	  measA = (1.5957f* (float) measureI[0])-3089.72f; 	// iA (mA)
 8000e98:	edcc 5a00 	vstr	s11, [ip]
	  alpha = 0.333f * (2*measA - measB - measC);
 8000e9c:	edc3 7a00 	vstr	s15, [r3]
	  yq = 0.9608f*yqk + 0.03921*uqk;
 8000ea0:	ee63 7a89 	vmul.f32	s15, s7, s18
	  beta  = 0.577f * (measB - measC);
 8000ea4:	4b8b      	ldr	r3, [pc, #556]	; (80010d4 <HAL_ADCEx_InjectedConvCpltCallback+0x3cc>)
	  PV_id = cosine*alpha + sine*beta;
 8000ea6:	ed82 8a00 	vstr	s16, [r2]
	  measC = -measA-measB;								// iC (mA) calculated
 8000eaa:	eeb1 6a46 	vneg.f32	s12, s12
	  beta  = 0.577f * (measB - measC);
 8000eae:	edc3 6a00 	vstr	s13, [r3]
	  measC = -measA-measB;								// iC (mA) calculated
 8000eb2:	ed81 6a00 	vstr	s12, [r1]
	  yq = 0.9608f*yqk + 0.03921*uqk;
 8000eb6:	ee17 0a90 	vmov	r0, s15
 8000eba:	f7ff fae9 	bl	8000490 <__aeabi_f2d>
 8000ebe:	4b86      	ldr	r3, [pc, #536]	; (80010d8 <HAL_ADCEx_InjectedConvCpltCallback+0x3d0>)
 8000ec0:	4680      	mov	r8, r0
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	4689      	mov	r9, r1
 8000ec6:	f7ff fae3 	bl	8000490 <__aeabi_f2d>
 8000eca:	a363      	add	r3, pc, #396	; (adr r3, 8001058 <HAL_ADCEx_InjectedConvCpltCallback+0x350>)
 8000ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed0:	f7ff fb36 	bl	8000540 <__aeabi_dmul>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4640      	mov	r0, r8
 8000eda:	4649      	mov	r1, r9
 8000edc:	f7ff f97a 	bl	80001d4 <__adddf3>
 8000ee0:	f7ff fd40 	bl	8000964 <__aeabi_d2f>
	  yd = 0.9608f*ydk + 0.03921*udk;
 8000ee4:	edd6 7a00 	vldr	s15, [r6]
	  yq = 0.9608f*yqk + 0.03921*uqk;
 8000ee8:	497c      	ldr	r1, [pc, #496]	; (80010dc <HAL_ADCEx_InjectedConvCpltCallback+0x3d4>)
	  yd = 0.9608f*ydk + 0.03921*udk;
 8000eea:	ee67 7a89 	vmul.f32	s15, s15, s18
	  yq = 0.9608f*yqk + 0.03921*uqk;
 8000eee:	4683      	mov	fp, r0
 8000ef0:	6008      	str	r0, [r1, #0]
	  yd = 0.9608f*ydk + 0.03921*udk;
 8000ef2:	ee17 0a90 	vmov	r0, s15
 8000ef6:	f7ff facb 	bl	8000490 <__aeabi_f2d>
 8000efa:	4689      	mov	r9, r1
 8000efc:	4978      	ldr	r1, [pc, #480]	; (80010e0 <HAL_ADCEx_InjectedConvCpltCallback+0x3d8>)
 8000efe:	4680      	mov	r8, r0
 8000f00:	6808      	ldr	r0, [r1, #0]
 8000f02:	f7ff fac5 	bl	8000490 <__aeabi_f2d>
 8000f06:	a354      	add	r3, pc, #336	; (adr r3, 8001058 <HAL_ADCEx_InjectedConvCpltCallback+0x350>)
 8000f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0c:	f7ff fb18 	bl	8000540 <__aeabi_dmul>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4640      	mov	r0, r8
 8000f16:	4649      	mov	r1, r9
 8000f18:	f7ff f95c 	bl	80001d4 <__adddf3>
 8000f1c:	f7ff fd22 	bl	8000964 <__aeabi_d2f>
	  uqk = PV_iq;
 8000f20:	4a6d      	ldr	r2, [pc, #436]	; (80010d8 <HAL_ADCEx_InjectedConvCpltCallback+0x3d0>)
	  yqk = yq;
 8000f22:	f8c7 b000 	str.w	fp, [r7]
	  uqk = PV_iq;
 8000f26:	edc2 8a00 	vstr	s17, [r2]
	  udk = PV_id;
 8000f2a:	4a6d      	ldr	r2, [pc, #436]	; (80010e0 <HAL_ADCEx_InjectedConvCpltCallback+0x3d8>)
	  yd = 0.9608f*ydk + 0.03921*udk;
 8000f2c:	4603      	mov	r3, r0
	  if(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13))
 8000f2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f32:	486c      	ldr	r0, [pc, #432]	; (80010e4 <HAL_ADCEx_InjectedConvCpltCallback+0x3dc>)
	  udk = PV_id;
 8000f34:	ed82 8a00 	vstr	s16, [r2]
	  ydk = yd;
 8000f38:	6033      	str	r3, [r6, #0]
	  yd = 0.9608f*ydk + 0.03921*udk;
 8000f3a:	f8ca 3000 	str.w	r3, [sl]
	  if(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13))
 8000f3e:	f001 fe49 	bl	8002bd4 <HAL_GPIO_ReadPin>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	f040 8136 	bne.w	80011b4 <HAL_ADCEx_InjectedConvCpltCallback+0x4ac>
		  measurementI[pointer]  = yq;
 8000f48:	4967      	ldr	r1, [pc, #412]	; (80010e8 <HAL_ADCEx_InjectedConvCpltCallback+0x3e0>)
 8000f4a:	4864      	ldr	r0, [pc, #400]	; (80010dc <HAL_ADCEx_InjectedConvCpltCallback+0x3d4>)
 8000f4c:	880b      	ldrh	r3, [r1, #0]
 8000f4e:	4a67      	ldr	r2, [pc, #412]	; (80010ec <HAL_ADCEx_InjectedConvCpltCallback+0x3e4>)
 8000f50:	edd0 6a00 	vldr	s13, [r0]
		  SP_iq = 150.0f;
 8000f54:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80010f0 <HAL_ADCEx_InjectedConvCpltCallback+0x3e8>
 8000f58:	4866      	ldr	r0, [pc, #408]	; (80010f4 <HAL_ADCEx_InjectedConvCpltCallback+0x3ec>)
		  measurementI[pointer]  = yq;
 8000f5a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		  if (pointer < 300)
 8000f5e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
		  measurementI[pointer]  = yq;
 8000f62:	edc2 6a00 	vstr	s13, [r2]
		  SP_iq = 150.0f;
 8000f66:	ed80 7a00 	vstr	s14, [r0]
		  if (pointer < 300)
 8000f6a:	f0c0 814c 	bcc.w	8001206 <HAL_ADCEx_InjectedConvCpltCallback+0x4fe>
	  e_d = SP_id - yd;
 8000f6e:	4b62      	ldr	r3, [pc, #392]	; (80010f8 <HAL_ADCEx_InjectedConvCpltCallback+0x3f0>)
 8000f70:	ed9a 5a00 	vldr	s10, [sl]
 8000f74:	edd3 5a00 	vldr	s11, [r3]
	  sum_d = sum_d + e_d;
 8000f78:	4b60      	ldr	r3, [pc, #384]	; (80010fc <HAL_ADCEx_InjectedConvCpltCallback+0x3f4>)
	  if (sum_d > 10200.0f)
 8000f7a:	eddf 7a61 	vldr	s15, [pc, #388]	; 8001100 <HAL_ADCEx_InjectedConvCpltCallback+0x3f8>
	  sum_d = sum_d + e_d;
 8000f7e:	ed93 6a00 	vldr	s12, [r3]
	  e_d = SP_id - yd;
 8000f82:	4a60      	ldr	r2, [pc, #384]	; (8001104 <HAL_ADCEx_InjectedConvCpltCallback+0x3fc>)
	  e_q = SP_iq - yq;
 8000f84:	4960      	ldr	r1, [pc, #384]	; (8001108 <HAL_ADCEx_InjectedConvCpltCallback+0x400>)
	  alpha = cosine*ud - sine*uq;
 8000f86:	edd4 4a00 	vldr	s9, [r4]
	  if(uA < -10200.0f)
 8000f8a:	ed9f 4a6c 	vldr	s8, [pc, #432]	; 800113c <HAL_ADCEx_InjectedConvCpltCallback+0x434>
	  e_d = SP_id - yd;
 8000f8e:	ee75 5ac5 	vsub.f32	s11, s11, s10
	  e_q = SP_iq - yq;
 8000f92:	ee37 7a66 	vsub.f32	s14, s14, s13
	  sum_d = sum_d + e_d;
 8000f96:	ee35 6a86 	vadd.f32	s12, s11, s12
	  if (sum_q > 10200.0f)
 8000f9a:	eddf 6a59 	vldr	s13, [pc, #356]	; 8001100 <HAL_ADCEx_InjectedConvCpltCallback+0x3f8>
	  e_d = SP_id - yd;
 8000f9e:	edc2 5a00 	vstr	s11, [r2]
	  if (sum_d > 10200.0f)
 8000fa2:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8000fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  sum_d = sum_d + e_d;
 8000faa:	bfd4      	ite	le
 8000fac:	ed83 6a00 	vstrle	s12, [r3]
		  sum_d = 10200.0f;
 8000fb0:	edc3 7a00 	vstrgt	s15, [r3]
	  sum_q = sum_q + e_q;
 8000fb4:	4b55      	ldr	r3, [pc, #340]	; (800110c <HAL_ADCEx_InjectedConvCpltCallback+0x404>)
	  ud = (K_d*e_d + Ki_d*sum_d)+VFsine;
 8000fb6:	4a56      	ldr	r2, [pc, #344]	; (8001110 <HAL_ADCEx_InjectedConvCpltCallback+0x408>)
	  e_q = SP_iq - yq;
 8000fb8:	ed81 7a00 	vstr	s14, [r1]
		  sum_d = 10200.0f;
 8000fbc:	bfc8      	it	gt
 8000fbe:	eeb0 6a67 	vmovgt.f32	s12, s15
	  sum_q = sum_q + e_q;
 8000fc2:	edd3 7a00 	vldr	s15, [r3]
	  ud = (K_d*e_d + Ki_d*sum_d)+VFsine;
 8000fc6:	edd2 2a00 	vldr	s5, [r2]
 8000fca:	4a34      	ldr	r2, [pc, #208]	; (800109c <HAL_ADCEx_InjectedConvCpltCallback+0x394>)
	  alpha = cosine*ud - sine*uq;
 8000fcc:	ed95 5a00 	vldr	s10, [r5]
	  sum_q = sum_q + e_q;
 8000fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
	  if (sum_q > 10200.0f)
 8000fd4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8000fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  sum_q = sum_q + e_q;
 8000fdc:	bfd4      	ite	le
 8000fde:	edc3 7a00 	vstrle	s15, [r3]
	 		  sum_q = 10200.0f;
 8000fe2:	edc3 6a00 	vstrgt	s13, [r3]
	  uq = K_q*e_q + Ki_q*sum_q;
 8000fe6:	4b4b      	ldr	r3, [pc, #300]	; (8001114 <HAL_ADCEx_InjectedConvCpltCallback+0x40c>)
	 		  sum_q = 10200.0f;
 8000fe8:	bfc8      	it	gt
 8000fea:	eef0 7a66 	vmovgt.f32	s15, s13
	  ud = (K_d*e_d + Ki_d*sum_d)+VFsine;
 8000fee:	edd2 6a00 	vldr	s13, [r2]
	  uq = K_q*e_q + Ki_q*sum_q;
 8000ff2:	ed93 2a00 	vldr	s4, [r3]
 8000ff6:	4b48      	ldr	r3, [pc, #288]	; (8001118 <HAL_ADCEx_InjectedConvCpltCallback+0x410>)
 8000ff8:	4a48      	ldr	r2, [pc, #288]	; (800111c <HAL_ADCEx_InjectedConvCpltCallback+0x414>)
 8000ffa:	ed93 3a00 	vldr	s6, [r3]
	  ud = (K_d*e_d + Ki_d*sum_d)+VFsine;
 8000ffe:	4b48      	ldr	r3, [pc, #288]	; (8001120 <HAL_ADCEx_InjectedConvCpltCallback+0x418>)
 8001000:	eee5 6aa2 	vfma.f32	s13, s11, s5
	  uq = K_q*e_q + Ki_q*sum_q;
 8001004:	ee67 7a82 	vmul.f32	s15, s15, s4
	  ud = (K_d*e_d + Ki_d*sum_d)+VFsine;
 8001008:	edd3 3a00 	vldr	s7, [r3]
 800100c:	4b45      	ldr	r3, [pc, #276]	; (8001124 <HAL_ADCEx_InjectedConvCpltCallback+0x41c>)
	  uq = K_q*e_q + Ki_q*sum_q;
 800100e:	eee7 7a03 	vfma.f32	s15, s14, s6
	  ud = (K_d*e_d + Ki_d*sum_d)+VFsine;
 8001012:	eeb0 7a66 	vmov.f32	s14, s13
 8001016:	eea3 7a86 	vfma.f32	s14, s7, s12
	  alpha = cosine*ud - sine*uq;
 800101a:	ee65 6a67 	vnmul.f32	s13, s10, s15
	  beta  = sine*ud + cosine*uq;
 800101e:	ee27 6aa4 	vmul.f32	s12, s15, s9
	  alpha = cosine*ud - sine*uq;
 8001022:	eee7 6a24 	vfma.f32	s13, s14, s9
	  beta  = sine*ud + cosine*uq;
 8001026:	eea7 6a05 	vfma.f32	s12, s14, s10
	  uq = K_q*e_q + Ki_q*sum_q;
 800102a:	edc2 7a00 	vstr	s15, [r2]
	  beta  = sine*ud + cosine*uq;
 800102e:	4a29      	ldr	r2, [pc, #164]	; (80010d4 <HAL_ADCEx_InjectedConvCpltCallback+0x3cc>)
	  ud = (K_d*e_d + Ki_d*sum_d)+VFsine;
 8001030:	ed83 7a00 	vstr	s14, [r3]
	  beta  = sine*ud + cosine*uq;
 8001034:	ed82 6a00 	vstr	s12, [r2]
	  if(uA < -10200.0f)
 8001038:	eef4 6ac4 	vcmpe.f32	s13, s8
	  alpha = cosine*ud - sine*uq;
 800103c:	4a24      	ldr	r2, [pc, #144]	; (80010d0 <HAL_ADCEx_InjectedConvCpltCallback+0x3c8>)
	  if(uA < -10200.0f)
 800103e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  alpha = cosine*ud - sine*uq;
 8001042:	edc2 6a00 	vstr	s13, [r2]
	  if(uA < -10200.0f)
 8001046:	f140 80d1 	bpl.w	80011ec <HAL_ADCEx_InjectedConvCpltCallback+0x4e4>
		  uA = -10200.0f;
 800104a:	4b37      	ldr	r3, [pc, #220]	; (8001128 <HAL_ADCEx_InjectedConvCpltCallback+0x420>)
 800104c:	2096      	movs	r0, #150	; 0x96
 800104e:	ed83 4a00 	vstr	s8, [r3]
 8001052:	e075      	b.n	8001140 <HAL_ADCEx_InjectedConvCpltCallback+0x438>
 8001054:	f3af 8000 	nop.w
 8001058:	475a31a5 	.word	0x475a31a5
 800105c:	3fa41355 	.word	0x3fa41355
 8001060:	2000054c 	.word	0x2000054c
 8001064:	200005b8 	.word	0x200005b8
 8001068:	48000400 	.word	0x48000400
 800106c:	20000064 	.word	0x20000064
 8001070:	48000c00 	.word	0x48000c00
 8001074:	20000954 	.word	0x20000954
 8001078:	3a2fffe2 	.word	0x3a2fffe2
 800107c:	40c90fda 	.word	0x40c90fda
 8001080:	20000048 	.word	0x20000048
 8001084:	200005b4 	.word	0x200005b4
 8001088:	20000060 	.word	0x20000060
 800108c:	20000620 	.word	0x20000620
 8001090:	20000544 	.word	0x20000544
 8001094:	44bb8000 	.word	0x44bb8000
 8001098:	40c4090e 	.word	0x40c4090e
 800109c:	2000004c 	.word	0x2000004c
 80010a0:	3e20d97c 	.word	0x3e20d97c
 80010a4:	c5411b85 	.word	0xc5411b85
 80010a8:	3fcc3fe6 	.word	0x3fcc3fe6
 80010ac:	3f13b646 	.word	0x3f13b646
 80010b0:	3eaa7efa 	.word	0x3eaa7efa
 80010b4:	2000061c 	.word	0x2000061c
 80010b8:	3f75f6fd 	.word	0x3f75f6fd
 80010bc:	2000003c 	.word	0x2000003c
 80010c0:	20000548 	.word	0x20000548
 80010c4:	2000094c 	.word	0x2000094c
 80010c8:	2000008c 	.word	0x2000008c
 80010cc:	20000040 	.word	0x20000040
 80010d0:	20000050 	.word	0x20000050
 80010d4:	20000054 	.word	0x20000054
 80010d8:	200005b0 	.word	0x200005b0
 80010dc:	20000540 	.word	0x20000540
 80010e0:	20000950 	.word	0x20000950
 80010e4:	48000800 	.word	0x48000800
 80010e8:	2000006a 	.word	0x2000006a
 80010ec:	20000090 	.word	0x20000090
 80010f0:	43160000 	.word	0x43160000
 80010f4:	20000010 	.word	0x20000010
 80010f8:	20000044 	.word	0x20000044
 80010fc:	2000006c 	.word	0x2000006c
 8001100:	461f6000 	.word	0x461f6000
 8001104:	20000058 	.word	0x20000058
 8001108:	2000005c 	.word	0x2000005c
 800110c:	20000070 	.word	0x20000070
 8001110:	20000000 	.word	0x20000000
 8001114:	2000000c 	.word	0x2000000c
 8001118:	20000004 	.word	0x20000004
 800111c:	20000084 	.word	0x20000084
 8001120:	20000008 	.word	0x20000008
 8001124:	20000080 	.word	0x20000080
 8001128:	20000074 	.word	0x20000074
 800112c:	20000824 	.word	0x20000824
 8001130:	20000874 	.word	0x20000874
 8001134:	2000087c 	.word	0x2000087c
 8001138:	3f5db22d 	.word	0x3f5db22d
 800113c:	c61f6000 	.word	0xc61f6000
	  uB = (0.866f*beta - 0.5f*alpha);
 8001140:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001144:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8001148:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8001138 <HAL_ADCEx_InjectedConvCpltCallback+0x430>
	  if(uB < -10200.0f)
 800114c:	ed5f 6a05 	vldr	s13, [pc, #-20]	; 800113c <HAL_ADCEx_InjectedConvCpltCallback+0x434>
	  uB = (0.866f*beta - 0.5f*alpha);
 8001150:	eef0 5a67 	vmov.f32	s11, s15
 8001154:	eee6 5a07 	vfma.f32	s11, s12, s14
	  if(uB < -10200.0f)
 8001158:	eef4 5ae6 	vcmpe.f32	s11, s13
 800115c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  uB = (0.866f*beta - 0.5f*alpha);
 8001160:	eeb0 7a65 	vmov.f32	s14, s11
	  if(uB < -10200.0f)
 8001164:	d535      	bpl.n	80011d2 <HAL_ADCEx_InjectedConvCpltCallback+0x4ca>
	  		  uB = -10200.0f;
 8001166:	4b41      	ldr	r3, [pc, #260]	; (800126c <HAL_ADCEx_InjectedConvCpltCallback+0x564>)
 8001168:	2196      	movs	r1, #150	; 0x96
 800116a:	edc3 6a00 	vstr	s13, [r3]
	  uC = (-0.866f*beta - 0.5f*alpha);
 800116e:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001270 <HAL_ADCEx_InjectedConvCpltCallback+0x568>
	  if(uC < -10200.0f)
 8001172:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001274 <HAL_ADCEx_InjectedConvCpltCallback+0x56c>
	  uC = (-0.866f*beta - 0.5f*alpha);
 8001176:	eee6 7a26 	vfma.f32	s15, s12, s13
	  if(uC < -10200.0f)
 800117a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800117e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001182:	d46d      	bmi.n	8001260 <HAL_ADCEx_InjectedConvCpltCallback+0x558>
	  else if (uC > 10200.0f)
 8001184:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001278 <HAL_ADCEx_InjectedConvCpltCallback+0x570>
 8001188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001190:	dd58      	ble.n	8001244 <HAL_ADCEx_InjectedConvCpltCallback+0x53c>
	  		  uC = 10200.0f;
 8001192:	4b3a      	ldr	r3, [pc, #232]	; (800127c <HAL_ADCEx_InjectedConvCpltCallback+0x574>)
 8001194:	f240 7239 	movw	r2, #1849	; 0x739
 8001198:	ed83 7a00 	vstr	s14, [r3]
 }
 800119c:	ecbd 8b04 	vpop	{d8-d9}
	  htim1.Instance->CCR1 = (uint32_t) (uA*0.08333f+1000.0f);
 80011a0:	4b37      	ldr	r3, [pc, #220]	; (8001280 <HAL_ADCEx_InjectedConvCpltCallback+0x578>)
    	GPIOx->BSRR = GPIO_Pin;
 80011a2:	4c38      	ldr	r4, [pc, #224]	; (8001284 <HAL_ADCEx_InjectedConvCpltCallback+0x57c>)
	  htim1.Instance->CCR1 = (uint32_t) (uA*0.08333f+1000.0f);
 80011a4:	681b      	ldr	r3, [r3, #0]
    	GPIOx->BSRR = GPIO_Pin;
 80011a6:	2580      	movs	r5, #128	; 0x80
	  htim1.Instance->CCR1 = (uint32_t) (uA*0.08333f+1000.0f);
 80011a8:	6358      	str	r0, [r3, #52]	; 0x34
	  htim1.Instance->CCR2 = (uint32_t) (uB*0.08333f+1000.0f);
 80011aa:	6399      	str	r1, [r3, #56]	; 0x38
	  htim1.Instance->CCR3 = (uint32_t) (uC*0.08333f+1000.0f);
 80011ac:	63da      	str	r2, [r3, #60]	; 0x3c
    	GPIOx->BSRR = GPIO_Pin;
 80011ae:	61a5      	str	r5, [r4, #24]
 }
 80011b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		  SP_iq = 0.0f;
 80011b4:	4a34      	ldr	r2, [pc, #208]	; (8001288 <HAL_ADCEx_InjectedConvCpltCallback+0x580>)
 80011b6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800128c <HAL_ADCEx_InjectedConvCpltCallback+0x584>
		  pointer = 0;
 80011ba:	4b35      	ldr	r3, [pc, #212]	; (8001290 <HAL_ADCEx_InjectedConvCpltCallback+0x588>)
		  SP_iq = 0.0f;
 80011bc:	ed82 7a00 	vstr	s14, [r2]
		  pointer = 0;
 80011c0:	2200      	movs	r2, #0
 80011c2:	801a      	strh	r2, [r3, #0]
 80011c4:	4b33      	ldr	r3, [pc, #204]	; (8001294 <HAL_ADCEx_InjectedConvCpltCallback+0x58c>)
 80011c6:	edd3 6a00 	vldr	s13, [r3]
 80011ca:	e6d0      	b.n	8000f6e <HAL_ADCEx_InjectedConvCpltCallback+0x266>
		  	  VFcounter = 0.0f;
 80011cc:	2300      	movs	r3, #0
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	e617      	b.n	8000e02 <HAL_ADCEx_InjectedConvCpltCallback+0xfa>
	  else if (uB > 10200.0f)
 80011d2:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001278 <HAL_ADCEx_InjectedConvCpltCallback+0x570>
 80011d6:	eef4 5ae6 	vcmpe.f32	s11, s13
 80011da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011de:	dd23      	ble.n	8001228 <HAL_ADCEx_InjectedConvCpltCallback+0x520>
	  		  uB = 10200.0f;
 80011e0:	4b22      	ldr	r3, [pc, #136]	; (800126c <HAL_ADCEx_InjectedConvCpltCallback+0x564>)
 80011e2:	f240 7139 	movw	r1, #1849	; 0x739
 80011e6:	edc3 6a00 	vstr	s13, [r3]
 80011ea:	e7c0      	b.n	800116e <HAL_ADCEx_InjectedConvCpltCallback+0x466>
	  else if (uA > 10200.0f)
 80011ec:	eddf 7a22 	vldr	s15, [pc, #136]	; 8001278 <HAL_ADCEx_InjectedConvCpltCallback+0x570>
 80011f0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80011f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f8:	dd08      	ble.n	800120c <HAL_ADCEx_InjectedConvCpltCallback+0x504>
		  uA = 10200.0f;
 80011fa:	4b27      	ldr	r3, [pc, #156]	; (8001298 <HAL_ADCEx_InjectedConvCpltCallback+0x590>)
 80011fc:	f240 7039 	movw	r0, #1849	; 0x739
 8001200:	edc3 7a00 	vstr	s15, [r3]
 8001204:	e79c      	b.n	8001140 <HAL_ADCEx_InjectedConvCpltCallback+0x438>
			  pointer++;
 8001206:	3301      	adds	r3, #1
 8001208:	800b      	strh	r3, [r1, #0]
 800120a:	e6b0      	b.n	8000f6e <HAL_ADCEx_InjectedConvCpltCallback+0x266>
 800120c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800129c <HAL_ADCEx_InjectedConvCpltCallback+0x594>
 8001210:	eddf 7a23 	vldr	s15, [pc, #140]	; 80012a0 <HAL_ADCEx_InjectedConvCpltCallback+0x598>
	  uA = alpha;
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <HAL_ADCEx_InjectedConvCpltCallback+0x590>)
 8001216:	eee6 7a87 	vfma.f32	s15, s13, s14
 800121a:	edc3 6a00 	vstr	s13, [r3]
 800121e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001222:	ee17 0a90 	vmov	r0, s15
 8001226:	e78b      	b.n	8001140 <HAL_ADCEx_InjectedConvCpltCallback+0x438>
 8001228:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800129c <HAL_ADCEx_InjectedConvCpltCallback+0x594>
 800122c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80012a0 <HAL_ADCEx_InjectedConvCpltCallback+0x598>
	  uB = (0.866f*beta - 0.5f*alpha);
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_ADCEx_InjectedConvCpltCallback+0x564>)
 8001232:	eee7 6a25 	vfma.f32	s13, s14, s11
 8001236:	ed83 7a00 	vstr	s14, [r3]
 800123a:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 800123e:	ee17 1a10 	vmov	r1, s14
 8001242:	e794      	b.n	800116e <HAL_ADCEx_InjectedConvCpltCallback+0x466>
 8001244:	eddf 6a15 	vldr	s13, [pc, #84]	; 800129c <HAL_ADCEx_InjectedConvCpltCallback+0x594>
 8001248:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80012a0 <HAL_ADCEx_InjectedConvCpltCallback+0x598>
	  uC = (-0.866f*beta - 0.5f*alpha);
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_ADCEx_InjectedConvCpltCallback+0x574>)
 800124e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8001252:	edc3 7a00 	vstr	s15, [r3]
 8001256:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800125a:	ee17 2a90 	vmov	r2, s15
 800125e:	e79d      	b.n	800119c <HAL_ADCEx_InjectedConvCpltCallback+0x494>
	  		  uC = -10200.0f;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_ADCEx_InjectedConvCpltCallback+0x574>)
 8001262:	2296      	movs	r2, #150	; 0x96
 8001264:	ed83 7a00 	vstr	s14, [r3]
 8001268:	e798      	b.n	800119c <HAL_ADCEx_InjectedConvCpltCallback+0x494>
 800126a:	bf00      	nop
 800126c:	20000078 	.word	0x20000078
 8001270:	bf5db22d 	.word	0xbf5db22d
 8001274:	c61f6000 	.word	0xc61f6000
 8001278:	461f6000 	.word	0x461f6000
 800127c:	2000007c 	.word	0x2000007c
 8001280:	20000828 	.word	0x20000828
 8001284:	48000400 	.word	0x48000400
 8001288:	20000010 	.word	0x20000010
 800128c:	00000000 	.word	0x00000000
 8001290:	2000006a 	.word	0x2000006a
 8001294:	20000540 	.word	0x20000540
 8001298:	20000074 	.word	0x20000074
 800129c:	3daaa8eb 	.word	0x3daaa8eb
 80012a0:	447a0000 	.word	0x447a0000

080012a4 <SystemClock_Config>:
{
 80012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a6:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a8:	2224      	movs	r2, #36	; 0x24
 80012aa:	2100      	movs	r1, #0
 80012ac:	a806      	add	r0, sp, #24
 80012ae:	f003 ff37 	bl	8005120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b2:	2300      	movs	r3, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b4:	4619      	mov	r1, r3
 80012b6:	2288      	movs	r2, #136	; 0x88
 80012b8:	a816      	add	r0, sp, #88	; 0x58
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ba:	2402      	movs	r4, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012bc:	e9cd 3300 	strd	r3, r3, [sp]
 80012c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80012c4:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012c6:	2601      	movs	r6, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c8:	f003 ff2a 	bl	8005120 <memset>
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012cc:	2507      	movs	r5, #7
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ce:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d2:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012d4:	230a      	movs	r3, #10
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d6:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d8:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012da:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012de:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e2:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e4:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012e6:	e9cd 6311 	strd	r6, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012ea:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ec:	f001 fd24 	bl	8002d38 <HAL_RCC_OscConfig>
 80012f0:	b108      	cbz	r0, 80012f6 <SystemClock_Config+0x52>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f2:	b672      	cpsid	i
 80012f4:	e7fe      	b.n	80012f4 <SystemClock_Config+0x50>
 80012f6:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f8:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fe:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001300:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001302:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001304:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001306:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001308:	9200      	str	r2, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800130a:	f002 f885 	bl	8003418 <HAL_RCC_ClockConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	b108      	cbz	r0, 8001316 <SystemClock_Config+0x72>
 8001312:	b672      	cpsid	i
 8001314:	e7fe      	b.n	8001314 <SystemClock_Config+0x70>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8001316:	f244 0702 	movw	r7, #16386	; 0x4002
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800131a:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800131c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001320:	2208      	movs	r2, #8
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001322:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001326:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001328:	e9cd 4617 	strd	r4, r6, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800132c:	951a      	str	r5, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800132e:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8001332:	9716      	str	r7, [sp, #88]	; 0x58
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001334:	9134      	str	r1, [sp, #208]	; 0xd0
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001336:	9219      	str	r2, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001338:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133a:	f002 fa35 	bl	80037a8 <HAL_RCCEx_PeriphCLKConfig>
 800133e:	b108      	cbz	r0, 8001344 <SystemClock_Config+0xa0>
 8001340:	b672      	cpsid	i
 8001342:	e7fe      	b.n	8001342 <SystemClock_Config+0x9e>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001344:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001348:	f001 fc58 	bl	8002bfc <HAL_PWREx_ControlVoltageScaling>
 800134c:	b108      	cbz	r0, 8001352 <SystemClock_Config+0xae>
 800134e:	b672      	cpsid	i
 8001350:	e7fe      	b.n	8001350 <SystemClock_Config+0xac>
}
 8001352:	b039      	add	sp, #228	; 0xe4
 8001354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001356:	bf00      	nop

08001358 <main>:
{
 8001358:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	2400      	movs	r4, #0
{
 800135c:	b0a0      	sub	sp, #128	; 0x80
  HAL_Init();
 800135e:	f000 fbe1 	bl	8001b24 <HAL_Init>
  SystemClock_Config();
 8001362:	f7ff ff9f 	bl	80012a4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 800136a:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	4ba6      	ldr	r3, [pc, #664]	; (8001608 <main+0x2b0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	9416      	str	r4, [sp, #88]	; 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hadc1.Instance = ADC1;
 8001374:	4da5      	ldr	r5, [pc, #660]	; (800160c <main+0x2b4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001376:	f042 0204 	orr.w	r2, r2, #4
 800137a:	64da      	str	r2, [r3, #76]	; 0x4c
 800137c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800137e:	f002 0204 	and.w	r2, r2, #4
 8001382:	9200      	str	r2, [sp, #0]
 8001384:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001388:	f042 0201 	orr.w	r2, r2, #1
 800138c:	64da      	str	r2, [r3, #76]	; 0x4c
 800138e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001390:	f002 0201 	and.w	r2, r2, #1
 8001394:	9201      	str	r2, [sp, #4]
 8001396:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001398:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800139a:	f042 0202 	orr.w	r2, r2, #2
 800139e:	64da      	str	r2, [r3, #76]	; 0x4c
 80013a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013a2:	f002 0202 	and.w	r2, r2, #2
 80013a6:	9202      	str	r2, [sp, #8]
 80013a8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013ac:	f042 0208 	orr.w	r2, r2, #8
 80013b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ba:	4622      	mov	r2, r4
 80013bc:	2120      	movs	r1, #32
 80013be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013c4:	f001 fc0c 	bl	8002be0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN_FAULT_GPIO_Port, EN_FAULT_Pin, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d2:	f001 fc05 	bl	8002be0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	2104      	movs	r1, #4
 80013da:	488d      	ldr	r0, [pc, #564]	; (8001610 <main+0x2b8>)
 80013dc:	f001 fc00 	bl	8002be0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STAND_BY_GPIO_Port, STAND_BY_Pin, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	2120      	movs	r1, #32
 80013e4:	488b      	ldr	r0, [pc, #556]	; (8001614 <main+0x2bc>)
 80013e6:	f001 fbfb 	bl	8002be0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80013ea:	4622      	mov	r2, r4
 80013ec:	2180      	movs	r1, #128	; 0x80
 80013ee:	4889      	ldr	r0, [pc, #548]	; (8001614 <main+0x2bc>)
 80013f0:	f001 fbf6 	bl	8002be0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f8:	a912      	add	r1, sp, #72	; 0x48
 80013fa:	4887      	ldr	r0, [pc, #540]	; (8001618 <main+0x2c0>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013fc:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001404:	f001 faee 	bl	80029e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|EN_FAULT_Pin;
 8001408:	f44f 6302 	mov.w	r3, #2080	; 0x820
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	a912      	add	r1, sp, #72	; 0x48
 800140e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	e9cd 3712 	strd	r3, r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = CS_Pin;
 800141a:	f04f 0804 	mov.w	r8, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141e:	f001 fae1 	bl	80029e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001424:	a912      	add	r1, sp, #72	; 0x48
 8001426:	487a      	ldr	r0, [pc, #488]	; (8001610 <main+0x2b8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	e9cd 7413 	strd	r7, r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = CS_Pin;
 800142e:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001432:	f001 fad7 	bl	80029e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STAND_BY_Pin|GPIO_PIN_7;
 8001436:	23a0      	movs	r3, #160	; 0xa0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	a912      	add	r1, sp, #72	; 0x48
 800143a:	4876      	ldr	r0, [pc, #472]	; (8001614 <main+0x2bc>)
  GPIO_InitStruct.Pin = STAND_BY_Pin|GPIO_PIN_7;
 800143c:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	e9cd 7413 	strd	r7, r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f001 face 	bl	80029e4 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001448:	2234      	movs	r2, #52	; 0x34
 800144a:	4621      	mov	r1, r4
 800144c:	a812      	add	r0, sp, #72	; 0x48
  ADC_MultiModeTypeDef multimode = {0};
 800144e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8001452:	940d      	str	r4, [sp, #52]	; 0x34
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001454:	f003 fe64 	bl	8005120 <memset>
  hadc1.Instance = ADC1;
 8001458:	4a70      	ldr	r2, [pc, #448]	; (800161c <main+0x2c4>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800145a:	606c      	str	r4, [r5, #4]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800145c:	2308      	movs	r3, #8
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800145e:	4628      	mov	r0, r5
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001460:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001464:	612f      	str	r7, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001466:	762c      	strb	r4, [r5, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001468:	766c      	strb	r4, [r5, #25]
  hadc1.Init.NbrOfConversion = 1;
 800146a:	61ef      	str	r7, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800146c:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001470:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001474:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001476:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Instance = ADC1;
 800147a:	602a      	str	r2, [r5, #0]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800147c:	616b      	str	r3, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800147e:	f000 fb7f 	bl	8001b80 <HAL_ADC_Init>
 8001482:	b108      	cbz	r0, 8001488 <main+0x130>
 8001484:	b672      	cpsid	i
 8001486:	e7fe      	b.n	8001486 <main+0x12e>
 8001488:	4603      	mov	r3, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800148a:	a90b      	add	r1, sp, #44	; 0x2c
 800148c:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800148e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001490:	f001 f98e 	bl	80027b0 <HAL_ADCEx_MultiModeConfigChannel>
 8001494:	4604      	mov	r4, r0
 8001496:	b108      	cbz	r0, 800149c <main+0x144>
 8001498:	b672      	cpsid	i
 800149a:	e7fe      	b.n	800149a <main+0x142>
  HAL_ADCEx_DisableInjectedQueue(&hadc1);
 800149c:	4628      	mov	r0, r5
 800149e:	f001 f9f7 	bl	8002890 <HAL_ADCEx_DisableInjectedQueue>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 80014a2:	4a5f      	ldr	r2, [pc, #380]	; (8001620 <main+0x2c8>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80014a4:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 80014a8:	2308      	movs	r3, #8
 80014aa:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80014ae:	2205      	movs	r2, #5
 80014b0:	237f      	movs	r3, #127	; 0x7f
  sConfigInjected.InjectedNbrOfConversion = 2;
 80014b2:	2102      	movs	r1, #2
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 80014b4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80014b8:	2204      	movs	r2, #4
 80014ba:	2300      	movs	r3, #0
 80014bc:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  sConfigInjected.InjectedNbrOfConversion = 2;
 80014c0:	9118      	str	r1, [sp, #96]	; 0x60
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80014c2:	2240      	movs	r2, #64	; 0x40
 80014c4:	2340      	movs	r3, #64	; 0x40
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80014c6:	a912      	add	r1, sp, #72	; 0x48
 80014c8:	4628      	mov	r0, r5
  sConfigInjected.AutoInjectedConv = DISABLE;
 80014ca:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
  sConfigInjected.QueueInjectedContext = DISABLE;
 80014ce:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80014d2:	f88d 4070 	strb.w	r4, [sp, #112]	; 0x70
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80014d6:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80014da:	f000 fecb 	bl	8002274 <HAL_ADCEx_InjectedConfigChannel>
 80014de:	b108      	cbz	r0, 80014e4 <main+0x18c>
 80014e0:	b672      	cpsid	i
 80014e2:	e7fe      	b.n	80014e2 <main+0x18a>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_16;
 80014e4:	4b4f      	ldr	r3, [pc, #316]	; (8001624 <main+0x2cc>)
 80014e6:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80014e8:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80014ea:	f44f 7387 	mov.w	r3, #270	; 0x10e
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80014ee:	a912      	add	r1, sp, #72	; 0x48
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80014f0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80014f2:	f000 febf 	bl	8002274 <HAL_ADCEx_InjectedConfigChannel>
 80014f6:	b108      	cbz	r0, 80014fc <main+0x1a4>
 80014f8:	b672      	cpsid	i
 80014fa:	e7fe      	b.n	80014fa <main+0x1a2>
  hspi3.Instance = SPI3;
 80014fc:	4d4a      	ldr	r5, [pc, #296]	; (8001628 <main+0x2d0>)
 80014fe:	494b      	ldr	r1, [pc, #300]	; (800162c <main+0x2d4>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001500:	60a8      	str	r0, [r5, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001502:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001506:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800150a:	e9c5 0704 	strd	r0, r7, [r5, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800150e:	e9c5 0008 	strd	r0, r0, [r5, #32]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001512:	62a8      	str	r0, [r5, #40]	; 0x28
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001514:	e9c5 000c 	strd	r0, r0, [r5, #48]	; 0x30
  hspi3.Instance = SPI3;
 8001518:	6029      	str	r1, [r5, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800151a:	606a      	str	r2, [r5, #4]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800151c:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001520:	2210      	movs	r2, #16
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001522:	60eb      	str	r3, [r5, #12]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001524:	4628      	mov	r0, r5
  hspi3.Init.CRCPolynomial = 7;
 8001526:	2307      	movs	r3, #7
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001528:	61a9      	str	r1, [r5, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800152a:	61ea      	str	r2, [r5, #28]
  hspi3.Init.CRCPolynomial = 7;
 800152c:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800152e:	f002 fb4b 	bl	8003bc8 <HAL_SPI_Init>
 8001532:	4604      	mov	r4, r0
 8001534:	b108      	cbz	r0, 800153a <main+0x1e2>
 8001536:	b672      	cpsid	i
 8001538:	e7fe      	b.n	8001538 <main+0x1e0>
  htim1.Instance = TIM1;
 800153a:	4e3d      	ldr	r6, [pc, #244]	; (8001630 <main+0x2d8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153c:	9007      	str	r0, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800153e:	4601      	mov	r1, r0
 8001540:	222c      	movs	r2, #44	; 0x2c
 8001542:	a812      	add	r0, sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001544:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001546:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800154a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 800154e:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 8001552:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001554:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001558:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155a:	e9cd 4405 	strd	r4, r4, [sp, #20]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800155e:	f003 fddf 	bl	8005120 <memset>
  htim1.Instance = TIM1;
 8001562:	4934      	ldr	r1, [pc, #208]	; (8001634 <main+0x2dc>)
  htim1.Init.Prescaler = 0;
 8001564:	6074      	str	r4, [r6, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001566:	2260      	movs	r2, #96	; 0x60
  htim1.Init.Period = 2000-1;
 8001568:	f240 73cf 	movw	r3, #1999	; 0x7cf
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800156c:	4630      	mov	r0, r6
  htim1.Init.RepetitionCounter = 1;
 800156e:	e9c6 4704 	strd	r4, r7, [r6, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001572:	61b4      	str	r4, [r6, #24]
  htim1.Instance = TIM1;
 8001574:	6031      	str	r1, [r6, #0]
  htim1.Init.Period = 2000-1;
 8001576:	e9c6 2302 	strd	r2, r3, [r6, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800157a:	f002 fc55 	bl	8003e28 <HAL_TIM_Base_Init>
 800157e:	b108      	cbz	r0, 8001584 <main+0x22c>
 8001580:	b672      	cpsid	i
 8001582:	e7fe      	b.n	8001582 <main+0x22a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001588:	a907      	add	r1, sp, #28
 800158a:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800158c:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800158e:	f003 f845 	bl	800461c <HAL_TIM_ConfigClockSource>
 8001592:	b108      	cbz	r0, 8001598 <main+0x240>
 8001594:	b672      	cpsid	i
 8001596:	e7fe      	b.n	8001596 <main+0x23e>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001598:	4630      	mov	r0, r6
 800159a:	f002 fd21 	bl	8003fe0 <HAL_TIM_PWM_Init>
 800159e:	b108      	cbz	r0, 80015a4 <main+0x24c>
 80015a0:	b672      	cpsid	i
 80015a2:	e7fe      	b.n	80015a2 <main+0x24a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015a4:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a6:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015aa:	a904      	add	r1, sp, #16
 80015ac:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015ae:	9304      	str	r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015b0:	f003 fa08 	bl	80049c4 <HAL_TIMEx_MasterConfigSynchronization>
 80015b4:	4603      	mov	r3, r0
 80015b6:	b108      	cbz	r0, 80015bc <main+0x264>
 80015b8:	b672      	cpsid	i
 80015ba:	e7fe      	b.n	80015ba <main+0x262>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80015bc:	2170      	movs	r1, #112	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015be:	461a      	mov	r2, r3
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015c0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015c4:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80015c8:	910b      	str	r1, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 1199;
 80015ca:	f240 43af 	movw	r3, #1199	; 0x4af
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ce:	4630      	mov	r0, r6
 80015d0:	a90b      	add	r1, sp, #44	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80015d2:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  sConfigOC.Pulse = 1199;
 80015d6:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015d8:	f002 fe3a 	bl	8004250 <HAL_TIM_PWM_ConfigChannel>
 80015dc:	b108      	cbz	r0, 80015e2 <main+0x28a>
 80015de:	b672      	cpsid	i
 80015e0:	e7fe      	b.n	80015e0 <main+0x288>
  sConfigOC.Pulse = 899;
 80015e2:	f240 3383 	movw	r3, #899	; 0x383
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015e6:	2204      	movs	r2, #4
 80015e8:	a90b      	add	r1, sp, #44	; 0x2c
 80015ea:	4811      	ldr	r0, [pc, #68]	; (8001630 <main+0x2d8>)
  sConfigOC.Pulse = 899;
 80015ec:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ee:	f002 fe2f 	bl	8004250 <HAL_TIM_PWM_ConfigChannel>
 80015f2:	b108      	cbz	r0, 80015f8 <main+0x2a0>
 80015f4:	b672      	cpsid	i
 80015f6:	e7fe      	b.n	80015f6 <main+0x29e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015f8:	2208      	movs	r2, #8
 80015fa:	a90b      	add	r1, sp, #44	; 0x2c
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <main+0x2d8>)
 80015fe:	f002 fe27 	bl	8004250 <HAL_TIM_PWM_ConfigChannel>
 8001602:	b1c8      	cbz	r0, 8001638 <main+0x2e0>
 8001604:	b672      	cpsid	i
 8001606:	e7fe      	b.n	8001606 <main+0x2ae>
 8001608:	40021000 	.word	0x40021000
 800160c:	200005b8 	.word	0x200005b8
 8001610:	48000c00 	.word	0x48000c00
 8001614:	48000400 	.word	0x48000400
 8001618:	48000800 	.word	0x48000800
 800161c:	50040000 	.word	0x50040000
 8001620:	19200040 	.word	0x19200040
 8001624:	43210000 	.word	0x43210000
 8001628:	2000054c 	.word	0x2000054c
 800162c:	40003c00 	.word	0x40003c00
 8001630:	20000828 	.word	0x20000828
 8001634:	40012c00 	.word	0x40012c00
  sBreakDeadTimeConfig.DeadTime = 50;
 8001638:	2132      	movs	r1, #50	; 0x32
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800163a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800163e:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001642:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001644:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001646:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800164a:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800164e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.DeadTime = 50;
 8001652:	9115      	str	r1, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001654:	483f      	ldr	r0, [pc, #252]	; (8001754 <main+0x3fc>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001656:	9217      	str	r2, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001658:	a912      	add	r1, sp, #72	; 0x48
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800165a:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800165c:	f003 fa04 	bl	8004a68 <HAL_TIMEx_ConfigBreakDeadTime>
 8001660:	4604      	mov	r4, r0
 8001662:	b108      	cbz	r0, 8001668 <main+0x310>
 8001664:	b672      	cpsid	i
 8001666:	e7fe      	b.n	8001666 <main+0x30e>
  HAL_TIM_MspPostInit(&htim1);
 8001668:	483a      	ldr	r0, [pc, #232]	; (8001754 <main+0x3fc>)
 800166a:	f000 f96d 	bl	8001948 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 800166e:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <main+0x400>)
 8001670:	4a3a      	ldr	r2, [pc, #232]	; (800175c <main+0x404>)
 8001672:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001674:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001678:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800167a:	4618      	mov	r0, r3
  huart2.Init.StopBits = UART_STOPBITS_1;
 800167c:	e9c3 4402 	strd	r4, r4, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001680:	611c      	str	r4, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001682:	e9c3 4406 	strd	r4, r4, [r3, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001686:	e9c3 4408 	strd	r4, r4, [r3, #32]
  huart2.Init.BaudRate = 115200;
 800168a:	6059      	str	r1, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800168c:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800168e:	f003 fa8f 	bl	8004bb0 <HAL_UART_Init>
 8001692:	b108      	cbz	r0, 8001698 <main+0x340>
 8001694:	b672      	cpsid	i
 8001696:	e7fe      	b.n	8001696 <main+0x33e>
  htim2.Instance = TIM2;
 8001698:	4c31      	ldr	r4, [pc, #196]	; (8001760 <main+0x408>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169a:	9012      	str	r0, [sp, #72]	; 0x48
  htim2.Instance = TIM2;
 800169c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a0:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
 80016a4:	9015      	str	r0, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a6:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
 80016aa:	900d      	str	r0, [sp, #52]	; 0x34
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ac:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ae:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b0:	61a0      	str	r0, [r4, #24]
  htim2.Init.Prescaler = 8;
 80016b2:	2208      	movs	r2, #8
  htim2.Instance = TIM2;
 80016b4:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016b6:	4620      	mov	r0, r4
  htim2.Init.Period = 10000;
 80016b8:	f242 7310 	movw	r3, #10000	; 0x2710
  htim2.Init.Prescaler = 8;
 80016bc:	6062      	str	r2, [r4, #4]
  htim2.Init.Period = 10000;
 80016be:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016c0:	f002 fbb2 	bl	8003e28 <HAL_TIM_Base_Init>
 80016c4:	b108      	cbz	r0, 80016ca <main+0x372>
 80016c6:	b672      	cpsid	i
 80016c8:	e7fe      	b.n	80016c8 <main+0x370>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ce:	a912      	add	r1, sp, #72	; 0x48
 80016d0:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d2:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016d4:	f002 ffa2 	bl	800461c <HAL_TIM_ConfigClockSource>
 80016d8:	4603      	mov	r3, r0
 80016da:	b108      	cbz	r0, 80016e0 <main+0x388>
 80016dc:	b672      	cpsid	i
 80016de:	e7fe      	b.n	80016de <main+0x386>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e0:	a90b      	add	r1, sp, #44	; 0x2c
 80016e2:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e4:	930b      	str	r3, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e6:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e8:	f003 f96c 	bl	80049c4 <HAL_TIMEx_MasterConfigSynchronization>
 80016ec:	b108      	cbz	r0, 80016f2 <main+0x39a>
 80016ee:	b672      	cpsid	i
 80016f0:	e7fe      	b.n	80016f0 <main+0x398>
  __HAL_SPI_ENABLE(&hspi3);
 80016f2:	682a      	ldr	r2, [r5, #0]
  if(HAL_OK != HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED))
 80016f4:	481b      	ldr	r0, [pc, #108]	; (8001764 <main+0x40c>)
  __HAL_SPI_ENABLE(&hspi3);
 80016f6:	6813      	ldr	r3, [r2, #0]
 80016f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016fc:	6013      	str	r3, [r2, #0]
  if(HAL_OK != HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED))
 80016fe:	217f      	movs	r1, #127	; 0x7f
 8001700:	f000 fce0 	bl	80020c4 <HAL_ADCEx_Calibration_Start>
 8001704:	b108      	cbz	r0, 800170a <main+0x3b2>
 8001706:	b672      	cpsid	i
 8001708:	e7fe      	b.n	8001708 <main+0x3b0>
  if(HAL_OK != HAL_ADCEx_InjectedStart_IT(&hadc1))
 800170a:	4816      	ldr	r0, [pc, #88]	; (8001764 <main+0x40c>)
 800170c:	f000 fd2a 	bl	8002164 <HAL_ADCEx_InjectedStart_IT>
 8001710:	b108      	cbz	r0, 8001716 <main+0x3be>
 8001712:	b672      	cpsid	i
 8001714:	e7fe      	b.n	8001714 <main+0x3bc>
  if(HAL_OK != HAL_TIM_Base_Start(&htim1))
 8001716:	480f      	ldr	r0, [pc, #60]	; (8001754 <main+0x3fc>)
 8001718:	f002 fc28 	bl	8003f6c <HAL_TIM_Base_Start>
 800171c:	b108      	cbz	r0, 8001722 <main+0x3ca>
 800171e:	b672      	cpsid	i
 8001720:	e7fe      	b.n	8001720 <main+0x3c8>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001722:	2100      	movs	r1, #0
 8001724:	480b      	ldr	r0, [pc, #44]	; (8001754 <main+0x3fc>)
 8001726:	f003 f8e1 	bl	80048ec <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800172a:	2104      	movs	r1, #4
 800172c:	4809      	ldr	r0, [pc, #36]	; (8001754 <main+0x3fc>)
 800172e:	f003 f8dd 	bl	80048ec <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001732:	2108      	movs	r1, #8
 8001734:	4807      	ldr	r0, [pc, #28]	; (8001754 <main+0x3fc>)
 8001736:	f003 f8d9 	bl	80048ec <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800173a:	2100      	movs	r1, #0
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <main+0x3fc>)
 800173e:	f002 fcf1 	bl	8004124 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001742:	2104      	movs	r1, #4
 8001744:	4803      	ldr	r0, [pc, #12]	; (8001754 <main+0x3fc>)
 8001746:	f002 fced 	bl	8004124 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800174a:	2108      	movs	r1, #8
 800174c:	4801      	ldr	r0, [pc, #4]	; (8001754 <main+0x3fc>)
 800174e:	f002 fce9 	bl	8004124 <HAL_TIM_PWM_Start>
 8001752:	e7fe      	b.n	8001752 <main+0x3fa>
 8001754:	20000828 	.word	0x20000828
 8001758:	200008cc 	.word	0x200008cc
 800175c:	40004400 	.word	0x40004400
 8001760:	20000880 	.word	0x20000880
 8001764:	200005b8 	.word	0x200005b8

08001768 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001768:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_MspInit+0x2c>)
 800176a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800176c:	f042 0201 	orr.w	r2, r2, #1
 8001770:	661a      	str	r2, [r3, #96]	; 0x60
 8001772:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001774:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	f002 0201 	and.w	r2, r2, #1
 800177a:	9200      	str	r2, [sp, #0]
 800177c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001780:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001784:	659a      	str	r2, [r3, #88]	; 0x58
 8001786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001790:	b002      	add	sp, #8
 8001792:	4770      	bx	lr
 8001794:	40021000 	.word	0x40021000

08001798 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001798:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800179a:	6802      	ldr	r2, [r0, #0]
 800179c:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <HAL_ADC_MspInit+0xb0>)
{
 800179e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80017a2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80017a8:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80017ac:	9409      	str	r4, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 80017ae:	d001      	beq.n	80017b4 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017b0:	b00a      	add	sp, #40	; 0x28
 80017b2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 80017b4:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80017b8:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017bc:	250b      	movs	r5, #11
    __HAL_RCC_ADC_CLK_ENABLE();
 80017be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c0:	4822      	ldr	r0, [pc, #136]	; (800184c <HAL_ADC_MspInit+0xb4>)
    __HAL_RCC_ADC_CLK_ENABLE();
 80017c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80017c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017ca:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80017ce:	9201      	str	r2, [sp, #4]
 80017d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017d4:	f042 0204 	orr.w	r2, r2, #4
 80017d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80017da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017dc:	f002 0204 	and.w	r2, r2, #4
 80017e0:	9202      	str	r2, [sp, #8]
 80017e2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80017ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017ee:	f002 0201 	and.w	r2, r2, #1
 80017f2:	9203      	str	r2, [sp, #12]
 80017f4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017f8:	f042 0202 	orr.w	r2, r2, #2
 80017fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80017fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001806:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001808:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800180a:	e9cd 3505 	strd	r3, r5, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001810:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001812:	f001 f8e7 	bl	80029e4 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	a905      	add	r1, sp, #20
 8001818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	e9cd 5406 	strd	r5, r4, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001820:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f001 f8df 	bl	80029e4 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001826:	a905      	add	r1, sp, #20
 8001828:	4809      	ldr	r0, [pc, #36]	; (8001850 <HAL_ADC_MspInit+0xb8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800182c:	e9cd 6505 	strd	r6, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001830:	f001 f8d8 	bl	80029e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001834:	4622      	mov	r2, r4
 8001836:	4621      	mov	r1, r4
 8001838:	2012      	movs	r0, #18
 800183a:	f001 f84f 	bl	80028dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800183e:	2012      	movs	r0, #18
 8001840:	f001 f882 	bl	8002948 <HAL_NVIC_EnableIRQ>
}
 8001844:	b00a      	add	sp, #40	; 0x28
 8001846:	bd70      	pop	{r4, r5, r6, pc}
 8001848:	50040000 	.word	0x50040000
 800184c:	48000800 	.word	0x48000800
 8001850:	48000400 	.word	0x48000400

08001854 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001854:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI3)
 8001856:	6802      	ldr	r2, [r0, #0]
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_SPI_MspInit+0x74>)
{
 800185a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	2400      	movs	r4, #0
  if(hspi->Instance==SPI3)
 800185e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8001864:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001868:	9407      	str	r4, [sp, #28]
  if(hspi->Instance==SPI3)
 800186a:	d001      	beq.n	8001870 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800186c:	b008      	add	sp, #32
 800186e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001870:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001874:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001876:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001878:	4814      	ldr	r0, [pc, #80]	; (80018cc <HAL_SPI_MspInit+0x78>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800187a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800187e:	659a      	str	r2, [r3, #88]	; 0x58
 8001880:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001882:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001886:	9201      	str	r2, [sp, #4]
 8001888:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800188a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800188c:	f042 0204 	orr.w	r2, r2, #4
 8001890:	64da      	str	r2, [r3, #76]	; 0x4c
 8001892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800189a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80018a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018a4:	2306      	movs	r3, #6
 80018a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ae:	f001 f899 	bl	80029e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80018b2:	4622      	mov	r2, r4
 80018b4:	4621      	mov	r1, r4
 80018b6:	2033      	movs	r0, #51	; 0x33
 80018b8:	f001 f810 	bl	80028dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80018bc:	2033      	movs	r0, #51	; 0x33
 80018be:	f001 f843 	bl	8002948 <HAL_NVIC_EnableIRQ>
}
 80018c2:	b008      	add	sp, #32
 80018c4:	bd70      	pop	{r4, r5, r6, pc}
 80018c6:	bf00      	nop
 80018c8:	40003c00 	.word	0x40003c00
 80018cc:	48000800 	.word	0x48000800

080018d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d0:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 80018d2:	6803      	ldr	r3, [r0, #0]
 80018d4:	4a1a      	ldr	r2, [pc, #104]	; (8001940 <HAL_TIM_Base_MspInit+0x70>)
 80018d6:	4293      	cmp	r3, r2
{
 80018d8:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 80018da:	d01b      	beq.n	8001914 <HAL_TIM_Base_MspInit+0x44>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80018dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e0:	d002      	beq.n	80018e8 <HAL_TIM_Base_MspInit+0x18>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018e2:	b003      	add	sp, #12
 80018e4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018e8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018ec:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018f0:	f042 0201 	orr.w	r2, r2, #1
 80018f4:	659a      	str	r2, [r3, #88]	; 0x58
 80018f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018f8:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001900:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001902:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001904:	f000 ffea 	bl	80028dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001908:	201c      	movs	r0, #28
}
 800190a:	b003      	add	sp, #12
 800190c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001910:	f001 b81a 	b.w	8002948 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_TIM_Base_MspInit+0x74>)
 8001916:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800191c:	661a      	str	r2, [r3, #96]	; 0x60
 800191e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001920:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001926:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001928:	4611      	mov	r1, r2
 800192a:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 800192c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800192e:	f000 ffd5 	bl	80028dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001932:	2019      	movs	r0, #25
}
 8001934:	b003      	add	sp, #12
 8001936:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800193a:	f001 b805 	b.w	8002948 <HAL_NVIC_EnableIRQ>
 800193e:	bf00      	nop
 8001940:	40012c00 	.word	0x40012c00
 8001944:	40021000 	.word	0x40021000

08001948 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001948:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800194a:	6802      	ldr	r2, [r0, #0]
 800194c:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <HAL_TIM_MspPostInit+0x78>)
{
 800194e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	2400      	movs	r4, #0
  if(htim->Instance==TIM1)
 8001952:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8001958:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800195c:	9407      	str	r4, [sp, #28]
  if(htim->Instance==TIM1)
 800195e:	d001      	beq.n	8001964 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001960:	b008      	add	sp, #32
 8001962:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001964:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2602      	movs	r6, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196c:	4815      	ldr	r0, [pc, #84]	; (80019c4 <HAL_TIM_MspPostInit+0x7c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	f042 0202 	orr.w	r2, r2, #2
 8001972:	64da      	str	r2, [r3, #76]	; 0x4c
 8001974:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001976:	f002 0202 	and.w	r2, r2, #2
 800197a:	9201      	str	r2, [sp, #4]
 800197c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001980:	f042 0201 	orr.w	r2, r2, #1
 8001984:	64da      	str	r2, [r3, #76]	; 0x4c
 8001986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800198e:	2501      	movs	r5, #1
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001990:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001994:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001998:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199e:	f001 f821 	bl	80029e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80019a2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	a903      	add	r1, sp, #12
 80019a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019ae:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80019b4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f001 f815 	bl	80029e4 <HAL_GPIO_Init>
}
 80019ba:	b008      	add	sp, #32
 80019bc:	bd70      	pop	{r4, r5, r6, pc}
 80019be:	bf00      	nop
 80019c0:	40012c00 	.word	0x40012c00
 80019c4:	48000400 	.word	0x48000400

080019c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80019ca:	6801      	ldr	r1, [r0, #0]
 80019cc:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <HAL_UART_MspInit+0x68>)
{
 80019ce:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 80019d2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80019d8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80019dc:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 80019de:	d001      	beq.n	80019e4 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019e0:	b008      	add	sp, #32
 80019e2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80019e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019e8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ec:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019f0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80019f4:	659a      	str	r2, [r3, #88]	; 0x58
 80019f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019f8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80019fc:	9201      	str	r2, [sp, #4]
 80019fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a10:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a12:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a14:	250c      	movs	r5, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a22:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f000 ffdd 	bl	80029e4 <HAL_GPIO_Init>
}
 8001a2a:	b008      	add	sp, #32
 8001a2c:	bd70      	pop	{r4, r5, r6, pc}
 8001a2e:	bf00      	nop
 8001a30:	40004400 	.word	0x40004400

08001a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a34:	e7fe      	b.n	8001a34 <NMI_Handler>
 8001a36:	bf00      	nop

08001a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a38:	e7fe      	b.n	8001a38 <HardFault_Handler>
 8001a3a:	bf00      	nop

08001a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a3c:	e7fe      	b.n	8001a3c <MemManage_Handler>
 8001a3e:	bf00      	nop

08001a40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a40:	e7fe      	b.n	8001a40 <BusFault_Handler>
 8001a42:	bf00      	nop

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	e7fe      	b.n	8001a44 <UsageFault_Handler>
 8001a46:	bf00      	nop

08001a48 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop

08001a4c <DebugMon_Handler>:
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop

08001a50 <PendSV_Handler>:
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a54:	f000 b882 	b.w	8001b5c <HAL_IncTick>

08001a58 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a58:	4801      	ldr	r0, [pc, #4]	; (8001a60 <ADC1_2_IRQHandler+0x8>)
 8001a5a:	f000 b987 	b.w	8001d6c <HAL_ADC_IRQHandler>
 8001a5e:	bf00      	nop
 8001a60:	200005b8 	.word	0x200005b8

08001a64 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a64:	4801      	ldr	r0, [pc, #4]	; (8001a6c <TIM1_UP_TIM16_IRQHandler+0x8>)
 8001a66:	f002 be89 	b.w	800477c <HAL_TIM_IRQHandler>
 8001a6a:	bf00      	nop
 8001a6c:	20000828 	.word	0x20000828

08001a70 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a70:	4801      	ldr	r0, [pc, #4]	; (8001a78 <TIM2_IRQHandler+0x8>)
 8001a72:	f002 be83 	b.w	800477c <HAL_TIM_IRQHandler>
 8001a76:	bf00      	nop
 8001a78:	20000880 	.word	0x20000880

08001a7c <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001a7c:	4801      	ldr	r0, [pc, #4]	; (8001a84 <SPI3_IRQHandler+0x8>)
 8001a7e:	f002 b927 	b.w	8003cd0 <HAL_SPI_IRQHandler>
 8001a82:	bf00      	nop
 8001a84:	2000054c 	.word	0x2000054c

08001a88 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a88:	4911      	ldr	r1, [pc, #68]	; (8001ad0 <SystemInit+0x48>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <SystemInit+0x4c>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a8c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a90:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8001a94:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a96:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 8001a9a:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a9c:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8001aa4:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001aac:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ab0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 8001ab4:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 8001ab6:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ab8:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001aba:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= 0xFFFBFFFFU;
 8001abe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ac2:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000U;
 8001ac4:	6198      	str	r0, [r3, #24]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ac6:	608c      	str	r4, [r1, #8]
#endif
}
 8001ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000ed00 	.word	0xe000ed00
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ada:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <HAL_InitTick+0x40>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	b90b      	cbnz	r3, 8001ae4 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ae0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001ae2:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ae4:	490d      	ldr	r1, [pc, #52]	; (8001b1c <HAL_InitTick+0x44>)
 8001ae6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001aea:	4605      	mov	r5, r0
 8001aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af0:	6808      	ldr	r0, [r1, #0]
 8001af2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001af6:	f000 ff35 	bl	8002964 <HAL_SYSTICK_Config>
 8001afa:	4604      	mov	r4, r0
 8001afc:	2800      	cmp	r0, #0
 8001afe:	d1ef      	bne.n	8001ae0 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b00:	2d0f      	cmp	r5, #15
 8001b02:	d8ed      	bhi.n	8001ae0 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b04:	4602      	mov	r2, r0
 8001b06:	4629      	mov	r1, r5
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f000 fee6 	bl	80028dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_InitTick+0x48>)
 8001b12:	4620      	mov	r0, r4
 8001b14:	601d      	str	r5, [r3, #0]
}
 8001b16:	bd38      	pop	{r3, r4, r5, pc}
 8001b18:	20000018 	.word	0x20000018
 8001b1c:	20000014 	.word	0x20000014
 8001b20:	2000001c 	.word	0x2000001c

08001b24 <HAL_Init>:
{
 8001b24:	b500      	push	{lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b26:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <HAL_Init+0x34>)
 8001b28:	6813      	ldr	r3, [r2, #0]
 8001b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001b2e:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b30:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b32:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b34:	f000 fec0 	bl	80028b8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f7ff ffcd 	bl	8001ad8 <HAL_InitTick>
 8001b3e:	b118      	cbz	r0, 8001b48 <HAL_Init+0x24>
    status = HAL_ERROR;
 8001b40:	2001      	movs	r0, #1
}
 8001b42:	b003      	add	sp, #12
 8001b44:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b48:	9001      	str	r0, [sp, #4]
    HAL_MspInit();
 8001b4a:	f7ff fe0d 	bl	8001768 <HAL_MspInit>
 8001b4e:	9801      	ldr	r0, [sp, #4]
}
 8001b50:	b003      	add	sp, #12
 8001b52:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b56:	bf00      	nop
 8001b58:	40022000 	.word	0x40022000

08001b5c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001b5c:	4a03      	ldr	r2, [pc, #12]	; (8001b6c <HAL_IncTick+0x10>)
 8001b5e:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <HAL_IncTick+0x14>)
 8001b60:	6811      	ldr	r1, [r2, #0]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	440b      	add	r3, r1
 8001b66:	6013      	str	r3, [r2, #0]
}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000958 	.word	0x20000958
 8001b70:	20000018 	.word	0x20000018

08001b74 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001b74:	4b01      	ldr	r3, [pc, #4]	; (8001b7c <HAL_GetTick+0x8>)
 8001b76:	6818      	ldr	r0, [r3, #0]
}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000958 	.word	0x20000958

08001b80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b80:	b570      	push	{r4, r5, r6, lr}
 8001b82:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	f000 809c 	beq.w	8001cc6 <HAL_ADC_Init+0x146>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b8e:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8001b90:	4604      	mov	r4, r0
 8001b92:	2d00      	cmp	r5, #0
 8001b94:	f000 808c 	beq.w	8001cb0 <HAL_ADC_Init+0x130>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b98:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b9a:	6893      	ldr	r3, [r2, #8]
 8001b9c:	009d      	lsls	r5, r3, #2
 8001b9e:	d505      	bpl.n	8001bac <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ba0:	6893      	ldr	r3, [r2, #8]
 8001ba2:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ba6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001baa:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bac:	6893      	ldr	r3, [r2, #8]
 8001bae:	00d8      	lsls	r0, r3, #3
 8001bb0:	d417      	bmi.n	8001be2 <HAL_ADC_Init+0x62>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001bb2:	4b64      	ldr	r3, [pc, #400]	; (8001d44 <HAL_ADC_Init+0x1c4>)
  MODIFY_REG(ADCx->CR,
 8001bb4:	6891      	ldr	r1, [r2, #8]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4863      	ldr	r0, [pc, #396]	; (8001d48 <HAL_ADC_Init+0x1c8>)
 8001bba:	099b      	lsrs	r3, r3, #6
 8001bbc:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8001bc0:	fba0 0303 	umull	r0, r3, r0, r3
 8001bc4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001bc8:	099b      	lsrs	r3, r3, #6
 8001bca:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001bce:	6091      	str	r1, [r2, #8]
 8001bd0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001bd2:	9b01      	ldr	r3, [sp, #4]
 8001bd4:	b12b      	cbz	r3, 8001be2 <HAL_ADC_Init+0x62>
    {
      wait_loop_index--;
 8001bd6:	9b01      	ldr	r3, [sp, #4]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001bdc:	9b01      	ldr	r3, [sp, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f9      	bne.n	8001bd6 <HAL_ADC_Init+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001be2:	6893      	ldr	r3, [r2, #8]
 8001be4:	00d9      	lsls	r1, r3, #3
 8001be6:	d455      	bmi.n	8001c94 <HAL_ADC_Init+0x114>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001bea:	f043 0310 	orr.w	r3, r3, #16
 8001bee:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	65a3      	str	r3, [r4, #88]	; 0x58
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bf8:	6893      	ldr	r3, [r2, #8]
 8001bfa:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 8001bfe:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c02:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c04:	d14d      	bne.n	8001ca2 <HAL_ADC_Init+0x122>
 8001c06:	06db      	lsls	r3, r3, #27
 8001c08:	d44b      	bmi.n	8001ca2 <HAL_ADC_Init+0x122>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c16:	6893      	ldr	r3, [r2, #8]
 8001c18:	07de      	lsls	r6, r3, #31
 8001c1a:	d40a      	bmi.n	8001c32 <HAL_ADC_Init+0xb2>
 8001c1c:	4d4b      	ldr	r5, [pc, #300]	; (8001d4c <HAL_ADC_Init+0x1cc>)
 8001c1e:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <HAL_ADC_Init+0x1d0>)
 8001c20:	494c      	ldr	r1, [pc, #304]	; (8001d54 <HAL_ADC_Init+0x1d4>)
 8001c22:	68ad      	ldr	r5, [r5, #8]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	6889      	ldr	r1, [r1, #8]
 8001c28:	432b      	orrs	r3, r5
 8001c2a:	07cd      	lsls	r5, r1, #31
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	d56d      	bpl.n	8001d0e <HAL_ADC_Init+0x18e>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8001c32:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8001c36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c38:	432b      	orrs	r3, r5
 8001c3a:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c3c:	7e65      	ldrb	r5, [r4, #25]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c3e:	f894 1020 	ldrb.w	r1, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8001c42:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c46:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c4c:	d103      	bne.n	8001c56 <HAL_ADC_Init+0xd6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001c50:	3901      	subs	r1, #1
 8001c52:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c56:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001c58:	b121      	cbz	r1, 8001c64 <HAL_ADC_Init+0xe4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001c5a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c5c:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c60:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c62:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c64:	68d5      	ldr	r5, [r2, #12]
 8001c66:	493c      	ldr	r1, [pc, #240]	; (8001d58 <HAL_ADC_Init+0x1d8>)
 8001c68:	4029      	ands	r1, r5
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	60d3      	str	r3, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c6e:	6893      	ldr	r3, [r2, #8]
 8001c70:	0759      	lsls	r1, r3, #29
 8001c72:	d52b      	bpl.n	8001ccc <HAL_ADC_Init+0x14c>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c74:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c76:	6923      	ldr	r3, [r4, #16]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d040      	beq.n	8001cfe <HAL_ADC_Init+0x17e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c7e:	f023 030f 	bic.w	r3, r3, #15
 8001c82:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c86:	f023 0303 	bic.w	r3, r3, #3
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001c90:	b002      	add	sp, #8
 8001c92:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c94:	6893      	ldr	r3, [r2, #8]
 8001c96:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c9a:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ca0:	d0b1      	beq.n	8001c06 <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8001ca4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca6:	f043 0310 	orr.w	r3, r3, #16
 8001caa:	6563      	str	r3, [r4, #84]	; 0x54
}
 8001cac:	b002      	add	sp, #8
 8001cae:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8001cb0:	f7ff fd72 	bl	8001798 <HAL_ADC_MspInit>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cb4:	6822      	ldr	r2, [r4, #0]
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb6:	65a5      	str	r5, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cb8:	6893      	ldr	r3, [r2, #8]
    hadc->Lock = HAL_UNLOCKED;
 8001cba:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8001cbe:	009d      	lsls	r5, r3, #2
 8001cc0:	f57f af74 	bpl.w	8001bac <HAL_ADC_Init+0x2c>
 8001cc4:	e76c      	b.n	8001ba0 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8001cc6:	2001      	movs	r0, #1
}
 8001cc8:	b002      	add	sp, #8
 8001cca:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ccc:	6893      	ldr	r3, [r2, #8]
 8001cce:	071b      	lsls	r3, r3, #28
 8001cd0:	d4d1      	bmi.n	8001c76 <HAL_ADC_Init+0xf6>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cd2:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cd4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cd8:	7e26      	ldrb	r6, [r4, #24]
      if (hadc->Init.OversamplingMode == ENABLE)
 8001cda:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cde:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ce2:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ce4:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ce8:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cec:	430b      	orrs	r3, r1
      if (hadc->Init.OversamplingMode == ENABLE)
 8001cee:	2d01      	cmp	r5, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cf0:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8001cf2:	d016      	beq.n	8001d22 <HAL_ADC_Init+0x1a2>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cf4:	6913      	ldr	r3, [r2, #16]
 8001cf6:	f023 0301 	bic.w	r3, r3, #1
 8001cfa:	6113      	str	r3, [r2, #16]
 8001cfc:	e7bb      	b.n	8001c76 <HAL_ADC_Init+0xf6>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cfe:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001d00:	69e3      	ldr	r3, [r4, #28]
 8001d02:	f021 010f 	bic.w	r1, r1, #15
 8001d06:	3b01      	subs	r3, #1
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0c:	e7ba      	b.n	8001c84 <HAL_ADC_Init+0x104>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d18f      	bne.n	8001c32 <HAL_ADC_Init+0xb2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d12:	4912      	ldr	r1, [pc, #72]	; (8001d5c <HAL_ADC_Init+0x1dc>)
 8001d14:	6865      	ldr	r5, [r4, #4]
 8001d16:	688b      	ldr	r3, [r1, #8]
 8001d18:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001d1c:	432b      	orrs	r3, r5
 8001d1e:	608b      	str	r3, [r1, #8]
 8001d20:	e787      	b.n	8001c32 <HAL_ADC_Init+0xb2>
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d22:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8001d26:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8001d28:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	6911      	ldr	r1, [r2, #16]
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	4333      	orrs	r3, r6
 8001d34:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8001d38:	432b      	orrs	r3, r5
 8001d3a:	f021 0104 	bic.w	r1, r1, #4
 8001d3e:	430b      	orrs	r3, r1
 8001d40:	6113      	str	r3, [r2, #16]
 8001d42:	e798      	b.n	8001c76 <HAL_ADC_Init+0xf6>
 8001d44:	20000014 	.word	0x20000014
 8001d48:	053e2d63 	.word	0x053e2d63
 8001d4c:	50040000 	.word	0x50040000
 8001d50:	50040100 	.word	0x50040100
 8001d54:	50040200 	.word	0x50040200
 8001d58:	fff0c007 	.word	0xfff0c007
 8001d5c:	50040300 	.word	0x50040300

08001d60 <HAL_ADC_ConvCpltCallback>:
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop

08001d64 <HAL_ADC_LevelOutOfWindowCallback>:
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop

08001d68 <HAL_ADC_ErrorCallback>:
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop

08001d6c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d6e:	6803      	ldr	r3, [r0, #0]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d70:	4a8d      	ldr	r2, [pc, #564]	; (8001fa8 <HAL_ADC_IRQHandler+0x23c>)
 8001d72:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d74:	685e      	ldr	r6, [r3, #4]
 8001d76:	6897      	ldr	r7, [r2, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001d78:	07a9      	lsls	r1, r5, #30
{
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	f007 071f 	and.w	r7, r7, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001d80:	d502      	bpl.n	8001d88 <HAL_ADC_IRQHandler+0x1c>
 8001d82:	07b2      	lsls	r2, r6, #30
 8001d84:	f100 80a4 	bmi.w	8001ed0 <HAL_ADC_IRQHandler+0x164>
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d88:	0769      	lsls	r1, r5, #29
 8001d8a:	d57d      	bpl.n	8001e88 <HAL_ADC_IRQHandler+0x11c>
 8001d8c:	0772      	lsls	r2, r6, #29
 8001d8e:	d57b      	bpl.n	8001e88 <HAL_ADC_IRQHandler+0x11c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d90:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001d92:	06d2      	lsls	r2, r2, #27
 8001d94:	d403      	bmi.n	8001d9e <HAL_ADC_IRQHandler+0x32>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d96:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d9c:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001da4:	d11c      	bne.n	8001de0 <HAL_ADC_IRQHandler+0x74>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001da6:	4a81      	ldr	r2, [pc, #516]	; (8001fac <HAL_ADC_IRQHandler+0x240>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	f000 80da 	beq.w	8001f62 <HAL_ADC_IRQHandler+0x1f6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001dae:	68da      	ldr	r2, [r3, #12]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001db0:	0490      	lsls	r0, r2, #18
 8001db2:	d415      	bmi.n	8001de0 <HAL_ADC_IRQHandler+0x74>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	0711      	lsls	r1, r2, #28
 8001db8:	d512      	bpl.n	8001de0 <HAL_ADC_IRQHandler+0x74>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	0752      	lsls	r2, r2, #29
 8001dbe:	f100 80e9 	bmi.w	8001f94 <HAL_ADC_IRQHandler+0x228>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	f022 020c 	bic.w	r2, r2, #12
 8001dc8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dd0:	6563      	str	r3, [r4, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001dd2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001dd4:	04db      	lsls	r3, r3, #19
 8001dd6:	d403      	bmi.n	8001de0 <HAL_ADC_IRQHandler+0x74>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6563      	str	r3, [r4, #84]	; 0x54
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001de0:	4620      	mov	r0, r4
 8001de2:	f7ff ffbd 	bl	8001d60 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	220c      	movs	r2, #12
 8001dea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001dec:	06a8      	lsls	r0, r5, #26
 8001dee:	d552      	bpl.n	8001e96 <HAL_ADC_IRQHandler+0x12a>
 8001df0:	06b1      	lsls	r1, r6, #26
 8001df2:	d550      	bpl.n	8001e96 <HAL_ADC_IRQHandler+0x12a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001df4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001df6:	06d1      	lsls	r1, r2, #27
 8001df8:	d403      	bmi.n	8001e02 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001dfa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e00:	6562      	str	r2, [r4, #84]	; 0x54
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e02:	486a      	ldr	r0, [pc, #424]	; (8001fac <HAL_ADC_IRQHandler+0x240>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001e04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e06:	68d9      	ldr	r1, [r3, #12]
 8001e08:	4283      	cmp	r3, r0
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001e0a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e0e:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 8001e12:	d06b      	beq.n	8001eec <HAL_ADC_IRQHandler+0x180>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e14:	68d8      	ldr	r0, [r3, #12]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8001e16:	b122      	cbz	r2, 8001e22 <HAL_ADC_IRQHandler+0xb6>
 8001e18:	0182      	lsls	r2, r0, #6
 8001e1a:	d41a      	bmi.n	8001e52 <HAL_ADC_IRQHandler+0xe6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001e1c:	b9c9      	cbnz	r1, 8001e52 <HAL_ADC_IRQHandler+0xe6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001e1e:	0481      	lsls	r1, r0, #18
 8001e20:	d417      	bmi.n	8001e52 <HAL_ADC_IRQHandler+0xe6>
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	0652      	lsls	r2, r2, #25
 8001e26:	d514      	bpl.n	8001e52 <HAL_ADC_IRQHandler+0xe6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001e28:	0281      	lsls	r1, r0, #10
 8001e2a:	d412      	bmi.n	8001e52 <HAL_ADC_IRQHandler+0xe6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	0712      	lsls	r2, r2, #28
 8001e30:	f100 80a7 	bmi.w	8001f82 <HAL_ADC_IRQHandler+0x216>
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e3a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001e3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e42:	6563      	str	r3, [r4, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001e44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e46:	05d8      	lsls	r0, r3, #23
 8001e48:	d403      	bmi.n	8001e52 <HAL_ADC_IRQHandler+0xe6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6563      	str	r3, [r4, #84]	; 0x54
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e52:	4620      	mov	r0, r4
 8001e54:	f7fe ff58 	bl	8000d08 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	2260      	movs	r2, #96	; 0x60
 8001e5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001e5e:	0629      	lsls	r1, r5, #24
 8001e60:	d501      	bpl.n	8001e66 <HAL_ADC_IRQHandler+0xfa>
 8001e62:	0632      	lsls	r2, r6, #24
 8001e64:	d466      	bmi.n	8001f34 <HAL_ADC_IRQHandler+0x1c8>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001e66:	05e8      	lsls	r0, r5, #23
 8001e68:	d501      	bpl.n	8001e6e <HAL_ADC_IRQHandler+0x102>
 8001e6a:	05f1      	lsls	r1, r6, #23
 8001e6c:	d46d      	bmi.n	8001f4a <HAL_ADC_IRQHandler+0x1de>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001e6e:	05aa      	lsls	r2, r5, #22
 8001e70:	d501      	bpl.n	8001e76 <HAL_ADC_IRQHandler+0x10a>
 8001e72:	05b0      	lsls	r0, r6, #22
 8001e74:	d452      	bmi.n	8001f1c <HAL_ADC_IRQHandler+0x1b0>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001e76:	06e9      	lsls	r1, r5, #27
 8001e78:	d501      	bpl.n	8001e7e <HAL_ADC_IRQHandler+0x112>
 8001e7a:	06f2      	lsls	r2, r6, #27
 8001e7c:	d410      	bmi.n	8001ea0 <HAL_ADC_IRQHandler+0x134>
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001e7e:	0568      	lsls	r0, r5, #21
 8001e80:	d501      	bpl.n	8001e86 <HAL_ADC_IRQHandler+0x11a>
 8001e82:	0571      	lsls	r1, r6, #21
 8001e84:	d43a      	bmi.n	8001efc <HAL_ADC_IRQHandler+0x190>
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e88:	0728      	lsls	r0, r5, #28
 8001e8a:	d5af      	bpl.n	8001dec <HAL_ADC_IRQHandler+0x80>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e8c:	0731      	lsls	r1, r6, #28
 8001e8e:	f53f af7f 	bmi.w	8001d90 <HAL_ADC_IRQHandler+0x24>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e92:	06a8      	lsls	r0, r5, #26
 8001e94:	d4ac      	bmi.n	8001df0 <HAL_ADC_IRQHandler+0x84>
 8001e96:	066a      	lsls	r2, r5, #25
 8001e98:	d5e1      	bpl.n	8001e5e <HAL_ADC_IRQHandler+0xf2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e9a:	0670      	lsls	r0, r6, #25
 8001e9c:	d5df      	bpl.n	8001e5e <HAL_ADC_IRQHandler+0xf2>
 8001e9e:	e7a9      	b.n	8001df4 <HAL_ADC_IRQHandler+0x88>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ea0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001ea2:	b132      	cbz	r2, 8001eb2 <HAL_ADC_IRQHandler+0x146>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001ea4:	2f00      	cmp	r7, #0
 8001ea6:	d068      	beq.n	8001f7a <HAL_ADC_IRQHandler+0x20e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ea8:	4a3f      	ldr	r2, [pc, #252]	; (8001fa8 <HAL_ADC_IRQHandler+0x23c>)
 8001eaa:	6892      	ldr	r2, [r2, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001eac:	f412 4f60 	tst.w	r2, #57344	; 0xe000
 8001eb0:	d00b      	beq.n	8001eca <HAL_ADC_IRQHandler+0x15e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001eb2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001eb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eb8:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001eba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f7ff ff50 	bl	8001d68 <HAL_ADC_ErrorCallback>
 8001ec8:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001eca:	2210      	movs	r2, #16
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	e7d6      	b.n	8001e7e <HAL_ADC_IRQHandler+0x112>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ed0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001ed2:	06d8      	lsls	r0, r3, #27
 8001ed4:	d403      	bmi.n	8001ede <HAL_ADC_IRQHandler+0x172>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001ed6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ed8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001edc:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001ede:	4620      	mov	r0, r4
 8001ee0:	f000 f9c6 	bl	8002270 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ee4:	6823      	ldr	r3, [r4, #0]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	e74d      	b.n	8001d88 <HAL_ADC_IRQHandler+0x1c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001eec:	2f00      	cmp	r7, #0
 8001eee:	d091      	beq.n	8001e14 <HAL_ADC_IRQHandler+0xa8>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001ef0:	1fb8      	subs	r0, r7, #6
 8001ef2:	2801      	cmp	r0, #1
 8001ef4:	d98e      	bls.n	8001e14 <HAL_ADC_IRQHandler+0xa8>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ef6:	482e      	ldr	r0, [pc, #184]	; (8001fb0 <HAL_ADC_IRQHandler+0x244>)
 8001ef8:	68c0      	ldr	r0, [r0, #12]
 8001efa:	e78c      	b.n	8001e16 <HAL_ADC_IRQHandler+0xaa>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001efc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001efe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f02:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001f04:	6da2      	ldr	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001f06:	f44f 6180 	mov.w	r1, #1024	; 0x400
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001f0a:	f042 0208 	orr.w	r2, r2, #8
 8001f0e:	65a2      	str	r2, [r4, #88]	; 0x58
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001f10:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001f12:	6019      	str	r1, [r3, #0]
}
 8001f14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001f18:	f000 b9a4 	b.w	8002264 <HAL_ADCEx_InjectedQueueOverflowCallback>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001f1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f22:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001f24:	4620      	mov	r0, r4
 8001f26:	f000 f9a1 	bl	800226c <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	e7a0      	b.n	8001e76 <HAL_ADC_IRQHandler+0x10a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f34:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3a:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f7ff ff11 	bl	8001d64 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	2280      	movs	r2, #128	; 0x80
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	e78d      	b.n	8001e66 <HAL_ADC_IRQHandler+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f50:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001f52:	4620      	mov	r0, r4
 8001f54:	f000 f988 	bl	8002268 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001f58:	6823      	ldr	r3, [r4, #0]
 8001f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	e785      	b.n	8001e6e <HAL_ADC_IRQHandler+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f62:	2f09      	cmp	r7, #9
 8001f64:	d902      	bls.n	8001f6c <HAL_ADC_IRQHandler+0x200>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f66:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <HAL_ADC_IRQHandler+0x244>)
 8001f68:	68d2      	ldr	r2, [r2, #12]
 8001f6a:	e721      	b.n	8001db0 <HAL_ADC_IRQHandler+0x44>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f6c:	f240 2221 	movw	r2, #545	; 0x221
 8001f70:	40fa      	lsrs	r2, r7
 8001f72:	07d2      	lsls	r2, r2, #31
 8001f74:	f53f af1b 	bmi.w	8001dae <HAL_ADC_IRQHandler+0x42>
 8001f78:	e7f5      	b.n	8001f66 <HAL_ADC_IRQHandler+0x1fa>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	07d7      	lsls	r7, r2, #31
 8001f7e:	d5a4      	bpl.n	8001eca <HAL_ADC_IRQHandler+0x15e>
 8001f80:	e797      	b.n	8001eb2 <HAL_ADC_IRQHandler+0x146>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f84:	f043 0310 	orr.w	r3, r3, #16
 8001f88:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	65a3      	str	r3, [r4, #88]	; 0x58
 8001f92:	e75e      	b.n	8001e52 <HAL_ADC_IRQHandler+0xe6>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f96:	f043 0310 	orr.w	r3, r3, #16
 8001f9a:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	65a3      	str	r3, [r4, #88]	; 0x58
 8001fa4:	e71c      	b.n	8001de0 <HAL_ADC_IRQHandler+0x74>
 8001fa6:	bf00      	nop
 8001fa8:	50040300 	.word	0x50040300
 8001fac:	50040100 	.word	0x50040100
 8001fb0:	50040000 	.word	0x50040000

08001fb4 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fb4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	07d2      	lsls	r2, r2, #31
 8001fba:	d40d      	bmi.n	8001fd8 <ADC_Enable+0x24>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001fbc:	6899      	ldr	r1, [r3, #8]
 8001fbe:	4a20      	ldr	r2, [pc, #128]	; (8002040 <ADC_Enable+0x8c>)
 8001fc0:	4211      	tst	r1, r2
 8001fc2:	d00b      	beq.n	8001fdc <ADC_Enable+0x28>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001fc6:	f043 0310 	orr.w	r3, r3, #16
 8001fca:	6543      	str	r3, [r0, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fcc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6583      	str	r3, [r0, #88]	; 0x58

      return HAL_ERROR;
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	4770      	bx	lr
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fd8:	2000      	movs	r0, #0
}
 8001fda:	4770      	bx	lr
{
 8001fdc:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(ADCx->CR,
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	4e18      	ldr	r6, [pc, #96]	; (8002044 <ADC_Enable+0x90>)
 8001fe2:	4032      	ands	r2, r6
 8001fe4:	f042 0201 	orr.w	r2, r2, #1
 8001fe8:	609a      	str	r2, [r3, #8]
 8001fea:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8001fec:	f7ff fdc2 	bl	8001b74 <HAL_GetTick>
 8001ff0:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ff2:	6823      	ldr	r3, [r4, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	07d2      	lsls	r2, r2, #31
 8001ff8:	d41f      	bmi.n	800203a <ADC_Enable+0x86>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	07d1      	lsls	r1, r2, #31
 8001ffe:	d413      	bmi.n	8002028 <ADC_Enable+0x74>
  MODIFY_REG(ADCx->CR,
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	4032      	ands	r2, r6
 8002004:	f042 0201 	orr.w	r2, r2, #1
 8002008:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800200a:	f7ff fdb3 	bl	8001b74 <HAL_GetTick>
 800200e:	1b40      	subs	r0, r0, r5
 8002010:	2802      	cmp	r0, #2
 8002012:	d9ee      	bls.n	8001ff2 <ADC_Enable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002014:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002016:	f043 0310 	orr.w	r3, r3, #16
 800201a:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800201c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8002024:	2001      	movs	r0, #1
}
 8002026:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002028:	f7ff fda4 	bl	8001b74 <HAL_GetTick>
 800202c:	1b40      	subs	r0, r0, r5
 800202e:	2802      	cmp	r0, #2
 8002030:	d8f0      	bhi.n	8002014 <ADC_Enable+0x60>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	07d2      	lsls	r2, r2, #31
 8002038:	d5df      	bpl.n	8001ffa <ADC_Enable+0x46>
  return HAL_OK;
 800203a:	2000      	movs	r0, #0
}
 800203c:	bd70      	pop	{r4, r5, r6, pc}
 800203e:	bf00      	nop
 8002040:	8000003f 	.word	0x8000003f
 8002044:	7fffffc0 	.word	0x7fffffc0

08002048 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002048:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800204a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	0791      	lsls	r1, r2, #30
 8002050:	d502      	bpl.n	8002058 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002052:	689b      	ldr	r3, [r3, #8]
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002054:	2000      	movs	r0, #0
}
 8002056:	bd38      	pop	{r3, r4, r5, pc}
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	07d2      	lsls	r2, r2, #31
 800205c:	d526      	bpl.n	80020ac <ADC_Disable+0x64>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	f002 020d 	and.w	r2, r2, #13
 8002064:	2a01      	cmp	r2, #1
 8002066:	d009      	beq.n	800207c <ADC_Disable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002068:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800206a:	f043 0310 	orr.w	r3, r3, #16
 800206e:	6543      	str	r3, [r0, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002070:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8002078:	2001      	movs	r0, #1
}
 800207a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002082:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002086:	f042 0202 	orr.w	r2, r2, #2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800208a:	2103      	movs	r1, #3
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	6019      	str	r1, [r3, #0]
 8002090:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8002092:	f7ff fd6f 	bl	8001b74 <HAL_GetTick>
 8002096:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002098:	e004      	b.n	80020a4 <ADC_Disable+0x5c>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800209a:	f7ff fd6b 	bl	8001b74 <HAL_GetTick>
 800209e:	1b40      	subs	r0, r0, r5
 80020a0:	2802      	cmp	r0, #2
 80020a2:	d805      	bhi.n	80020b0 <ADC_Disable+0x68>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	07db      	lsls	r3, r3, #31
 80020aa:	d4f6      	bmi.n	800209a <ADC_Disable+0x52>
  return HAL_OK;
 80020ac:	2000      	movs	r0, #0
}
 80020ae:	bd38      	pop	{r3, r4, r5, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80020b2:	f043 0310 	orr.w	r3, r3, #16
 80020b6:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 80020c0:	2001      	movs	r0, #1
}
 80020c2:	bd38      	pop	{r3, r4, r5, pc}

080020c4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80020c4:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020c6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80020ca:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80020cc:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80020ce:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 80020d0:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80020d2:	d035      	beq.n	8002140 <HAL_ADCEx_Calibration_Start+0x7c>
 80020d4:	2301      	movs	r3, #1
 80020d6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 80020da:	4604      	mov	r4, r0
 80020dc:	460d      	mov	r5, r1

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80020de:	f7ff ffb3 	bl	8002048 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (tmp_hal_status == HAL_OK)
 80020e4:	bb20      	cbnz	r0, 8002130 <HAL_ADCEx_Calibration_Start+0x6c>
    ADC_STATE_CLR_SET(hadc->State,
 80020e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020ea:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80020ee:	6822      	ldr	r2, [r4, #0]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80020f0:	491b      	ldr	r1, [pc, #108]	; (8002160 <HAL_ADCEx_Calibration_Start+0x9c>)
    ADC_STATE_CLR_SET(hadc->State,
 80020f2:	f043 0302 	orr.w	r3, r3, #2
 80020f6:	6563      	str	r3, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 80020f8:	6893      	ldr	r3, [r2, #8]
 80020fa:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 80020fe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002102:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8002106:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800210a:	431d      	orrs	r5, r3
 800210c:	6095      	str	r5, [r2, #8]
 800210e:	e005      	b.n	800211c <HAL_ADCEx_Calibration_Start+0x58>
      wait_loop_index++;
 8002110:	9b01      	ldr	r3, [sp, #4]
 8002112:	3301      	adds	r3, #1
 8002114:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002116:	9b01      	ldr	r3, [sp, #4]
 8002118:	428b      	cmp	r3, r1
 800211a:	d814      	bhi.n	8002146 <HAL_ADCEx_Calibration_Start+0x82>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800211c:	6893      	ldr	r3, [r2, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	dbf6      	blt.n	8002110 <HAL_ADCEx_Calibration_Start+0x4c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002122:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002124:	f023 0303 	bic.w	r3, r3, #3
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6563      	str	r3, [r4, #84]	; 0x54
 800212e:	e002      	b.n	8002136 <HAL_ADCEx_Calibration_Start+0x72>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002130:	f043 0310 	orr.w	r3, r3, #16
 8002134:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002136:	2300      	movs	r3, #0
 8002138:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800213c:	b003      	add	sp, #12
 800213e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 8002140:	2002      	movs	r0, #2
}
 8002142:	b003      	add	sp, #12
 8002144:	bd30      	pop	{r4, r5, pc}
        ADC_STATE_CLR_SET(hadc->State,
 8002146:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002148:	f023 0312 	bic.w	r3, r3, #18
 800214c:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hadc);
 8002150:	2200      	movs	r2, #0
        return HAL_ERROR;
 8002152:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8002154:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8002156:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 800215a:	b003      	add	sp, #12
 800215c:	bd30      	pop	{r4, r5, pc}
 800215e:	bf00      	nop
 8002160:	000487ff 	.word	0x000487ff

08002164 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8002164:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002166:	4a3d      	ldr	r2, [pc, #244]	; (800225c <HAL_ADCEx_InjectedStart_IT+0xf8>)
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002168:	6803      	ldr	r3, [r0, #0]
 800216a:	6895      	ldr	r5, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	0712      	lsls	r2, r2, #28
 8002170:	d458      	bmi.n	8002224 <HAL_ADCEx_InjectedStart_IT+0xc0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8002172:	68da      	ldr	r2, [r3, #12]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8002174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002176:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 800217a:	d107      	bne.n	800218c <HAL_ADCEx_InjectedStart_IT+0x28>
        && (tmp_config_injected_queue == 0UL)
 800217c:	2a00      	cmp	r2, #0
 800217e:	db05      	blt.n	800218c <HAL_ADCEx_InjectedStart_IT+0x28>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002180:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002182:	f043 0320 	orr.w	r3, r3, #32
 8002186:	6543      	str	r3, [r0, #84]	; 0x54
      return HAL_ERROR;
 8002188:	2001      	movs	r0, #1
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 800218a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 800218c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002190:	2b01      	cmp	r3, #1
 8002192:	d047      	beq.n	8002224 <HAL_ADCEx_InjectedStart_IT+0xc0>
 8002194:	2301      	movs	r3, #1
 8002196:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800219a:	4604      	mov	r4, r0
    tmp_hal_status = ADC_Enable(hadc);
 800219c:	f7ff ff0a 	bl	8001fb4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80021a0:	2800      	cmp	r0, #0
 80021a2:	d141      	bne.n	8002228 <HAL_ADCEx_InjectedStart_IT+0xc4>
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80021a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021a6:	492e      	ldr	r1, [pc, #184]	; (8002260 <HAL_ADCEx_InjectedStart_IT+0xfc>)
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80021a8:	05db      	lsls	r3, r3, #23
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80021aa:	bf49      	itett	mi
 80021ac:	6da3      	ldrmi	r3, [r4, #88]	; 0x58
        ADC_CLEAR_ERRORCODE(hadc);
 80021ae:	65a0      	strpl	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80021b0:	f023 0308 	bicmi.w	r3, r3, #8
 80021b4:	65a3      	strmi	r3, [r4, #88]	; 0x58
      ADC_STATE_CLR_SET(hadc->State,
 80021b6:	6d62      	ldr	r2, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021b8:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80021ba:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021c6:	428b      	cmp	r3, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021c8:	f005 051f 	and.w	r5, r5, #31
      ADC_STATE_CLR_SET(hadc->State,
 80021cc:	6562      	str	r2, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021ce:	d02f      	beq.n	8002230 <HAL_ADCEx_InjectedStart_IT+0xcc>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021d0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80021d2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80021d6:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80021d8:	2260      	movs	r2, #96	; 0x60
 80021da:	601a      	str	r2, [r3, #0]
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80021dc:	68da      	ldr	r2, [r3, #12]
      __HAL_UNLOCK(hadc);
 80021de:	2100      	movs	r1, #0
 80021e0:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80021e4:	0291      	lsls	r1, r2, #10
 80021e6:	d503      	bpl.n	80021f0 <HAL_ADCEx_InjectedStart_IT+0x8c>
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021ee:	605a      	str	r2, [r3, #4]
      switch (hadc->Init.EOCSelection)
 80021f0:	6962      	ldr	r2, [r4, #20]
 80021f2:	2a08      	cmp	r2, #8
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021f4:	685a      	ldr	r2, [r3, #4]
      switch (hadc->Init.EOCSelection)
 80021f6:	d128      	bne.n	800224a <HAL_ADCEx_InjectedStart_IT+0xe6>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021f8:	f022 0220 	bic.w	r2, r2, #32
 80021fc:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002204:	605a      	str	r2, [r3, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002206:	4a16      	ldr	r2, [pc, #88]	; (8002260 <HAL_ADCEx_InjectedStart_IT+0xfc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d014      	beq.n	8002236 <HAL_ADCEx_InjectedStart_IT+0xd2>
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 800220c:	68da      	ldr	r2, [r3, #12]
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800220e:	0192      	lsls	r2, r2, #6
 8002210:	d4bb      	bmi.n	800218a <HAL_ADCEx_InjectedStart_IT+0x26>
  MODIFY_REG(ADCx->CR,
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002218:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800221c:	f042 0208 	orr.w	r2, r2, #8
 8002220:	609a      	str	r2, [r3, #8]
}
 8002222:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8002224:	2002      	movs	r0, #2
}
 8002226:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 8002228:	2300      	movs	r3, #0
 800222a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800222e:	bd38      	pop	{r3, r4, r5, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002230:	2d00      	cmp	r5, #0
 8002232:	d0cd      	beq.n	80021d0 <HAL_ADCEx_InjectedStart_IT+0x6c>
 8002234:	e7d0      	b.n	80021d8 <HAL_ADCEx_InjectedStart_IT+0x74>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002236:	2d00      	cmp	r5, #0
 8002238:	d0e8      	beq.n	800220c <HAL_ADCEx_InjectedStart_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800223a:	3d06      	subs	r5, #6
 800223c:	2d01      	cmp	r5, #1
 800223e:	d9e5      	bls.n	800220c <HAL_ADCEx_InjectedStart_IT+0xa8>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002240:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002246:	6563      	str	r3, [r4, #84]	; 0x54
}
 8002248:	bd38      	pop	{r3, r4, r5, pc}
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800224a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800224e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	f042 0220 	orr.w	r2, r2, #32
 8002256:	605a      	str	r2, [r3, #4]
          break;
 8002258:	e7d5      	b.n	8002206 <HAL_ADCEx_InjectedStart_IT+0xa2>
 800225a:	bf00      	nop
 800225c:	50040300 	.word	0x50040300
 8002260:	50040100 	.word	0x50040100

08002264 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop

08002268 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop

0800226c <HAL_ADCEx_LevelOutOfWindow3Callback>:
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop

08002270 <HAL_ADCEx_EndOfSamplingCallback>:
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop

08002274 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8002274:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002276:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800227a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800227c:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800227e:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8002280:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002282:	f000 8122 	beq.w	80024ca <HAL_ADCEx_InjectedConfigChannel+0x256>
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002286:	6903      	ldr	r3, [r0, #16]
  __HAL_LOCK(hadc);
 8002288:	2201      	movs	r2, #1
 800228a:	4604      	mov	r4, r0
 800228c:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002290:	2b00      	cmp	r3, #0
 8002292:	d06d      	beq.n	8002370 <HAL_ADCEx_InjectedConfigChannel+0xfc>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8002294:	698b      	ldr	r3, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002296:	4293      	cmp	r3, r2
 8002298:	d06a      	beq.n	8002370 <HAL_ADCEx_InjectedConfigChannel+0xfc>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800229a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800229c:	2800      	cmp	r0, #0
 800229e:	f040 80d9 	bne.w	8002454 <HAL_ADCEx_InjectedConfigChannel+0x1e0>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80022a2:	6a08      	ldr	r0, [r1, #32]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	2800      	cmp	r0, #0
 80022a8:	f000 820e 	beq.w	80026c8 <HAL_ADCEx_InjectedConfigChannel+0x454>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80022ac:	f000 003c 	and.w	r0, r0, #60	; 0x3c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80022b0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80022b2:	4318      	orrs	r0, r3
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80022b4:	4310      	orrs	r0, r2
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80022b6:	e9d1 2500 	ldrd	r2, r5, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80022ba:	6623      	str	r3, [r4, #96]	; 0x60
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80022bc:	f005 051f 	and.w	r5, r5, #31
 80022c0:	f3c2 6384 	ubfx	r3, r2, #26, #5
 80022c4:	40ab      	lsls	r3, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80022c6:	4318      	orrs	r0, r3
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	65e0      	str	r0, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022cc:	6898      	ldr	r0, [r3, #8]
 80022ce:	0707      	lsls	r7, r0, #28
 80022d0:	d40d      	bmi.n	80022ee <HAL_ADCEx_InjectedConfigChannel+0x7a>
 80022d2:	7f88      	ldrb	r0, [r1, #30]
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80022d4:	7f4d      	ldrb	r5, [r1, #29]
 80022d6:	0540      	lsls	r0, r0, #21
 80022d8:	2d00      	cmp	r5, #0
 80022da:	f040 80b0 	bne.w	800243e <HAL_ADCEx_InjectedConfigChannel+0x1ca>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80022de:	68dd      	ldr	r5, [r3, #12]
 80022e0:	7f0e      	ldrb	r6, [r1, #28]
 80022e2:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 80022e6:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 80022ea:	4328      	orrs	r0, r5
 80022ec:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022ee:	6898      	ldr	r0, [r3, #8]
 80022f0:	f010 0004 	ands.w	r0, r0, #4
 80022f4:	d055      	beq.n	80023a2 <HAL_ADCEx_InjectedConfigChannel+0x12e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022f6:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f8:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022fa:	689d      	ldr	r5, [r3, #8]
 80022fc:	07ee      	lsls	r6, r5, #31
 80022fe:	d414      	bmi.n	800232a <HAL_ADCEx_InjectedConfigChannel+0xb6>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8002300:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8002302:	4db5      	ldr	r5, [pc, #724]	; (80025d8 <HAL_ADCEx_InjectedConfigChannel+0x364>)
 8002304:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002308:	f8df e2f8 	ldr.w	lr, [pc, #760]	; 8002604 <HAL_ADCEx_InjectedConfigChannel+0x390>
 800230c:	f007 0c18 	and.w	ip, r7, #24
 8002310:	fa25 f50c 	lsr.w	r5, r5, ip
 8002314:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 8002318:	4015      	ands	r5, r2
 800231a:	ea26 060c 	bic.w	r6, r6, ip
 800231e:	4335      	orrs	r5, r6
 8002320:	4577      	cmp	r7, lr
 8002322:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
 8002326:	f000 80d3 	beq.w	80024d0 <HAL_ADCEx_InjectedConfigChannel+0x25c>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 800232a:	49ac      	ldr	r1, [pc, #688]	; (80025dc <HAL_ADCEx_InjectedConfigChannel+0x368>)
 800232c:	420a      	tst	r2, r1
 800232e:	d01a      	beq.n	8002366 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002330:	4dab      	ldr	r5, [pc, #684]	; (80025e0 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR)
 8002332:	4eac      	ldr	r6, [pc, #688]	; (80025e4 <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8002334:	68a9      	ldr	r1, [r5, #8]
 8002336:	42b2      	cmp	r2, r6
 8002338:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 800233c:	f000 8123 	beq.w	8002586 <HAL_ADCEx_InjectedConfigChannel+0x312>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8002340:	4ea9      	ldr	r6, [pc, #676]	; (80025e8 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 8002342:	42b2      	cmp	r2, r6
 8002344:	f000 80a0 	beq.w	8002488 <HAL_ADCEx_InjectedConfigChannel+0x214>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8002348:	4ea8      	ldr	r6, [pc, #672]	; (80025ec <HAL_ADCEx_InjectedConfigChannel+0x378>)
 800234a:	42b2      	cmp	r2, r6
 800234c:	d10b      	bne.n	8002366 <HAL_ADCEx_InjectedConfigChannel+0xf2>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800234e:	024a      	lsls	r2, r1, #9
 8002350:	d409      	bmi.n	8002366 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8002352:	4aa7      	ldr	r2, [pc, #668]	; (80025f0 <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d106      	bne.n	8002366 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002358:	68ab      	ldr	r3, [r5, #8]
 800235a:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800235e:	433b      	orrs	r3, r7
 8002360:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002364:	60ab      	str	r3, [r5, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002366:	2300      	movs	r3, #0
 8002368:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800236c:	b003      	add	sp, #12
 800236e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002370:	e9d1 2000 	ldrd	r2, r0, [r1]
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002374:	2808      	cmp	r0, #8
 8002376:	6823      	ldr	r3, [r4, #0]
 8002378:	d1a8      	bne.n	80022cc <HAL_ADCEx_InjectedConfigChannel+0x58>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800237a:	6a08      	ldr	r0, [r1, #32]
 800237c:	0c95      	lsrs	r5, r2, #18
 800237e:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
 8002382:	b120      	cbz	r0, 800238e <HAL_ADCEx_InjectedConfigChannel+0x11a>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002384:	6a4e      	ldr	r6, [r1, #36]	; 0x24
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002386:	f000 003c 	and.w	r0, r0, #60	; 0x3c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800238a:	4330      	orrs	r0, r6
 800238c:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 800238e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002390:	4e98      	ldr	r6, [pc, #608]	; (80025f4 <HAL_ADCEx_InjectedConfigChannel+0x380>)
 8002392:	4030      	ands	r0, r6
 8002394:	4328      	orrs	r0, r5
 8002396:	64d8      	str	r0, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002398:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800239a:	65e5      	str	r5, [r4, #92]	; 0x5c
 800239c:	0707      	lsls	r7, r0, #28
 800239e:	d4a6      	bmi.n	80022ee <HAL_ADCEx_InjectedConfigChannel+0x7a>
 80023a0:	e797      	b.n	80022d2 <HAL_ADCEx_InjectedConfigChannel+0x5e>
 80023a2:	689d      	ldr	r5, [r3, #8]
 80023a4:	f015 0508 	ands.w	r5, r5, #8
 80023a8:	d1a7      	bne.n	80022fa <HAL_ADCEx_InjectedConfigChannel+0x86>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80023aa:	6a0e      	ldr	r6, [r1, #32]
 80023ac:	7f48      	ldrb	r0, [r1, #29]
 80023ae:	2e00      	cmp	r6, #0
 80023b0:	d17e      	bne.n	80024b0 <HAL_ADCEx_InjectedConfigChannel+0x23c>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80023b2:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80023b4:	68d8      	ldr	r0, [r3, #12]
 80023b6:	bf0c      	ite	eq
 80023b8:	f040 7000 	orreq.w	r0, r0, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80023bc:	f020 7000 	bicne.w	r0, r0, #33554432	; 0x2000000
 80023c0:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c2:	2000      	movs	r0, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80023c4:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
 80023c8:	2d01      	cmp	r5, #1
 80023ca:	f000 8172 	beq.w	80026b2 <HAL_ADCEx_InjectedConfigChannel+0x43e>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80023ce:	691d      	ldr	r5, [r3, #16]
 80023d0:	f025 0502 	bic.w	r5, r5, #2
 80023d4:	611d      	str	r5, [r3, #16]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80023d6:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 80023da:	f00c 0c04 	and.w	ip, ip, #4
 80023de:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 80023e2:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80023e6:	f85c 5006 	ldr.w	r5, [ip, r6]
 80023ea:	688f      	ldr	r7, [r1, #8]
 80023ec:	f04f 0e07 	mov.w	lr, #7
 80023f0:	fa0e fe02 	lsl.w	lr, lr, r2
 80023f4:	ea25 050e 	bic.w	r5, r5, lr
 80023f8:	fa07 f202 	lsl.w	r2, r7, r2
 80023fc:	432a      	orrs	r2, r5
 80023fe:	f84c 2006 	str.w	r2, [ip, r6]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8002402:	f8d1 c010 	ldr.w	ip, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8002406:	68de      	ldr	r6, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8002408:	f1bc 0f04 	cmp.w	ip, #4
 800240c:	f103 0560 	add.w	r5, r3, #96	; 0x60
 8002410:	f000 80fa 	beq.w	8002608 <HAL_ADCEx_InjectedConfigChannel+0x394>
  MODIFY_REG(*preg,
 8002414:	680f      	ldr	r7, [r1, #0]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8002416:	694a      	ldr	r2, [r1, #20]
 8002418:	f855 e02c 	ldr.w	lr, [r5, ip, lsl #2]
 800241c:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8002420:	0076      	lsls	r6, r6, #1
 8002422:	40b2      	lsls	r2, r6
 8002424:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 8002428:	4e73      	ldr	r6, [pc, #460]	; (80025f8 <HAL_ADCEx_InjectedConfigChannel+0x384>)
 800242a:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 800242e:	433a      	orrs	r2, r7
 8002430:	ea0e 0606 	and.w	r6, lr, r6
 8002434:	4332      	orrs	r2, r6
 8002436:	f845 202c 	str.w	r2, [r5, ip, lsl #2]
 800243a:	680a      	ldr	r2, [r1, #0]
 800243c:	e75d      	b.n	80022fa <HAL_ADCEx_InjectedConfigChannel+0x86>
      MODIFY_REG(hadc->Instance->CFGR,
 800243e:	68dd      	ldr	r5, [r3, #12]
 8002440:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8002444:	4328      	orrs	r0, r5
 8002446:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002448:	6898      	ldr	r0, [r3, #8]
 800244a:	f010 0004 	ands.w	r0, r0, #4
 800244e:	f47f af52 	bne.w	80022f6 <HAL_ADCEx_InjectedConfigChannel+0x82>
 8002452:	e7a6      	b.n	80023a2 <HAL_ADCEx_InjectedConfigChannel+0x12e>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8002454:	e9d1 2600 	ldrd	r2, r6, [r1]
 8002458:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800245a:	f3c2 6584 	ubfx	r5, r2, #26, #5
 800245e:	f006 061f 	and.w	r6, r6, #31
 8002462:	40b5      	lsls	r5, r6
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8002464:	431d      	orrs	r5, r3
 8002466:	3801      	subs	r0, #1
 8002468:	e9c4 5017 	strd	r5, r0, [r4, #92]	; 0x5c
 800246c:	6823      	ldr	r3, [r4, #0]
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800246e:	2800      	cmp	r0, #0
 8002470:	f47f af2c 	bne.w	80022cc <HAL_ADCEx_InjectedConfigChannel+0x58>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8002474:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002476:	4e5f      	ldr	r6, [pc, #380]	; (80025f4 <HAL_ADCEx_InjectedConfigChannel+0x380>)
 8002478:	4030      	ands	r0, r6
 800247a:	4305      	orrs	r5, r0
 800247c:	64dd      	str	r5, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800247e:	6898      	ldr	r0, [r3, #8]
 8002480:	0707      	lsls	r7, r0, #28
 8002482:	f53f af34 	bmi.w	80022ee <HAL_ADCEx_InjectedConfigChannel+0x7a>
 8002486:	e724      	b.n	80022d2 <HAL_ADCEx_InjectedConfigChannel+0x5e>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002488:	01c9      	lsls	r1, r1, #7
 800248a:	f53f af6c 	bmi.w	8002366 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800248e:	4a58      	ldr	r2, [pc, #352]	; (80025f0 <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d004      	beq.n	800249e <HAL_ADCEx_InjectedConfigChannel+0x22a>
 8002494:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002498:	4293      	cmp	r3, r2
 800249a:	f47f af64 	bne.w	8002366 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800249e:	4a50      	ldr	r2, [pc, #320]	; (80025e0 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 80024a0:	6893      	ldr	r3, [r2, #8]
 80024a2:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80024a6:	431f      	orrs	r7, r3
 80024a8:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 80024ac:	6097      	str	r7, [r2, #8]
 80024ae:	e75a      	b.n	8002366 <HAL_ADCEx_InjectedConfigChannel+0xf2>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80024b0:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80024b2:	2e00      	cmp	r6, #0
 80024b4:	f43f af7d 	beq.w	80023b2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80024b8:	2801      	cmp	r0, #1
 80024ba:	f000 8134 	beq.w	8002726 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80024be:	68de      	ldr	r6, [r3, #12]
 80024c0:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c4:	4628      	mov	r0, r5
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80024c6:	60de      	str	r6, [r3, #12]
 80024c8:	e77c      	b.n	80023c4 <HAL_ADCEx_InjectedConfigChannel+0x150>
  __HAL_LOCK(hadc);
 80024ca:	2002      	movs	r0, #2
}
 80024cc:	b003      	add	sp, #12
 80024ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80024d0:	f1bc 0f00 	cmp.w	ip, #0
 80024d4:	d12b      	bne.n	800252e <HAL_ADCEx_InjectedConfigChannel+0x2ba>
 80024d6:	0e92      	lsrs	r2, r2, #26
 80024d8:	3201      	adds	r2, #1
 80024da:	f002 061f 	and.w	r6, r2, #31
 80024de:	2501      	movs	r5, #1
 80024e0:	0692      	lsls	r2, r2, #26
 80024e2:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80024e6:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e8:	2e09      	cmp	r6, #9
 80024ea:	ea45 0502 	orr.w	r5, r5, r2
 80024ee:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80024f2:	d946      	bls.n	8002582 <HAL_ADCEx_InjectedConfigChannel+0x30e>
 80024f4:	3a1e      	subs	r2, #30
 80024f6:	0512      	lsls	r2, r2, #20
 80024f8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80024fc:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80024fe:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 8002502:	f00c 0c04 	and.w	ip, ip, #4
 8002506:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 800250a:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800250e:	f85c 5007 	ldr.w	r5, [ip, r7]
 8002512:	688e      	ldr	r6, [r1, #8]
 8002514:	f04f 0e07 	mov.w	lr, #7
 8002518:	fa0e fe02 	lsl.w	lr, lr, r2
 800251c:	ea25 050e 	bic.w	r5, r5, lr
 8002520:	fa06 f202 	lsl.w	r2, r6, r2
 8002524:	432a      	orrs	r2, r5
 8002526:	f84c 2007 	str.w	r2, [ip, r7]
 800252a:	680a      	ldr	r2, [r1, #0]
 800252c:	e6fd      	b.n	800232a <HAL_ADCEx_InjectedConfigChannel+0xb6>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	fa92 f5a2 	rbit	r5, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002532:	2d00      	cmp	r5, #0
 8002534:	f040 80ca 	bne.w	80026cc <HAL_ADCEx_InjectedConfigChannel+0x458>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800253c:	2d00      	cmp	r5, #0
 800253e:	f000 8120 	beq.w	8002782 <HAL_ADCEx_InjectedConfigChannel+0x50e>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002542:	fab5 f585 	clz	r5, r5
 8002546:	3501      	adds	r5, #1
 8002548:	06ad      	lsls	r5, r5, #26
 800254a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8002552:	2e00      	cmp	r6, #0
 8002554:	f000 8113 	beq.w	800277e <HAL_ADCEx_InjectedConfigChannel+0x50a>
  return __builtin_clz(value);
 8002558:	fab6 f686 	clz	r6, r6
 800255c:	3601      	adds	r6, #1
 800255e:	f006 061f 	and.w	r6, r6, #31
 8002562:	2701      	movs	r7, #1
 8002564:	fa07 f606 	lsl.w	r6, r7, r6
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8002568:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800256e:	2a00      	cmp	r2, #0
 8002570:	f000 8102 	beq.w	8002778 <HAL_ADCEx_InjectedConfigChannel+0x504>
  return __builtin_clz(value);
 8002574:	fab2 f282 	clz	r2, r2
 8002578:	3201      	adds	r2, #1
 800257a:	f002 021f 	and.w	r2, r2, #31
 800257e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002582:	0512      	lsls	r2, r2, #20
 8002584:	e7ba      	b.n	80024fc <HAL_ADCEx_InjectedConfigChannel+0x288>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002586:	020d      	lsls	r5, r1, #8
 8002588:	f53f aeed 	bmi.w	8002366 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800258c:	4a18      	ldr	r2, [pc, #96]	; (80025f0 <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d004      	beq.n	800259c <HAL_ADCEx_InjectedConfigChannel+0x328>
 8002592:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002596:	4293      	cmp	r3, r2
 8002598:	f47f aee5 	bne.w	8002366 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800259c:	4a10      	ldr	r2, [pc, #64]	; (80025e0 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800259e:	4917      	ldr	r1, [pc, #92]	; (80025fc <HAL_ADCEx_InjectedConfigChannel+0x388>)
 80025a0:	6893      	ldr	r3, [r2, #8]
 80025a2:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80025a6:	431f      	orrs	r7, r3
 80025a8:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
 80025ac:	6097      	str	r7, [r2, #8]
 80025ae:	680b      	ldr	r3, [r1, #0]
 80025b0:	4a13      	ldr	r2, [pc, #76]	; (8002600 <HAL_ADCEx_InjectedConfigChannel+0x38c>)
 80025b2:	099b      	lsrs	r3, r3, #6
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80025c2:	9b01      	ldr	r3, [sp, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f43f aece 	beq.w	8002366 <HAL_ADCEx_InjectedConfigChannel+0xf2>
          wait_loop_index--;
 80025ca:	9b01      	ldr	r3, [sp, #4]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80025d0:	9b01      	ldr	r3, [sp, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f9      	bne.n	80025ca <HAL_ADCEx_InjectedConfigChannel+0x356>
 80025d6:	e6c6      	b.n	8002366 <HAL_ADCEx_InjectedConfigChannel+0xf2>
 80025d8:	0007ffff 	.word	0x0007ffff
 80025dc:	80080000 	.word	0x80080000
 80025e0:	50040300 	.word	0x50040300
 80025e4:	c7520000 	.word	0xc7520000
 80025e8:	cb840000 	.word	0xcb840000
 80025ec:	80000001 	.word	0x80000001
 80025f0:	50040000 	.word	0x50040000
 80025f4:	82082000 	.word	0x82082000
 80025f8:	03fff000 	.word	0x03fff000
 80025fc:	20000014 	.word	0x20000014
 8002600:	053e2d63 	.word	0x053e2d63
 8002604:	407f0000 	.word	0x407f0000
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002608:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800260a:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 800260c:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 800260e:	f3c2 0c12 	ubfx	ip, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002612:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002616:	f1bc 0f00 	cmp.w	ip, #0
 800261a:	f000 8081 	beq.w	8002720 <HAL_ADCEx_InjectedConfigChannel+0x4ac>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 8002622:	b157      	cbz	r7, 800263a <HAL_ADCEx_InjectedConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002624:	fab7 f787 	clz	r7, r7
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002628:	42be      	cmp	r6, r7
 800262a:	d106      	bne.n	800263a <HAL_ADCEx_InjectedConfigChannel+0x3c6>
  MODIFY_REG(*preg,
 800262c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800262e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002632:	661a      	str	r2, [r3, #96]	; 0x60
 8002634:	680a      	ldr	r2, [r1, #0]
 8002636:	f3c2 0c12 	ubfx	ip, r2, #0, #19
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800263a:	686e      	ldr	r6, [r5, #4]
 800263c:	686f      	ldr	r7, [r5, #4]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800263e:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002642:	f1bc 0f00 	cmp.w	ip, #0
 8002646:	d173      	bne.n	8002730 <HAL_ADCEx_InjectedConfigChannel+0x4bc>
 8002648:	f3c2 6684 	ubfx	r6, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800264c:	42b7      	cmp	r7, r6
 800264e:	f040 80a8 	bne.w	80027a2 <HAL_ADCEx_InjectedConfigChannel+0x52e>
  MODIFY_REG(*preg,
 8002652:	686a      	ldr	r2, [r5, #4]
 8002654:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002658:	606a      	str	r2, [r5, #4]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800265a:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800265c:	68ae      	ldr	r6, [r5, #8]
 800265e:	68af      	ldr	r7, [r5, #8]
 8002660:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002664:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002668:	2e00      	cmp	r6, #0
 800266a:	d16c      	bne.n	8002746 <HAL_ADCEx_InjectedConfigChannel+0x4d2>
 800266c:	f3c2 6684 	ubfx	r6, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002670:	42b7      	cmp	r7, r6
 8002672:	f105 0c0c 	add.w	ip, r5, #12
 8002676:	f040 808f 	bne.w	8002798 <HAL_ADCEx_InjectedConfigChannel+0x524>
  MODIFY_REG(*preg,
 800267a:	68aa      	ldr	r2, [r5, #8]
 800267c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002680:	60aa      	str	r2, [r5, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002682:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002684:	f8dc 5000 	ldr.w	r5, [ip]
 8002688:	f8dc 5000 	ldr.w	r5, [ip]
 800268c:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002690:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002694:	2e00      	cmp	r6, #0
 8002696:	d165      	bne.n	8002764 <HAL_ADCEx_InjectedConfigChannel+0x4f0>
 8002698:	f3c2 6684 	ubfx	r6, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800269c:	42ae      	cmp	r6, r5
 800269e:	f47f ae2c 	bne.w	80022fa <HAL_ADCEx_InjectedConfigChannel+0x86>
  MODIFY_REG(*preg,
 80026a2:	f8dc 2000 	ldr.w	r2, [ip]
 80026a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026aa:	f8cc 2000 	str.w	r2, [ip]
 80026ae:	680a      	ldr	r2, [r1, #0]
 80026b0:	e623      	b.n	80022fa <HAL_ADCEx_InjectedConfigChannel+0x86>
      MODIFY_REG(hadc->Instance->CFGR2,
 80026b2:	e9d1 570b 	ldrd	r5, r7, [r1, #44]	; 0x2c
 80026b6:	691e      	ldr	r6, [r3, #16]
 80026b8:	433d      	orrs	r5, r7
 80026ba:	f045 0502 	orr.w	r5, r5, #2
 80026be:	f426 76ff 	bic.w	r6, r6, #510	; 0x1fe
 80026c2:	4335      	orrs	r5, r6
 80026c4:	611d      	str	r5, [r3, #16]
 80026c6:	e686      	b.n	80023d6 <HAL_ADCEx_InjectedConfigChannel+0x162>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 80026c8:	4618      	mov	r0, r3
 80026ca:	e5f4      	b.n	80022b6 <HAL_ADCEx_InjectedConfigChannel+0x42>
 80026cc:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d0:	3501      	adds	r5, #1
 80026d2:	f005 051f 	and.w	r5, r5, #31
 80026d6:	2d09      	cmp	r5, #9
 80026d8:	f67f af2e 	bls.w	8002538 <HAL_ADCEx_InjectedConfigChannel+0x2c4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d053      	beq.n	800278c <HAL_ADCEx_InjectedConfigChannel+0x518>
  return __builtin_clz(value);
 80026e4:	fab5 f585 	clz	r5, r5
 80026e8:	3501      	adds	r5, #1
 80026ea:	06ad      	lsls	r5, r5, #26
 80026ec:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80026f4:	2e00      	cmp	r6, #0
 80026f6:	d047      	beq.n	8002788 <HAL_ADCEx_InjectedConfigChannel+0x514>
  return __builtin_clz(value);
 80026f8:	fab6 f686 	clz	r6, r6
 80026fc:	3601      	adds	r6, #1
 80026fe:	f006 061f 	and.w	r6, r6, #31
 8002702:	2701      	movs	r7, #1
 8002704:	fa07 f606 	lsl.w	r6, r7, r6
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8002708:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800270e:	b38a      	cbz	r2, 8002774 <HAL_ADCEx_InjectedConfigChannel+0x500>
  return __builtin_clz(value);
 8002710:	fab2 f282 	clz	r2, r2
 8002714:	3201      	adds	r2, #1
 8002716:	f002 021f 	and.w	r2, r2, #31
 800271a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800271e:	e6e9      	b.n	80024f4 <HAL_ADCEx_InjectedConfigChannel+0x280>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8002720:	f3c2 6784 	ubfx	r7, r2, #26, #5
 8002724:	e780      	b.n	8002628 <HAL_ADCEx_InjectedConfigChannel+0x3b4>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002726:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8002728:	f045 0520 	orr.w	r5, r5, #32
 800272c:	6565      	str	r5, [r4, #84]	; 0x54
 800272e:	e649      	b.n	80023c4 <HAL_ADCEx_InjectedConfigChannel+0x150>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8002734:	b11e      	cbz	r6, 800273e <HAL_ADCEx_InjectedConfigChannel+0x4ca>
  return __builtin_clz(value);
 8002736:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800273a:	42b7      	cmp	r7, r6
 800273c:	d089      	beq.n	8002652 <HAL_ADCEx_InjectedConfigChannel+0x3de>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800273e:	68ae      	ldr	r6, [r5, #8]
 8002740:	68af      	ldr	r7, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002742:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800274a:	b316      	cbz	r6, 8002792 <HAL_ADCEx_InjectedConfigChannel+0x51e>
  return __builtin_clz(value);
 800274c:	fab6 f686 	clz	r6, r6
 8002750:	42b7      	cmp	r7, r6
 8002752:	f105 0c0c 	add.w	ip, r5, #12
 8002756:	d090      	beq.n	800267a <HAL_ADCEx_InjectedConfigChannel+0x406>
 8002758:	f8dc 5000 	ldr.w	r5, [ip]
 800275c:	f8dc 5000 	ldr.w	r5, [ip]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002760:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8002768:	2e00      	cmp	r6, #0
 800276a:	f43f adc6 	beq.w	80022fa <HAL_ADCEx_InjectedConfigChannel+0x86>
  return __builtin_clz(value);
 800276e:	fab6 f686 	clz	r6, r6
 8002772:	e793      	b.n	800269c <HAL_ADCEx_InjectedConfigChannel+0x428>
  if (value == 0U)
 8002774:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <HAL_ADCEx_InjectedConfigChannel+0x538>)
 8002776:	e6c1      	b.n	80024fc <HAL_ADCEx_InjectedConfigChannel+0x288>
 8002778:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800277c:	e6be      	b.n	80024fc <HAL_ADCEx_InjectedConfigChannel+0x288>
 800277e:	2602      	movs	r6, #2
 8002780:	e6f2      	b.n	8002568 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
 8002782:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8002786:	e6e2      	b.n	800254e <HAL_ADCEx_InjectedConfigChannel+0x2da>
 8002788:	2602      	movs	r6, #2
 800278a:	e7bd      	b.n	8002708 <HAL_ADCEx_InjectedConfigChannel+0x494>
 800278c:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8002790:	e7ae      	b.n	80026f0 <HAL_ADCEx_InjectedConfigChannel+0x47c>
 8002792:	f105 0c0c 	add.w	ip, r5, #12
 8002796:	e7df      	b.n	8002758 <HAL_ADCEx_InjectedConfigChannel+0x4e4>
 8002798:	68ef      	ldr	r7, [r5, #12]
 800279a:	68ed      	ldr	r5, [r5, #12]
 800279c:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80027a0:	e77c      	b.n	800269c <HAL_ADCEx_InjectedConfigChannel+0x428>
 80027a2:	68af      	ldr	r7, [r5, #8]
 80027a4:	68af      	ldr	r7, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027a6:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80027aa:	e761      	b.n	8002670 <HAL_ADCEx_InjectedConfigChannel+0x3fc>
 80027ac:	fe500000 	.word	0xfe500000

080027b0 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027b0:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80027b4:	2a01      	cmp	r2, #1
 80027b6:	d057      	beq.n	8002868 <HAL_ADCEx_MultiModeConfigChannel+0xb8>
{
 80027b8:	b4f0      	push	{r4, r5, r6, r7}

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80027ba:	6802      	ldr	r2, [r0, #0]
 80027bc:	4c30      	ldr	r4, [pc, #192]	; (8002880 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027be:	680d      	ldr	r5, [r1, #0]
 80027c0:	4603      	mov	r3, r0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80027c2:	42a2      	cmp	r2, r4
  __HAL_LOCK(hadc);
 80027c4:	f04f 0001 	mov.w	r0, #1
 80027c8:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80027cc:	d008      	beq.n	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x30>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027d0:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d2:	f042 0220 	orr.w	r2, r2, #32
 80027d6:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80027d8:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80027dc:	bcf0      	pop	{r4, r5, r6, r7}
 80027de:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027e0:	4c28      	ldr	r4, [pc, #160]	; (8002884 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 80027e2:	68a0      	ldr	r0, [r4, #8]
 80027e4:	0740      	lsls	r0, r0, #29
 80027e6:	d50a      	bpl.n	80027fe <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80027e8:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ec:	f042 0220 	orr.w	r2, r2, #32
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80027f2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80027fa:	bcf0      	pop	{r4, r5, r6, r7}
 80027fc:	4770      	bx	lr
 80027fe:	6890      	ldr	r0, [r2, #8]
 8002800:	0747      	lsls	r7, r0, #29
 8002802:	d4f2      	bmi.n	80027ea <HAL_ADCEx_MultiModeConfigChannel+0x3a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002804:	b305      	cbz	r5, 8002848 <HAL_ADCEx_MultiModeConfigChannel+0x98>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002806:	4f20      	ldr	r7, [pc, #128]	; (8002888 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8002808:	684e      	ldr	r6, [r1, #4]
 800280a:	68b8      	ldr	r0, [r7, #8]
 800280c:	f893 c030 	ldrb.w	ip, [r3, #48]	; 0x30
 8002810:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8002814:	4330      	orrs	r0, r6
 8002816:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 800281a:	60b8      	str	r0, [r7, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800281c:	6890      	ldr	r0, [r2, #8]
 800281e:	68a2      	ldr	r2, [r4, #8]
 8002820:	f012 0f01 	tst.w	r2, #1
 8002824:	4a19      	ldr	r2, [pc, #100]	; (800288c <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
 8002826:	6892      	ldr	r2, [r2, #8]
 8002828:	d11c      	bne.n	8002864 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 800282a:	07d6      	lsls	r6, r2, #31
 800282c:	d41a      	bmi.n	8002864 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800282e:	f010 0001 	ands.w	r0, r0, #1
 8002832:	d117      	bne.n	8002864 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        MODIFY_REG(tmpADC_Common->CCR,
 8002834:	68bc      	ldr	r4, [r7, #8]
 8002836:	688a      	ldr	r2, [r1, #8]
 8002838:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 800283c:	4315      	orrs	r5, r2
 800283e:	f021 010f 	bic.w	r1, r1, #15
 8002842:	430d      	orrs	r5, r1
 8002844:	60bd      	str	r5, [r7, #8]
 8002846:	e7d5      	b.n	80027f4 <HAL_ADCEx_MultiModeConfigChannel+0x44>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002848:	490f      	ldr	r1, [pc, #60]	; (8002888 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 800284a:	4e10      	ldr	r6, [pc, #64]	; (800288c <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
 800284c:	6888      	ldr	r0, [r1, #8]
 800284e:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8002852:	6088      	str	r0, [r1, #8]
 8002854:	6895      	ldr	r5, [r2, #8]
 8002856:	68a0      	ldr	r0, [r4, #8]
 8002858:	68b2      	ldr	r2, [r6, #8]
 800285a:	4328      	orrs	r0, r5
 800285c:	07d4      	lsls	r4, r2, #31
 800285e:	f000 0001 	and.w	r0, r0, #1
 8002862:	d503      	bpl.n	800286c <HAL_ADCEx_MultiModeConfigChannel+0xbc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002864:	2000      	movs	r0, #0
 8002866:	e7c5      	b.n	80027f4 <HAL_ADCEx_MultiModeConfigChannel+0x44>
  __HAL_LOCK(hadc);
 8002868:	2002      	movs	r0, #2
}
 800286a:	4770      	bx	lr
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800286c:	2800      	cmp	r0, #0
 800286e:	d1f9      	bne.n	8002864 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002870:	688a      	ldr	r2, [r1, #8]
 8002872:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8002876:	f022 020f 	bic.w	r2, r2, #15
 800287a:	608a      	str	r2, [r1, #8]
 800287c:	e7ba      	b.n	80027f4 <HAL_ADCEx_MultiModeConfigChannel+0x44>
 800287e:	bf00      	nop
 8002880:	50040000 	.word	0x50040000
 8002884:	50040100 	.word	0x50040100
 8002888:	50040300 	.word	0x50040300
 800288c:	50040200 	.word	0x50040200

08002890 <HAL_ADCEx_DisableInjectedQueue>:
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002890:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	0752      	lsls	r2, r2, #29
 8002896:	d502      	bpl.n	800289e <HAL_ADCEx_DisableInjectedQueue+0xe>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002898:	689b      	ldr	r3, [r3, #8]
    LL_ADC_INJ_SetQueueMode(hadc->Instance, LL_ADC_INJ_QUEUE_DISABLE);
    tmp_hal_status = HAL_OK;
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800289a:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 800289c:	4770      	bx	lr
 800289e:	6898      	ldr	r0, [r3, #8]
 80028a0:	f010 0008 	ands.w	r0, r0, #8
 80028a4:	d1f9      	bne.n	800289a <HAL_ADCEx_DisableInjectedQueue+0xa>
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028ac:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80028b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028b4:	60da      	str	r2, [r3, #12]
    tmp_hal_status = HAL_OK;
 80028b6:	4770      	bx	lr

080028b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b8:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80028ba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028bc:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80028c0:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c2:	0200      	lsls	r0, r0, #8
 80028c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028c8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80028cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80028d0:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80028d2:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028dc:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_NVIC_SetPriority+0x64>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e6:	f1c3 0507 	rsb	r5, r3, #7
 80028ea:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ec:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f0:	bf28      	it	cs
 80028f2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f4:	2c06      	cmp	r4, #6
 80028f6:	d919      	bls.n	800292c <HAL_NVIC_SetPriority+0x50>
 80028f8:	3b03      	subs	r3, #3
 80028fa:	f04f 34ff 	mov.w	r4, #4294967295
 80028fe:	409c      	lsls	r4, r3
 8002900:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002904:	f04f 32ff 	mov.w	r2, #4294967295
 8002908:	40aa      	lsls	r2, r5
 800290a:	ea21 0102 	bic.w	r1, r1, r2
 800290e:	fa01 f203 	lsl.w	r2, r1, r3
 8002912:	4322      	orrs	r2, r4
 8002914:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8002916:	2800      	cmp	r0, #0
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	db0a      	blt.n	8002932 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002920:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002924:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002928:	bc30      	pop	{r4, r5}
 800292a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292c:	2400      	movs	r4, #0
 800292e:	4623      	mov	r3, r4
 8002930:	e7e8      	b.n	8002904 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002932:	4b04      	ldr	r3, [pc, #16]	; (8002944 <HAL_NVIC_SetPriority+0x68>)
 8002934:	f000 000f 	and.w	r0, r0, #15
 8002938:	4403      	add	r3, r0
 800293a:	761a      	strb	r2, [r3, #24]
 800293c:	bc30      	pop	{r4, r5}
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00
 8002944:	e000ecfc 	.word	0xe000ecfc

08002948 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002948:	2800      	cmp	r0, #0
 800294a:	db07      	blt.n	800295c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <HAL_NVIC_EnableIRQ+0x18>)
 800294e:	f000 011f 	and.w	r1, r0, #31
 8002952:	2301      	movs	r3, #1
 8002954:	0940      	lsrs	r0, r0, #5
 8002956:	408b      	lsls	r3, r1
 8002958:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000e100 	.word	0xe000e100

08002964 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002964:	3801      	subs	r0, #1
 8002966:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800296a:	d20e      	bcs.n	800298a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296e:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002970:	4c08      	ldr	r4, [pc, #32]	; (8002994 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002972:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002974:	20f0      	movs	r0, #240	; 0xf0
 8002976:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800297a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800297c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800297e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002982:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8002984:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002988:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800298a:	2001      	movs	r0, #1
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000e010 	.word	0xe000e010
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002998:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800299c:	2a02      	cmp	r2, #2
 800299e:	d003      	beq.n	80029a8 <HAL_DMA_Abort_IT+0x10>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029a0:	2204      	movs	r2, #4
 80029a2:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 80029a4:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 80029a6:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029a8:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029aa:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 80029ac:	b570      	push	{r4, r5, r6, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ae:	680c      	ldr	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029b0:	6c06      	ldr	r6, [r0, #64]	; 0x40
    if(hdma->XferAbortCallback != NULL)
 80029b2:	6b85      	ldr	r5, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029b4:	f024 040e 	bic.w	r4, r4, #14
 80029b8:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80029ba:	680c      	ldr	r4, [r1, #0]
 80029bc:	f024 0401 	bic.w	r4, r4, #1
 80029c0:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029c2:	f002 021c 	and.w	r2, r2, #28
 80029c6:	2101      	movs	r1, #1
 80029c8:	fa01 f202 	lsl.w	r2, r1, r2
    __HAL_UNLOCK(hdma);
 80029cc:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029ce:	6072      	str	r2, [r6, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80029d0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80029d4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80029d8:	b115      	cbz	r5, 80029e0 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 80029da:	47a8      	blx	r5
  HAL_StatusTypeDef status = HAL_OK;
 80029dc:	4620      	mov	r0, r4
}
 80029de:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80029e0:	4628      	mov	r0, r5
}
 80029e2:	bd70      	pop	{r4, r5, r6, pc}

080029e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029e8:	f8d1 9000 	ldr.w	r9, [r1]
{
 80029ec:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ee:	f1b9 0f00 	cmp.w	r9, #0
 80029f2:	f000 80b1 	beq.w	8002b58 <HAL_GPIO_Init+0x174>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029f6:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 8002bd0 <HAL_GPIO_Init+0x1ec>
 80029fa:	4688      	mov	r8, r1
  uint32_t position = 0x00u;
 80029fc:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029fe:	2301      	movs	r3, #1
 8002a00:	fa03 f705 	lsl.w	r7, r3, r5
    if (iocurrent != 0x00u)
 8002a04:	ea17 0a09 	ands.w	sl, r7, r9
 8002a08:	f000 80a1 	beq.w	8002b4e <HAL_GPIO_Init+0x16a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002a10:	f023 0110 	bic.w	r1, r3, #16
 8002a14:	006c      	lsls	r4, r5, #1
 8002a16:	2203      	movs	r2, #3
 8002a18:	3901      	subs	r1, #1
 8002a1a:	40a2      	lsls	r2, r4
 8002a1c:	2901      	cmp	r1, #1
 8002a1e:	ea6f 0202 	mvn.w	r2, r2
 8002a22:	d80e      	bhi.n	8002a42 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->OSPEEDR;
 8002a24:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a26:	f8d8 100c 	ldr.w	r1, [r8, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a2a:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a2c:	40a1      	lsls	r1, r4
 8002a2e:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8002a30:	6081      	str	r1, [r0, #8]
        temp = GPIOx->OTYPER;
 8002a32:	6846      	ldr	r6, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a34:	f3c3 1100 	ubfx	r1, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a38:	ea26 0607 	bic.w	r6, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a3c:	40a9      	lsls	r1, r5
 8002a3e:	4331      	orrs	r1, r6
        GPIOx->OTYPER = temp;
 8002a40:	6041      	str	r1, [r0, #4]
 8002a42:	f8d8 6008 	ldr.w	r6, [r8, #8]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a46:	f003 0103 	and.w	r1, r3, #3
 8002a4a:	2903      	cmp	r1, #3
 8002a4c:	fa06 f604 	lsl.w	r6, r6, r4
 8002a50:	f000 8085 	beq.w	8002b5e <HAL_GPIO_Init+0x17a>
      temp = GPIOx->PUPDR;
 8002a54:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a56:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a58:	433e      	orrs	r6, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a5a:	2b02      	cmp	r3, #2
      GPIOx->PUPDR = temp;
 8002a5c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a5e:	f040 808d 	bne.w	8002b7c <HAL_GPIO_Init+0x198>
        temp = GPIOx->AFR[position >> 3u];
 8002a62:	ea4f 0ed5 	mov.w	lr, r5, lsr #3
 8002a66:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a6a:	f005 0707 	and.w	r7, r5, #7
        temp = GPIOx->AFR[position >> 3u];
 8002a6e:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a72:	00bf      	lsls	r7, r7, #2
 8002a74:	f04f 0c0f 	mov.w	ip, #15
 8002a78:	fa0c fc07 	lsl.w	ip, ip, r7
 8002a7c:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a80:	f8d8 6010 	ldr.w	r6, [r8, #16]
 8002a84:	40be      	lsls	r6, r7
 8002a86:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 8002a8a:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 8002a8e:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a90:	40a1      	lsls	r1, r4
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a92:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a94:	4311      	orrs	r1, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a96:	00da      	lsls	r2, r3, #3
      GPIOx->MODER = temp;
 8002a98:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a9a:	d558      	bpl.n	8002b4e <HAL_GPIO_Init+0x16a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9c:	4945      	ldr	r1, [pc, #276]	; (8002bb4 <HAL_GPIO_Init+0x1d0>)
 8002a9e:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	660a      	str	r2, [r1, #96]	; 0x60
 8002aa6:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 8002aa8:	f025 0403 	bic.w	r4, r5, #3
 8002aac:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002ab0:	f002 0201 	and.w	r2, r2, #1
 8002ab4:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8002ab8:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002aba:	f005 0203 	and.w	r2, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abe:	9901      	ldr	r1, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002ac0:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ac2:	0092      	lsls	r2, r2, #2
 8002ac4:	210f      	movs	r1, #15
 8002ac6:	4091      	lsls	r1, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ac8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002acc:	ea26 0101 	bic.w	r1, r6, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ad0:	d016      	beq.n	8002b00 <HAL_GPIO_Init+0x11c>
 8002ad2:	4e39      	ldr	r6, [pc, #228]	; (8002bb8 <HAL_GPIO_Init+0x1d4>)
 8002ad4:	42b0      	cmp	r0, r6
 8002ad6:	d059      	beq.n	8002b8c <HAL_GPIO_Init+0x1a8>
 8002ad8:	4e38      	ldr	r6, [pc, #224]	; (8002bbc <HAL_GPIO_Init+0x1d8>)
 8002ada:	42b0      	cmp	r0, r6
 8002adc:	d051      	beq.n	8002b82 <HAL_GPIO_Init+0x19e>
 8002ade:	4e38      	ldr	r6, [pc, #224]	; (8002bc0 <HAL_GPIO_Init+0x1dc>)
 8002ae0:	42b0      	cmp	r0, r6
 8002ae2:	d05d      	beq.n	8002ba0 <HAL_GPIO_Init+0x1bc>
 8002ae4:	4e37      	ldr	r6, [pc, #220]	; (8002bc4 <HAL_GPIO_Init+0x1e0>)
 8002ae6:	42b0      	cmp	r0, r6
 8002ae8:	d05f      	beq.n	8002baa <HAL_GPIO_Init+0x1c6>
 8002aea:	4e37      	ldr	r6, [pc, #220]	; (8002bc8 <HAL_GPIO_Init+0x1e4>)
 8002aec:	42b0      	cmp	r0, r6
 8002aee:	d052      	beq.n	8002b96 <HAL_GPIO_Init+0x1b2>
 8002af0:	4e36      	ldr	r6, [pc, #216]	; (8002bcc <HAL_GPIO_Init+0x1e8>)
 8002af2:	42b0      	cmp	r0, r6
 8002af4:	bf0c      	ite	eq
 8002af6:	2606      	moveq	r6, #6
 8002af8:	2607      	movne	r6, #7
 8002afa:	fa06 f202 	lsl.w	r2, r6, r2
 8002afe:	4311      	orrs	r1, r2
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b00:	60a1      	str	r1, [r4, #8]
        temp = EXTI->IMR1;
 8002b02:	f8db 2000 	ldr.w	r2, [fp]
        temp &= ~(iocurrent);
 8002b06:	ea6f 010a 	mvn.w	r1, sl
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b0a:	03df      	lsls	r7, r3, #15
        temp &= ~(iocurrent);
 8002b0c:	bf54      	ite	pl
 8002b0e:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8002b10:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 8002b14:	f8cb 2000 	str.w	r2, [fp]

        temp = EXTI->EMR1;
 8002b18:	f8db 2004 	ldr.w	r2, [fp, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b1c:	039e      	lsls	r6, r3, #14
        temp &= ~(iocurrent);
 8002b1e:	bf54      	ite	pl
 8002b20:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8002b22:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 8002b26:	f8cb 2004 	str.w	r2, [fp, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b2a:	f8db 2008 	ldr.w	r2, [fp, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b2e:	02dc      	lsls	r4, r3, #11
        temp &= ~(iocurrent);
 8002b30:	bf54      	ite	pl
 8002b32:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8002b34:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 8002b38:	f8cb 2008 	str.w	r2, [fp, #8]

        temp = EXTI->FTSR1;
 8002b3c:	f8db 200c 	ldr.w	r2, [fp, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b40:	029b      	lsls	r3, r3, #10
        temp &= ~(iocurrent);
 8002b42:	bf54      	ite	pl
 8002b44:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8002b46:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 8002b4a:	f8cb 200c 	str.w	r2, [fp, #12]
      }
    }

    position++;
 8002b4e:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b50:	fa39 f305 	lsrs.w	r3, r9, r5
 8002b54:	f47f af53 	bne.w	80029fe <HAL_GPIO_Init+0x1a>
  }
}
 8002b58:	b003      	add	sp, #12
 8002b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->ASCR;
 8002b5e:	f8d0 c02c 	ldr.w	ip, [r0, #44]	; 0x2c
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002b62:	f3c3 0ec0 	ubfx	lr, r3, #3, #1
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b66:	ea2c 0c07 	bic.w	ip, ip, r7
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002b6a:	4677      	mov	r7, lr
 8002b6c:	40af      	lsls	r7, r5
 8002b6e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->ASCR = temp;
 8002b72:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8002b74:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b76:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b78:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8002b7a:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b7c:	2b12      	cmp	r3, #18
 8002b7e:	d186      	bne.n	8002a8e <HAL_GPIO_Init+0xaa>
 8002b80:	e76f      	b.n	8002a62 <HAL_GPIO_Init+0x7e>
 8002b82:	2602      	movs	r6, #2
 8002b84:	fa06 f202 	lsl.w	r2, r6, r2
 8002b88:	4311      	orrs	r1, r2
 8002b8a:	e7b9      	b.n	8002b00 <HAL_GPIO_Init+0x11c>
 8002b8c:	2601      	movs	r6, #1
 8002b8e:	fa06 f202 	lsl.w	r2, r6, r2
 8002b92:	4311      	orrs	r1, r2
 8002b94:	e7b4      	b.n	8002b00 <HAL_GPIO_Init+0x11c>
 8002b96:	2605      	movs	r6, #5
 8002b98:	fa06 f202 	lsl.w	r2, r6, r2
 8002b9c:	4311      	orrs	r1, r2
 8002b9e:	e7af      	b.n	8002b00 <HAL_GPIO_Init+0x11c>
 8002ba0:	2603      	movs	r6, #3
 8002ba2:	fa06 f202 	lsl.w	r2, r6, r2
 8002ba6:	4311      	orrs	r1, r2
 8002ba8:	e7aa      	b.n	8002b00 <HAL_GPIO_Init+0x11c>
 8002baa:	2604      	movs	r6, #4
 8002bac:	fa06 f202 	lsl.w	r2, r6, r2
 8002bb0:	4311      	orrs	r1, r2
 8002bb2:	e7a5      	b.n	8002b00 <HAL_GPIO_Init+0x11c>
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	48000400 	.word	0x48000400
 8002bbc:	48000800 	.word	0x48000800
 8002bc0:	48000c00 	.word	0x48000c00
 8002bc4:	48001000 	.word	0x48001000
 8002bc8:	48001400 	.word	0x48001400
 8002bcc:	48001800 	.word	0x48001800
 8002bd0:	40010400 	.word	0x40010400

08002bd4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002bd4:	6903      	ldr	r3, [r0, #16]
 8002bd6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002bd8:	bf14      	ite	ne
 8002bda:	2001      	movne	r0, #1
 8002bdc:	2000      	moveq	r0, #0
 8002bde:	4770      	bx	lr

08002be0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be0:	b90a      	cbnz	r2, 8002be6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002be2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002be4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002be6:	6181      	str	r1, [r0, #24]
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop

08002bec <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bec:	4b02      	ldr	r3, [pc, #8]	; (8002bf8 <HAL_PWREx_GetVoltageRange+0xc>)
 8002bee:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002bf0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40007000 	.word	0x40007000

08002bfc <HAL_PWREx_ControlVoltageScaling>:
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bfc:	4a1e      	ldr	r2, [pc, #120]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002bfe:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c00:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c08:	d00a      	beq.n	8002c20 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0e:	d02e      	beq.n	8002c6e <HAL_PWREx_ControlVoltageScaling+0x72>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c10:	6813      	ldr	r3, [r2, #0]
 8002c12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c24:	d023      	beq.n	8002c6e <HAL_PWREx_ControlVoltageScaling+0x72>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c26:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c28:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <HAL_PWREx_ControlVoltageScaling+0x80>)
 8002c2a:	4815      	ldr	r0, [pc, #84]	; (8002c80 <HAL_PWREx_ControlVoltageScaling+0x84>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c2c:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8002c30:	f441 7100 	orr.w	r1, r1, #512	; 0x200
{
 8002c34:	b410      	push	{r4}
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c36:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c38:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c3a:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c3c:	2332      	movs	r3, #50	; 0x32
 8002c3e:	fb03 f304 	mul.w	r3, r3, r4
 8002c42:	fba0 0303 	umull	r0, r3, r0, r3
 8002c46:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c48:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c4a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c4e:	d506      	bpl.n	8002c5e <HAL_PWREx_ControlVoltageScaling+0x62>
 8002c50:	e000      	b.n	8002c54 <HAL_PWREx_ControlVoltageScaling+0x58>
 8002c52:	b123      	cbz	r3, 8002c5e <HAL_PWREx_ControlVoltageScaling+0x62>
 8002c54:	6951      	ldr	r1, [r2, #20]
 8002c56:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8002c58:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c5c:	d4f9      	bmi.n	8002c52 <HAL_PWREx_ControlVoltageScaling+0x56>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	055b      	lsls	r3, r3, #21
 8002c64:	d405      	bmi.n	8002c72 <HAL_PWREx_ControlVoltageScaling+0x76>
  return HAL_OK;
 8002c66:	2000      	movs	r0, #0
}
 8002c68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c6c:	4770      	bx	lr
  return HAL_OK;
 8002c6e:	2000      	movs	r0, #0
}
 8002c70:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002c72:	2003      	movs	r0, #3
 8002c74:	e7f8      	b.n	8002c68 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8002c76:	bf00      	nop
 8002c78:	40007000 	.word	0x40007000
 8002c7c:	20000014 	.word	0x20000014
 8002c80:	431bde83 	.word	0x431bde83

08002c84 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c84:	4a28      	ldr	r2, [pc, #160]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c86:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c88:	68d2      	ldr	r2, [r2, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c8a:	f013 030c 	ands.w	r3, r3, #12
 8002c8e:	d008      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x1e>
 8002c90:	2b0c      	cmp	r3, #12
 8002c92:	d038      	beq.n	8002d06 <HAL_RCC_GetSysClockFreq+0x82>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d034      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x7e>
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	4824      	ldr	r0, [pc, #144]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xa8>)
 8002c9c:	bf18      	it	ne
 8002c9e:	2000      	movne	r0, #0
 8002ca0:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ca2:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ca4:	6811      	ldr	r1, [r2, #0]
 8002ca6:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ca8:	bf54      	ite	pl
 8002caa:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cae:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8002cb0:	491f      	ldr	r1, [pc, #124]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cb2:	bf54      	ite	pl
 8002cb4:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cb8:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8002cbc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cc0:	b303      	cbz	r3, 8002d04 <HAL_RCC_GetSysClockFreq+0x80>
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cc2:	2b0c      	cmp	r3, #12
 8002cc4:	d12d      	bne.n	8002d22 <HAL_RCC_GetSysClockFreq+0x9e>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cc6:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f003 0303 	and.w	r3, r3, #3

    switch (pllsource)
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d025      	beq.n	8002d1e <HAL_RCC_GetSysClockFreq+0x9a>
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cd2:	4a16      	ldr	r2, [pc, #88]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xa8>)
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	bf08      	it	eq
 8002cd8:	4610      	moveq	r0, r2
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
      break;
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cdc:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cde:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002ce6:	3301      	adds	r3, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ce8:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cec:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8002cf0:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cf4:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cf6:	0058      	lsls	r0, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cf8:	fbb2 f3f1 	udiv	r3, r2, r1
    sysclockfreq = pllvco / pllr;
 8002cfc:	fbb3 f0f0 	udiv	r0, r3, r0
 8002d00:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8002d02:	480c      	ldr	r0, [pc, #48]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xb0>)
  }

  return sysclockfreq;
}
 8002d04:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d06:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d0a:	2a01      	cmp	r2, #1
 8002d0c:	d0c9      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002d16:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d18:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8002d1c:	d1d9      	bne.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 8002d1e:	4805      	ldr	r0, [pc, #20]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d20:	e7db      	b.n	8002cda <HAL_RCC_GetSysClockFreq+0x56>
 8002d22:	2000      	movs	r0, #0
  return sysclockfreq;
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	007a1200 	.word	0x007a1200
 8002d30:	08005160 	.word	0x08005160
 8002d34:	00f42400 	.word	0x00f42400

08002d38 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002d38:	2800      	cmp	r0, #0
 8002d3a:	f000 81a4 	beq.w	8003086 <HAL_RCC_OscConfig+0x34e>
{
 8002d3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d42:	4ab2      	ldr	r2, [pc, #712]	; (800300c <HAL_RCC_OscConfig+0x2d4>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d44:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d46:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d48:	68d6      	ldr	r6, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d4a:	06da      	lsls	r2, r3, #27
{
 8002d4c:	b085      	sub	sp, #20
 8002d4e:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d50:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d54:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d58:	d52e      	bpl.n	8002db8 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d5a:	2d00      	cmp	r5, #0
 8002d5c:	f000 810e 	beq.w	8002f7c <HAL_RCC_OscConfig+0x244>
 8002d60:	2d0c      	cmp	r5, #12
 8002d62:	f000 8108 	beq.w	8002f76 <HAL_RCC_OscConfig+0x23e>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d66:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8002d68:	4fa8      	ldr	r7, [pc, #672]	; (800300c <HAL_RCC_OscConfig+0x2d4>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 8177 	beq.w	800305e <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_MSI_ENABLE();
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002d78:	f7fe fefc 	bl	8001b74 <HAL_GetTick>
 8002d7c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d7e:	e006      	b.n	8002d8e <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d80:	f7fe fef8 	bl	8001b74 <HAL_GetTick>
 8002d84:	eba0 0008 	sub.w	r0, r0, r8
 8002d88:	2802      	cmp	r0, #2
 8002d8a:	f200 8178 	bhi.w	800307e <HAL_RCC_OscConfig+0x346>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	079b      	lsls	r3, r3, #30
 8002d92:	d5f5      	bpl.n	8002d80 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	f043 0308 	orr.w	r3, r3, #8
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	6a22      	ldr	r2, [r4, #32]
 8002da0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002da4:	4313      	orrs	r3, r2
 8002da6:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69e2      	ldr	r2, [r4, #28]
 8002dac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002db0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002db4:	607b      	str	r3, [r7, #4]
 8002db6:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db8:	07d9      	lsls	r1, r3, #31
 8002dba:	f100 80b3 	bmi.w	8002f24 <HAL_RCC_OscConfig+0x1ec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dbe:	0799      	lsls	r1, r3, #30
 8002dc0:	d523      	bpl.n	8002e0a <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002dc2:	2d04      	cmp	r5, #4
 8002dc4:	f000 813b 	beq.w	800303e <HAL_RCC_OscConfig+0x306>
 8002dc8:	2d0c      	cmp	r5, #12
 8002dca:	f000 8135 	beq.w	8003038 <HAL_RCC_OscConfig+0x300>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dce:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8002dd0:	4e8e      	ldr	r6, [pc, #568]	; (800300c <HAL_RCC_OscConfig+0x2d4>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 8183 	beq.w	80030de <HAL_RCC_OscConfig+0x3a6>
        __HAL_RCC_HSI_ENABLE();
 8002dd8:	6833      	ldr	r3, [r6, #0]
 8002dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dde:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002de0:	f7fe fec8 	bl	8001b74 <HAL_GetTick>
 8002de4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de6:	e005      	b.n	8002df4 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de8:	f7fe fec4 	bl	8001b74 <HAL_GetTick>
 8002dec:	1bc0      	subs	r0, r0, r7
 8002dee:	2802      	cmp	r0, #2
 8002df0:	f200 8145 	bhi.w	800307e <HAL_RCC_OscConfig+0x346>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df4:	6833      	ldr	r3, [r6, #0]
 8002df6:	055b      	lsls	r3, r3, #21
 8002df8:	d5f6      	bpl.n	8002de8 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfa:	6873      	ldr	r3, [r6, #4]
 8002dfc:	6922      	ldr	r2, [r4, #16]
 8002dfe:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002e02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e06:	6073      	str	r3, [r6, #4]
 8002e08:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0a:	0719      	lsls	r1, r3, #28
 8002e0c:	d519      	bpl.n	8002e42 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e0e:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002e10:	4e7e      	ldr	r6, [pc, #504]	; (800300c <HAL_RCC_OscConfig+0x2d4>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 814d 	beq.w	80030b2 <HAL_RCC_OscConfig+0x37a>
      __HAL_RCC_LSI_ENABLE();
 8002e18:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002e24:	f7fe fea6 	bl	8001b74 <HAL_GetTick>
 8002e28:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e2a:	e005      	b.n	8002e38 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2c:	f7fe fea2 	bl	8001b74 <HAL_GetTick>
 8002e30:	1bc0      	subs	r0, r0, r7
 8002e32:	2802      	cmp	r0, #2
 8002e34:	f200 8123 	bhi.w	800307e <HAL_RCC_OscConfig+0x346>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e38:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002e3c:	079a      	lsls	r2, r3, #30
 8002e3e:	d5f5      	bpl.n	8002e2c <HAL_RCC_OscConfig+0xf4>
 8002e40:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e42:	0758      	lsls	r0, r3, #29
 8002e44:	d541      	bpl.n	8002eca <HAL_RCC_OscConfig+0x192>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e46:	4b71      	ldr	r3, [pc, #452]	; (800300c <HAL_RCC_OscConfig+0x2d4>)
 8002e48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e4a:	00d1      	lsls	r1, r2, #3
 8002e4c:	f100 8145 	bmi.w	80030da <HAL_RCC_OscConfig+0x3a2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e56:	659a      	str	r2, [r3, #88]	; 0x58
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e62:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e64:	4e6a      	ldr	r6, [pc, #424]	; (8003010 <HAL_RCC_OscConfig+0x2d8>)
 8002e66:	6832      	ldr	r2, [r6, #0]
 8002e68:	05d2      	lsls	r2, r2, #23
 8002e6a:	f140 81af 	bpl.w	80031cc <HAL_RCC_OscConfig+0x494>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e6e:	68a3      	ldr	r3, [r4, #8]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	f000 81bd 	beq.w	80031f0 <HAL_RCC_OscConfig+0x4b8>
 8002e76:	2b05      	cmp	r3, #5
 8002e78:	f000 8188 	beq.w	800318c <HAL_RCC_OscConfig+0x454>
 8002e7c:	4e63      	ldr	r6, [pc, #396]	; (800300c <HAL_RCC_OscConfig+0x2d4>)
 8002e7e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8002e8a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002e8e:	f022 0204 	bic.w	r2, r2, #4
 8002e92:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f040 8185 	bne.w	80031a6 <HAL_RCC_OscConfig+0x46e>
      tickstart = HAL_GetTick();
 8002e9c:	f7fe fe6a 	bl	8001b74 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002ea4:	4681      	mov	r9, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ea6:	e006      	b.n	8002eb6 <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea8:	f7fe fe64 	bl	8001b74 <HAL_GetTick>
 8002eac:	eba0 0009 	sub.w	r0, r0, r9
 8002eb0:	4540      	cmp	r0, r8
 8002eb2:	f200 80e4 	bhi.w	800307e <HAL_RCC_OscConfig+0x346>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eb6:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002eba:	0799      	lsls	r1, r3, #30
 8002ebc:	d4f4      	bmi.n	8002ea8 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8002ebe:	b127      	cbz	r7, 8002eca <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec0:	4a52      	ldr	r2, [pc, #328]	; (800300c <HAL_RCC_OscConfig+0x2d4>)
 8002ec2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6593      	str	r3, [r2, #88]	; 0x58
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002eca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ecc:	b333      	cbz	r3, 8002f1c <HAL_RCC_OscConfig+0x1e4>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	f000 81ba 	beq.w	8003248 <HAL_RCC_OscConfig+0x510>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ed4:	2d0c      	cmp	r5, #12
 8002ed6:	f000 8094 	beq.w	8003002 <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_PLL_DISABLE();
 8002eda:	4b4c      	ldr	r3, [pc, #304]	; (800300c <HAL_RCC_OscConfig+0x2d4>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002ee2:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	f012 5f20 	tst.w	r2, #671088640	; 0x28000000
 8002eea:	d103      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x1bc>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	f022 0203 	bic.w	r2, r2, #3
 8002ef2:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ef4:	4c45      	ldr	r4, [pc, #276]	; (800300c <HAL_RCC_OscConfig+0x2d4>)
 8002ef6:	68e3      	ldr	r3, [r4, #12]
 8002ef8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f00:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002f02:	f7fe fe37 	bl	8001b74 <HAL_GetTick>
 8002f06:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f08:	e005      	b.n	8002f16 <HAL_RCC_OscConfig+0x1de>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0a:	f7fe fe33 	bl	8001b74 <HAL_GetTick>
 8002f0e:	1b40      	subs	r0, r0, r5
 8002f10:	2802      	cmp	r0, #2
 8002f12:	f200 80b4 	bhi.w	800307e <HAL_RCC_OscConfig+0x346>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	019b      	lsls	r3, r3, #6
 8002f1a:	d4f6      	bmi.n	8002f0a <HAL_RCC_OscConfig+0x1d2>
  return HAL_OK;
 8002f1c:	2000      	movs	r0, #0
}
 8002f1e:	b005      	add	sp, #20
 8002f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f24:	2d08      	cmp	r5, #8
 8002f26:	d07d      	beq.n	8003024 <HAL_RCC_OscConfig+0x2ec>
 8002f28:	2d0c      	cmp	r5, #12
 8002f2a:	d079      	beq.n	8003020 <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2c:	6863      	ldr	r3, [r4, #4]
 8002f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f32:	f000 80aa 	beq.w	800308a <HAL_RCC_OscConfig+0x352>
 8002f36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f3a:	f000 81dc 	beq.w	80032f6 <HAL_RCC_OscConfig+0x5be>
 8002f3e:	4f33      	ldr	r7, [pc, #204]	; (800300c <HAL_RCC_OscConfig+0x2d4>)
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f46:	603a      	str	r2, [r7, #0]
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f4e:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f040 809f 	bne.w	8003094 <HAL_RCC_OscConfig+0x35c>
        tickstart = HAL_GetTick();
 8002f56:	f7fe fe0d 	bl	8001b74 <HAL_GetTick>
 8002f5a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f5c:	e006      	b.n	8002f6c <HAL_RCC_OscConfig+0x234>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f5e:	f7fe fe09 	bl	8001b74 <HAL_GetTick>
 8002f62:	eba0 0008 	sub.w	r0, r0, r8
 8002f66:	2864      	cmp	r0, #100	; 0x64
 8002f68:	f200 8089 	bhi.w	800307e <HAL_RCC_OscConfig+0x346>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	0398      	lsls	r0, r3, #14
 8002f70:	d4f5      	bmi.n	8002f5e <HAL_RCC_OscConfig+0x226>
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	e723      	b.n	8002dbe <HAL_RCC_OscConfig+0x86>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f76:	2e01      	cmp	r6, #1
 8002f78:	f47f aef5 	bne.w	8002d66 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f7c:	4b23      	ldr	r3, [pc, #140]	; (800300c <HAL_RCC_OscConfig+0x2d4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	079f      	lsls	r7, r3, #30
 8002f82:	d43b      	bmi.n	8002ffc <HAL_RCC_OscConfig+0x2c4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f84:	4b21      	ldr	r3, [pc, #132]	; (800300c <HAL_RCC_OscConfig+0x2d4>)
 8002f86:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8002f8a:	681a      	ldr	r2, [r3, #0]
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f8c:	4f1f      	ldr	r7, [pc, #124]	; (800300c <HAL_RCC_OscConfig+0x2d4>)
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f8e:	0710      	lsls	r0, r2, #28
 8002f90:	bf56      	itet	pl
 8002f92:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8002f96:	681b      	ldrmi	r3, [r3, #0]
 8002f98:	091b      	lsrpl	r3, r3, #4
 8002f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f9e:	4598      	cmp	r8, r3
 8002fa0:	f200 80af 	bhi.w	8003102 <HAL_RCC_OscConfig+0x3ca>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	f043 0308 	orr.w	r3, r3, #8
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fb2:	ea43 0308 	orr.w	r3, r3, r8
 8002fb6:	603b      	str	r3, [r7, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69e2      	ldr	r2, [r4, #28]
 8002fbc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002fc4:	607b      	str	r3, [r7, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fc6:	2d00      	cmp	r5, #0
 8002fc8:	f000 811a 	beq.w	8003200 <HAL_RCC_OscConfig+0x4c8>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fcc:	f7ff fe5a 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	; (800300c <HAL_RCC_OscConfig+0x2d4>)
 8002fd2:	4a10      	ldr	r2, [pc, #64]	; (8003014 <HAL_RCC_OscConfig+0x2dc>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
        status = HAL_InitTick(uwTickPrio);
 8002fd6:	4910      	ldr	r1, [pc, #64]	; (8003018 <HAL_RCC_OscConfig+0x2e0>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fd8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002fdc:	5cd3      	ldrb	r3, [r2, r3]
 8002fde:	4a0f      	ldr	r2, [pc, #60]	; (800301c <HAL_RCC_OscConfig+0x2e4>)
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8002fe8:	6808      	ldr	r0, [r1, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fea:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8002fec:	f7fe fd74 	bl	8001ad8 <HAL_InitTick>
        if(status != HAL_OK)
 8002ff0:	b940      	cbnz	r0, 8003004 <HAL_RCC_OscConfig+0x2cc>
 8002ff2:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff4:	07d9      	lsls	r1, r3, #31
 8002ff6:	f57f aee2 	bpl.w	8002dbe <HAL_RCC_OscConfig+0x86>
 8002ffa:	e793      	b.n	8002f24 <HAL_RCC_OscConfig+0x1ec>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ffc:	69a3      	ldr	r3, [r4, #24]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1c0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x24c>
    return HAL_ERROR;
 8003002:	2001      	movs	r0, #1
}
 8003004:	b005      	add	sp, #20
 8003006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000
 8003010:	40007000 	.word	0x40007000
 8003014:	08005148 	.word	0x08005148
 8003018:	2000001c 	.word	0x2000001c
 800301c:	20000014 	.word	0x20000014
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003020:	2e03      	cmp	r6, #3
 8003022:	d183      	bne.n	8002f2c <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003024:	4aba      	ldr	r2, [pc, #744]	; (8003310 <HAL_RCC_OscConfig+0x5d8>)
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	0392      	lsls	r2, r2, #14
 800302a:	f57f aec8 	bpl.w	8002dbe <HAL_RCC_OscConfig+0x86>
 800302e:	6862      	ldr	r2, [r4, #4]
 8003030:	2a00      	cmp	r2, #0
 8003032:	f47f aec4 	bne.w	8002dbe <HAL_RCC_OscConfig+0x86>
 8003036:	e7e4      	b.n	8003002 <HAL_RCC_OscConfig+0x2ca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003038:	2e02      	cmp	r6, #2
 800303a:	f47f aec8 	bne.w	8002dce <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800303e:	4ab4      	ldr	r2, [pc, #720]	; (8003310 <HAL_RCC_OscConfig+0x5d8>)
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	0552      	lsls	r2, r2, #21
 8003044:	d502      	bpl.n	800304c <HAL_RCC_OscConfig+0x314>
 8003046:	68e2      	ldr	r2, [r4, #12]
 8003048:	2a00      	cmp	r2, #0
 800304a:	d0da      	beq.n	8003002 <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304c:	49b0      	ldr	r1, [pc, #704]	; (8003310 <HAL_RCC_OscConfig+0x5d8>)
 800304e:	6920      	ldr	r0, [r4, #16]
 8003050:	684a      	ldr	r2, [r1, #4]
 8003052:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 8003056:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800305a:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800305c:	e6d5      	b.n	8002e0a <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8003066:	f7fe fd85 	bl	8001b74 <HAL_GetTick>
 800306a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	0798      	lsls	r0, r3, #30
 8003070:	d5bf      	bpl.n	8002ff2 <HAL_RCC_OscConfig+0x2ba>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003072:	f7fe fd7f 	bl	8001b74 <HAL_GetTick>
 8003076:	eba0 0008 	sub.w	r0, r0, r8
 800307a:	2802      	cmp	r0, #2
 800307c:	d9f6      	bls.n	800306c <HAL_RCC_OscConfig+0x334>
            return HAL_TIMEOUT;
 800307e:	2003      	movs	r0, #3
}
 8003080:	b005      	add	sp, #20
 8003082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_ERROR;
 8003086:	2001      	movs	r0, #1
}
 8003088:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800308a:	4aa1      	ldr	r2, [pc, #644]	; (8003310 <HAL_RCC_OscConfig+0x5d8>)
 800308c:	6813      	ldr	r3, [r2, #0]
 800308e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003092:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003094:	f7fe fd6e 	bl	8001b74 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003098:	4f9d      	ldr	r7, [pc, #628]	; (8003310 <HAL_RCC_OscConfig+0x5d8>)
        tickstart = HAL_GetTick();
 800309a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800309c:	e005      	b.n	80030aa <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800309e:	f7fe fd69 	bl	8001b74 <HAL_GetTick>
 80030a2:	eba0 0008 	sub.w	r0, r0, r8
 80030a6:	2864      	cmp	r0, #100	; 0x64
 80030a8:	d8e9      	bhi.n	800307e <HAL_RCC_OscConfig+0x346>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	039b      	lsls	r3, r3, #14
 80030ae:	d5f6      	bpl.n	800309e <HAL_RCC_OscConfig+0x366>
 80030b0:	e75f      	b.n	8002f72 <HAL_RCC_OscConfig+0x23a>
      __HAL_RCC_LSI_DISABLE();
 80030b2:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80030b6:	f023 0301 	bic.w	r3, r3, #1
 80030ba:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 80030be:	f7fe fd59 	bl	8001b74 <HAL_GetTick>
 80030c2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030c4:	e004      	b.n	80030d0 <HAL_RCC_OscConfig+0x398>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c6:	f7fe fd55 	bl	8001b74 <HAL_GetTick>
 80030ca:	1bc0      	subs	r0, r0, r7
 80030cc:	2802      	cmp	r0, #2
 80030ce:	d8d6      	bhi.n	800307e <HAL_RCC_OscConfig+0x346>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030d0:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80030d4:	079b      	lsls	r3, r3, #30
 80030d6:	d4f6      	bmi.n	80030c6 <HAL_RCC_OscConfig+0x38e>
 80030d8:	e6b2      	b.n	8002e40 <HAL_RCC_OscConfig+0x108>
    FlagStatus       pwrclkchanged = RESET;
 80030da:	2700      	movs	r7, #0
 80030dc:	e6c2      	b.n	8002e64 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 80030de:	6833      	ldr	r3, [r6, #0]
 80030e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030e4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80030e6:	f7fe fd45 	bl	8001b74 <HAL_GetTick>
 80030ea:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030ec:	e004      	b.n	80030f8 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ee:	f7fe fd41 	bl	8001b74 <HAL_GetTick>
 80030f2:	1bc0      	subs	r0, r0, r7
 80030f4:	2802      	cmp	r0, #2
 80030f6:	d8c2      	bhi.n	800307e <HAL_RCC_OscConfig+0x346>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030f8:	6833      	ldr	r3, [r6, #0]
 80030fa:	0558      	lsls	r0, r3, #21
 80030fc:	d4f7      	bmi.n	80030ee <HAL_RCC_OscConfig+0x3b6>
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	e683      	b.n	8002e0a <HAL_RCC_OscConfig+0xd2>
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003104:	00d9      	lsls	r1, r3, #3
 8003106:	d531      	bpl.n	800316c <HAL_RCC_OscConfig+0x434>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003108:	f7ff fd70 	bl	8002bec <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800310c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003110:	f000 8104 	beq.w	800331c <HAL_RCC_OscConfig+0x5e4>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003114:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8003118:	f200 811b 	bhi.w	8003352 <HAL_RCC_OscConfig+0x61a>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800311c:	f000 8175 	beq.w	800340a <HAL_RCC_OscConfig+0x6d2>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003120:	f1a8 0870 	sub.w	r8, r8, #112	; 0x70
 8003124:	fab8 f888 	clz	r8, r8
 8003128:	ea4f 1858 	mov.w	r8, r8, lsr #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800312c:	4a79      	ldr	r2, [pc, #484]	; (8003314 <HAL_RCC_OscConfig+0x5dc>)
 800312e:	6813      	ldr	r3, [r2, #0]
 8003130:	f023 0307 	bic.w	r3, r3, #7
 8003134:	ea43 0308 	orr.w	r3, r3, r8
 8003138:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800313a:	6813      	ldr	r3, [r2, #0]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	4598      	cmp	r8, r3
 8003142:	f47f af5e 	bne.w	8003002 <HAL_RCC_OscConfig+0x2ca>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003146:	4b72      	ldr	r3, [pc, #456]	; (8003310 <HAL_RCC_OscConfig+0x5d8>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	f042 0208 	orr.w	r2, r2, #8
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	6a21      	ldr	r1, [r4, #32]
 8003154:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003158:	430a      	orrs	r2, r1
 800315a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	69e1      	ldr	r1, [r4, #28]
 8003160:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003164:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	e72f      	b.n	8002fcc <HAL_RCC_OscConfig+0x294>
    __HAL_RCC_PWR_CLK_ENABLE();
 800316c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800316e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003172:	65bb      	str	r3, [r7, #88]	; 0x58
 8003174:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	9302      	str	r3, [sp, #8]
 800317c:	9b02      	ldr	r3, [sp, #8]
    vos = HAL_PWREx_GetVoltageRange();
 800317e:	f7ff fd35 	bl	8002bec <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003188:	65bb      	str	r3, [r7, #88]	; 0x58
 800318a:	e7bf      	b.n	800310c <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318c:	4b60      	ldr	r3, [pc, #384]	; (8003310 <HAL_RCC_OscConfig+0x5d8>)
 800318e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003192:	f042 0204 	orr.w	r2, r2, #4
 8003196:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800319a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tickstart = HAL_GetTick();
 80031a6:	f7fe fce5 	bl	8001b74 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031aa:	4e59      	ldr	r6, [pc, #356]	; (8003310 <HAL_RCC_OscConfig+0x5d8>)
      tickstart = HAL_GetTick();
 80031ac:	4681      	mov	r9, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ae:	f241 3888 	movw	r8, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b2:	e006      	b.n	80031c2 <HAL_RCC_OscConfig+0x48a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b4:	f7fe fcde 	bl	8001b74 <HAL_GetTick>
 80031b8:	eba0 0009 	sub.w	r0, r0, r9
 80031bc:	4540      	cmp	r0, r8
 80031be:	f63f af5e 	bhi.w	800307e <HAL_RCC_OscConfig+0x346>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031c2:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80031c6:	0798      	lsls	r0, r3, #30
 80031c8:	d5f4      	bpl.n	80031b4 <HAL_RCC_OscConfig+0x47c>
 80031ca:	e678      	b.n	8002ebe <HAL_RCC_OscConfig+0x186>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031cc:	6832      	ldr	r2, [r6, #0]
 80031ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d2:	6032      	str	r2, [r6, #0]
      tickstart = HAL_GetTick();
 80031d4:	f7fe fcce 	bl	8001b74 <HAL_GetTick>
 80031d8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031da:	6833      	ldr	r3, [r6, #0]
 80031dc:	05db      	lsls	r3, r3, #23
 80031de:	f53f ae46 	bmi.w	8002e6e <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e2:	f7fe fcc7 	bl	8001b74 <HAL_GetTick>
 80031e6:	eba0 0008 	sub.w	r0, r0, r8
 80031ea:	2802      	cmp	r0, #2
 80031ec:	d9f5      	bls.n	80031da <HAL_RCC_OscConfig+0x4a2>
 80031ee:	e746      	b.n	800307e <HAL_RCC_OscConfig+0x346>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f0:	4a47      	ldr	r2, [pc, #284]	; (8003310 <HAL_RCC_OscConfig+0x5d8>)
 80031f2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031fe:	e7d2      	b.n	80031a6 <HAL_RCC_OscConfig+0x46e>
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003200:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003202:	00da      	lsls	r2, r3, #3
 8003204:	f140 8095 	bpl.w	8003332 <HAL_RCC_OscConfig+0x5fa>
    vos = HAL_PWREx_GetVoltageRange();
 8003208:	f7ff fcf0 	bl	8002bec <HAL_PWREx_GetVoltageRange>
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800320c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003210:	f000 80a2 	beq.w	8003358 <HAL_RCC_OscConfig+0x620>
    if(msirange > RCC_MSIRANGE_8)
 8003214:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8003218:	f200 80ee 	bhi.w	80033f8 <HAL_RCC_OscConfig+0x6c0>
      if(msirange == RCC_MSIRANGE_8)
 800321c:	f000 80f8 	beq.w	8003410 <HAL_RCC_OscConfig+0x6d8>
      else if(msirange == RCC_MSIRANGE_7)
 8003220:	f1a8 0870 	sub.w	r8, r8, #112	; 0x70
 8003224:	fab8 f888 	clz	r8, r8
 8003228:	ea4f 1858 	mov.w	r8, r8, lsr #5
  __HAL_FLASH_SET_LATENCY(latency);
 800322c:	4a39      	ldr	r2, [pc, #228]	; (8003314 <HAL_RCC_OscConfig+0x5dc>)
 800322e:	6813      	ldr	r3, [r2, #0]
 8003230:	f023 0307 	bic.w	r3, r3, #7
 8003234:	ea43 0308 	orr.w	r3, r3, r8
 8003238:	6013      	str	r3, [r2, #0]
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800323a:	6813      	ldr	r3, [r2, #0]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	4598      	cmp	r8, r3
 8003242:	f47f aede 	bne.w	8003002 <HAL_RCC_OscConfig+0x2ca>
 8003246:	e6c1      	b.n	8002fcc <HAL_RCC_OscConfig+0x294>
      pll_config = RCC->PLLCFGR;
 8003248:	4a31      	ldr	r2, [pc, #196]	; (8003310 <HAL_RCC_OscConfig+0x5d8>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800324a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 800324c:	68d3      	ldr	r3, [r2, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	f003 0003 	and.w	r0, r3, #3
 8003252:	4288      	cmp	r0, r1
 8003254:	f000 808b 	beq.w	800336e <HAL_RCC_OscConfig+0x636>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003258:	2d0c      	cmp	r5, #12
 800325a:	f43f aed2 	beq.w	8003002 <HAL_RCC_OscConfig+0x2ca>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800325e:	4d2c      	ldr	r5, [pc, #176]	; (8003310 <HAL_RCC_OscConfig+0x5d8>)
 8003260:	682a      	ldr	r2, [r5, #0]
 8003262:	0152      	lsls	r2, r2, #5
 8003264:	f53f aecd 	bmi.w	8003002 <HAL_RCC_OscConfig+0x2ca>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003268:	682a      	ldr	r2, [r5, #0]
 800326a:	00d3      	lsls	r3, r2, #3
 800326c:	f53f aec9 	bmi.w	8003002 <HAL_RCC_OscConfig+0x2ca>
            __HAL_RCC_PLL_DISABLE();
 8003270:	682a      	ldr	r2, [r5, #0]
 8003272:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003276:	602a      	str	r2, [r5, #0]
            tickstart = HAL_GetTick();
 8003278:	f7fe fc7c 	bl	8001b74 <HAL_GetTick>
 800327c:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800327e:	e005      	b.n	800328c <HAL_RCC_OscConfig+0x554>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003280:	f7fe fc78 	bl	8001b74 <HAL_GetTick>
 8003284:	1b80      	subs	r0, r0, r6
 8003286:	2802      	cmp	r0, #2
 8003288:	f63f aef9 	bhi.w	800307e <HAL_RCC_OscConfig+0x346>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800328c:	682b      	ldr	r3, [r5, #0]
 800328e:	019f      	lsls	r7, r3, #6
 8003290:	d4f6      	bmi.n	8003280 <HAL_RCC_OscConfig+0x548>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003292:	68e9      	ldr	r1, [r5, #12]
 8003294:	4b20      	ldr	r3, [pc, #128]	; (8003318 <HAL_RCC_OscConfig+0x5e0>)
 8003296:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003298:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800329a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800329c:	400b      	ands	r3, r1
 800329e:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 80032a2:	4313      	orrs	r3, r2
 80032a4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80032a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80032aa:	1e74      	subs	r4, r6, #1
 80032ac:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80032b0:	0900      	lsrs	r0, r0, #4
 80032b2:	0849      	lsrs	r1, r1, #1
 80032b4:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 80032b8:	3901      	subs	r1, #1
 80032ba:	0852      	lsrs	r2, r2, #1
 80032bc:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80032c0:	3a01      	subs	r2, #1
 80032c2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80032c6:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 80032c8:	682b      	ldr	r3, [r5, #0]
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ca:	4c11      	ldr	r4, [pc, #68]	; (8003310 <HAL_RCC_OscConfig+0x5d8>)
            __HAL_RCC_PLL_ENABLE();
 80032cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d0:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032d2:	68eb      	ldr	r3, [r5, #12]
 80032d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d8:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80032da:	f7fe fc4b 	bl	8001b74 <HAL_GetTick>
 80032de:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e0:	e005      	b.n	80032ee <HAL_RCC_OscConfig+0x5b6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e2:	f7fe fc47 	bl	8001b74 <HAL_GetTick>
 80032e6:	1b40      	subs	r0, r0, r5
 80032e8:	2802      	cmp	r0, #2
 80032ea:	f63f aec8 	bhi.w	800307e <HAL_RCC_OscConfig+0x346>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	0198      	lsls	r0, r3, #6
 80032f2:	d5f6      	bpl.n	80032e2 <HAL_RCC_OscConfig+0x5aa>
 80032f4:	e612      	b.n	8002f1c <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032fa:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	e6c1      	b.n	8003094 <HAL_RCC_OscConfig+0x35c>
 8003310:	40021000 	.word	0x40021000
 8003314:	40022000 	.word	0x40022000
 8003318:	f99d808c 	.word	0xf99d808c
    if(msirange > RCC_MSIRANGE_8)
 800331c:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8003320:	d96d      	bls.n	80033fe <HAL_RCC_OscConfig+0x6c6>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003322:	f1b8 0fa1 	cmp.w	r8, #161	; 0xa1
 8003326:	bf34      	ite	cc
 8003328:	f04f 0801 	movcc.w	r8, #1
 800332c:	f04f 0802 	movcs.w	r8, #2
 8003330:	e6fc      	b.n	800312c <HAL_RCC_OscConfig+0x3f4>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003338:	65bb      	str	r3, [r7, #88]	; 0x58
 800333a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800333c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003340:	9303      	str	r3, [sp, #12]
 8003342:	9b03      	ldr	r3, [sp, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003344:	f7ff fc52 	bl	8002bec <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800334a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003350:	e75c      	b.n	800320c <HAL_RCC_OscConfig+0x4d4>
      latency = FLASH_LATENCY_3; /* 3WS */
 8003352:	f04f 0803 	mov.w	r8, #3
 8003356:	e6e9      	b.n	800312c <HAL_RCC_OscConfig+0x3f4>
    if(msirange > RCC_MSIRANGE_8)
 8003358:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 800335c:	d952      	bls.n	8003404 <HAL_RCC_OscConfig+0x6cc>
        latency = FLASH_LATENCY_2; /* 2WS */
 800335e:	f1b8 0fa1 	cmp.w	r8, #161	; 0xa1
 8003362:	bf34      	ite	cc
 8003364:	f04f 0801 	movcc.w	r8, #1
 8003368:	f04f 0802 	movcs.w	r8, #2
 800336c:	e75e      	b.n	800322c <HAL_RCC_OscConfig+0x4f4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800336e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003370:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8003374:	3801      	subs	r0, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003376:	ebb1 1f00 	cmp.w	r1, r0, lsl #4
 800337a:	f47f af6d 	bne.w	8003258 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800337e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003380:	f403 41fe 	and.w	r1, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003384:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
 8003388:	f47f af66 	bne.w	8003258 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800338c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800338e:	3907      	subs	r1, #7
 8003390:	f403 3000 	and.w	r0, r3, #131072	; 0x20000
 8003394:	bf18      	it	ne
 8003396:	2101      	movne	r1, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003398:	4288      	cmp	r0, r1
 800339a:	f47f af5d 	bne.w	8003258 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800339e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80033a0:	0849      	lsrs	r1, r1, #1
 80033a2:	3901      	subs	r1, #1
 80033a4:	f403 00c0 	and.w	r0, r3, #6291456	; 0x600000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033a8:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 80033ac:	f47f af54 	bne.w	8003258 <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033b0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80033b2:	0849      	lsrs	r1, r1, #1
 80033b4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80033b8:	3901      	subs	r1, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ba:	ebb3 6f41 	cmp.w	r3, r1, lsl #25
 80033be:	f47f af4b 	bne.w	8003258 <HAL_RCC_OscConfig+0x520>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c2:	6813      	ldr	r3, [r2, #0]
 80033c4:	0199      	lsls	r1, r3, #6
 80033c6:	f53f ada9 	bmi.w	8002f1c <HAL_RCC_OscConfig+0x1e4>
          __HAL_RCC_PLL_ENABLE();
 80033ca:	6813      	ldr	r3, [r2, #0]
 80033cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033d0:	6013      	str	r3, [r2, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033d2:	68d3      	ldr	r3, [r2, #12]
 80033d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033d8:	60d3      	str	r3, [r2, #12]
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033da:	4614      	mov	r4, r2
          tickstart = HAL_GetTick();
 80033dc:	f7fe fbca 	bl	8001b74 <HAL_GetTick>
 80033e0:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e2:	e005      	b.n	80033f0 <HAL_RCC_OscConfig+0x6b8>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e4:	f7fe fbc6 	bl	8001b74 <HAL_GetTick>
 80033e8:	1b40      	subs	r0, r0, r5
 80033ea:	2802      	cmp	r0, #2
 80033ec:	f63f ae47 	bhi.w	800307e <HAL_RCC_OscConfig+0x346>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	019a      	lsls	r2, r3, #6
 80033f4:	d5f6      	bpl.n	80033e4 <HAL_RCC_OscConfig+0x6ac>
 80033f6:	e591      	b.n	8002f1c <HAL_RCC_OscConfig+0x1e4>
      latency = FLASH_LATENCY_3; /* 3WS */
 80033f8:	f04f 0803 	mov.w	r8, #3
 80033fc:	e716      	b.n	800322c <HAL_RCC_OscConfig+0x4f4>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033fe:	f04f 0800 	mov.w	r8, #0
 8003402:	e693      	b.n	800312c <HAL_RCC_OscConfig+0x3f4>
 8003404:	f04f 0800 	mov.w	r8, #0
 8003408:	e710      	b.n	800322c <HAL_RCC_OscConfig+0x4f4>
        latency = FLASH_LATENCY_2; /* 2WS */
 800340a:	f04f 0802 	mov.w	r8, #2
 800340e:	e68d      	b.n	800312c <HAL_RCC_OscConfig+0x3f4>
 8003410:	f04f 0802 	mov.w	r8, #2
 8003414:	e70a      	b.n	800322c <HAL_RCC_OscConfig+0x4f4>
 8003416:	bf00      	nop

08003418 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003418:	b178      	cbz	r0, 800343a <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800341a:	4a46      	ldr	r2, [pc, #280]	; (8003534 <HAL_RCC_ClockConfig+0x11c>)
 800341c:	6813      	ldr	r3, [r2, #0]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	428b      	cmp	r3, r1
 8003424:	d20b      	bcs.n	800343e <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003426:	6813      	ldr	r3, [r2, #0]
 8003428:	f023 0307 	bic.w	r3, r3, #7
 800342c:	430b      	orrs	r3, r1
 800342e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003430:	6813      	ldr	r3, [r2, #0]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	428b      	cmp	r3, r1
 8003438:	d001      	beq.n	800343e <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800343a:	2001      	movs	r0, #1
}
 800343c:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343e:	6803      	ldr	r3, [r0, #0]
{
 8003440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003444:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003446:	07d9      	lsls	r1, r3, #31
 8003448:	4604      	mov	r4, r0
 800344a:	d524      	bpl.n	8003496 <HAL_RCC_ClockConfig+0x7e>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800344c:	6843      	ldr	r3, [r0, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344e:	4a3a      	ldr	r2, [pc, #232]	; (8003538 <HAL_RCC_ClockConfig+0x120>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003450:	2b03      	cmp	r3, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003452:	6812      	ldr	r2, [r2, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003454:	d062      	beq.n	800351c <HAL_RCC_ClockConfig+0x104>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003456:	2b02      	cmp	r3, #2
 8003458:	d065      	beq.n	8003526 <HAL_RCC_ClockConfig+0x10e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800345a:	2b00      	cmp	r3, #0
 800345c:	d166      	bne.n	800352c <HAL_RCC_ClockConfig+0x114>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800345e:	0796      	lsls	r6, r2, #30
 8003460:	d532      	bpl.n	80034c8 <HAL_RCC_ClockConfig+0xb0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003462:	4e35      	ldr	r6, [pc, #212]	; (8003538 <HAL_RCC_ClockConfig+0x120>)
 8003464:	68b2      	ldr	r2, [r6, #8]
 8003466:	f022 0203 	bic.w	r2, r2, #3
 800346a:	4313      	orrs	r3, r2
 800346c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800346e:	f7fe fb81 	bl	8001b74 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003472:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003476:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003478:	e005      	b.n	8003486 <HAL_RCC_ClockConfig+0x6e>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347a:	f7fe fb7b 	bl	8001b74 <HAL_GetTick>
 800347e:	eba0 0008 	sub.w	r0, r0, r8
 8003482:	42b8      	cmp	r0, r7
 8003484:	d84d      	bhi.n	8003522 <HAL_RCC_ClockConfig+0x10a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003486:	68b3      	ldr	r3, [r6, #8]
 8003488:	6862      	ldr	r2, [r4, #4]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003492:	d1f2      	bne.n	800347a <HAL_RCC_ClockConfig+0x62>
 8003494:	6823      	ldr	r3, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003496:	0799      	lsls	r1, r3, #30
 8003498:	d506      	bpl.n	80034a8 <HAL_RCC_ClockConfig+0x90>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800349a:	4927      	ldr	r1, [pc, #156]	; (8003538 <HAL_RCC_ClockConfig+0x120>)
 800349c:	68a0      	ldr	r0, [r4, #8]
 800349e:	688a      	ldr	r2, [r1, #8]
 80034a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80034a4:	4302      	orrs	r2, r0
 80034a6:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a8:	4922      	ldr	r1, [pc, #136]	; (8003534 <HAL_RCC_ClockConfig+0x11c>)
 80034aa:	680a      	ldr	r2, [r1, #0]
 80034ac:	f002 0207 	and.w	r2, r2, #7
 80034b0:	42aa      	cmp	r2, r5
 80034b2:	d90c      	bls.n	80034ce <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b4:	680a      	ldr	r2, [r1, #0]
 80034b6:	f022 0207 	bic.w	r2, r2, #7
 80034ba:	432a      	orrs	r2, r5
 80034bc:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	680a      	ldr	r2, [r1, #0]
 80034c0:	f002 0207 	and.w	r2, r2, #7
 80034c4:	42aa      	cmp	r2, r5
 80034c6:	d002      	beq.n	80034ce <HAL_RCC_ClockConfig+0xb6>
    return HAL_ERROR;
 80034c8:	2001      	movs	r0, #1
}
 80034ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ce:	075a      	lsls	r2, r3, #29
 80034d0:	d506      	bpl.n	80034e0 <HAL_RCC_ClockConfig+0xc8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d2:	4919      	ldr	r1, [pc, #100]	; (8003538 <HAL_RCC_ClockConfig+0x120>)
 80034d4:	68e0      	ldr	r0, [r4, #12]
 80034d6:	688a      	ldr	r2, [r1, #8]
 80034d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034dc:	4302      	orrs	r2, r0
 80034de:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e0:	071b      	lsls	r3, r3, #28
 80034e2:	d507      	bpl.n	80034f4 <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034e4:	4a14      	ldr	r2, [pc, #80]	; (8003538 <HAL_RCC_ClockConfig+0x120>)
 80034e6:	6921      	ldr	r1, [r4, #16]
 80034e8:	6893      	ldr	r3, [r2, #8]
 80034ea:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80034ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80034f2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034f4:	f7ff fbc6 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 80034f8:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <HAL_RCC_ClockConfig+0x120>)
 80034fa:	4c10      	ldr	r4, [pc, #64]	; (800353c <HAL_RCC_ClockConfig+0x124>)
 80034fc:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 80034fe:	4910      	ldr	r1, [pc, #64]	; (8003540 <HAL_RCC_ClockConfig+0x128>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003500:	4a10      	ldr	r2, [pc, #64]	; (8003544 <HAL_RCC_ClockConfig+0x12c>)
 8003502:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003506:	5ce3      	ldrb	r3, [r4, r3]
 8003508:	f003 031f 	and.w	r3, r3, #31
 800350c:	fa20 f303 	lsr.w	r3, r0, r3
}
 8003510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8003514:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003516:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick(uwTickPrio);
 8003518:	f7fe bade 	b.w	8001ad8 <HAL_InitTick>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800351c:	0192      	lsls	r2, r2, #6
 800351e:	d4a0      	bmi.n	8003462 <HAL_RCC_ClockConfig+0x4a>
 8003520:	e7d2      	b.n	80034c8 <HAL_RCC_ClockConfig+0xb0>
        return HAL_TIMEOUT;
 8003522:	2003      	movs	r0, #3
 8003524:	e7d1      	b.n	80034ca <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003526:	0397      	lsls	r7, r2, #14
 8003528:	d49b      	bmi.n	8003462 <HAL_RCC_ClockConfig+0x4a>
 800352a:	e7cd      	b.n	80034c8 <HAL_RCC_ClockConfig+0xb0>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800352c:	0550      	lsls	r0, r2, #21
 800352e:	d5cb      	bpl.n	80034c8 <HAL_RCC_ClockConfig+0xb0>
 8003530:	e797      	b.n	8003462 <HAL_RCC_ClockConfig+0x4a>
 8003532:	bf00      	nop
 8003534:	40022000 	.word	0x40022000
 8003538:	40021000 	.word	0x40021000
 800353c:	08005148 	.word	0x08005148
 8003540:	2000001c 	.word	0x2000001c
 8003544:	20000014 	.word	0x20000014

08003548 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x18>)
 800354a:	4a06      	ldr	r2, [pc, #24]	; (8003564 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800354c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800354e:	4906      	ldr	r1, [pc, #24]	; (8003568 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003550:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003554:	6808      	ldr	r0, [r1, #0]
 8003556:	5cd3      	ldrb	r3, [r2, r3]
 8003558:	f003 031f 	and.w	r3, r3, #31
}
 800355c:	40d8      	lsrs	r0, r3
 800355e:	4770      	bx	lr
 8003560:	40021000 	.word	0x40021000
 8003564:	08005158 	.word	0x08005158
 8003568:	20000014 	.word	0x20000014

0800356c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_RCC_GetPCLK2Freq+0x18>)
 800356e:	4a06      	ldr	r2, [pc, #24]	; (8003588 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003570:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003572:	4906      	ldr	r1, [pc, #24]	; (800358c <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003574:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003578:	6808      	ldr	r0, [r1, #0]
 800357a:	5cd3      	ldrb	r3, [r2, r3]
 800357c:	f003 031f 	and.w	r3, r3, #31
}
 8003580:	40d8      	lsrs	r0, r3
 8003582:	4770      	bx	lr
 8003584:	40021000 	.word	0x40021000
 8003588:	08005158 	.word	0x08005158
 800358c:	20000014 	.word	0x20000014

08003590 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003590:	4a45      	ldr	r2, [pc, #276]	; (80036a8 <RCCEx_PLLSAI1_Config+0x118>)
{
 8003592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003594:	68d4      	ldr	r4, [r2, #12]
 8003596:	6803      	ldr	r3, [r0, #0]
 8003598:	07a4      	lsls	r4, r4, #30
 800359a:	d006      	beq.n	80035aa <RCCEx_PLLSAI1_Config+0x1a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800359c:	68d4      	ldr	r4, [r2, #12]
 800359e:	f004 0403 	and.w	r4, r4, #3
 80035a2:	429c      	cmp	r4, r3
 80035a4:	d00b      	beq.n	80035be <RCCEx_PLLSAI1_Config+0x2e>
 80035a6:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80035a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d011      	beq.n	80035d2 <RCCEx_PLLSAI1_Config+0x42>
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d056      	beq.n	8003660 <RCCEx_PLLSAI1_Config+0xd0>
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d1f7      	bne.n	80035a6 <RCCEx_PLLSAI1_Config+0x16>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	0797      	lsls	r7, r2, #30
 80035ba:	d5f4      	bpl.n	80035a6 <RCCEx_PLLSAI1_Config+0x16>
 80035bc:	e00c      	b.n	80035d8 <RCCEx_PLLSAI1_Config+0x48>
       ||
 80035be:	2c00      	cmp	r4, #0
 80035c0:	d0f1      	beq.n	80035a6 <RCCEx_PLLSAI1_Config+0x16>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035c2:	68d3      	ldr	r3, [r2, #12]
       ||
 80035c4:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035c6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80035ca:	3301      	adds	r3, #1
       ||
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d1ea      	bne.n	80035a6 <RCCEx_PLLSAI1_Config+0x16>
 80035d0:	e00c      	b.n	80035ec <RCCEx_PLLSAI1_Config+0x5c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	0556      	lsls	r6, r2, #21
 80035d6:	d5e6      	bpl.n	80035a6 <RCCEx_PLLSAI1_Config+0x16>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035d8:	4d33      	ldr	r5, [pc, #204]	; (80036a8 <RCCEx_PLLSAI1_Config+0x118>)
 80035da:	6844      	ldr	r4, [r0, #4]
 80035dc:	68ea      	ldr	r2, [r5, #12]
 80035de:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80035e2:	4313      	orrs	r3, r2
 80035e4:	3c01      	subs	r4, #1
 80035e6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80035ea:	60eb      	str	r3, [r5, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 80035ec:	4c2e      	ldr	r4, [pc, #184]	; (80036a8 <RCCEx_PLLSAI1_Config+0x118>)
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035f4:	6023      	str	r3, [r4, #0]
 80035f6:	460f      	mov	r7, r1
 80035f8:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();
 80035fa:	f7fe fabb 	bl	8001b74 <HAL_GetTick>
 80035fe:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003600:	e004      	b.n	800360c <RCCEx_PLLSAI1_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003602:	f7fe fab7 	bl	8001b74 <HAL_GetTick>
 8003606:	1b80      	subs	r0, r0, r6
 8003608:	2802      	cmp	r0, #2
 800360a:	d827      	bhi.n	800365c <RCCEx_PLLSAI1_Config+0xcc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	011a      	lsls	r2, r3, #4
 8003610:	d4f7      	bmi.n	8003602 <RCCEx_PLLSAI1_Config+0x72>
 8003612:	68ab      	ldr	r3, [r5, #8]
 8003614:	0219      	lsls	r1, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8003616:	bb57      	cbnz	r7, 800366e <RCCEx_PLLSAI1_Config+0xde>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003618:	6923      	ldr	r3, [r4, #16]
 800361a:	68ea      	ldr	r2, [r5, #12]
 800361c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003624:	430b      	orrs	r3, r1
 8003626:	0912      	lsrs	r2, r2, #4
 8003628:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800362c:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800362e:	4c1e      	ldr	r4, [pc, #120]	; (80036a8 <RCCEx_PLLSAI1_Config+0x118>)
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003636:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8003638:	f7fe fa9c 	bl	8001b74 <HAL_GetTick>
 800363c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800363e:	e004      	b.n	800364a <RCCEx_PLLSAI1_Config+0xba>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003640:	f7fe fa98 	bl	8001b74 <HAL_GetTick>
 8003644:	1b80      	subs	r0, r0, r6
 8003646:	2802      	cmp	r0, #2
 8003648:	d808      	bhi.n	800365c <RCCEx_PLLSAI1_Config+0xcc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	d5f7      	bpl.n	8003640 <RCCEx_PLLSAI1_Config+0xb0>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003650:	69aa      	ldr	r2, [r5, #24]
 8003652:	6923      	ldr	r3, [r4, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	6123      	str	r3, [r4, #16]
 8003658:	2000      	movs	r0, #0
}
 800365a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status = HAL_TIMEOUT;
 800365c:	2003      	movs	r0, #3
}
 800365e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003660:	6814      	ldr	r4, [r2, #0]
 8003662:	03a5      	lsls	r5, r4, #14
 8003664:	d4b8      	bmi.n	80035d8 <RCCEx_PLLSAI1_Config+0x48>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	0354      	lsls	r4, r2, #13
 800366a:	d59c      	bpl.n	80035a6 <RCCEx_PLLSAI1_Config+0x16>
 800366c:	e7b4      	b.n	80035d8 <RCCEx_PLLSAI1_Config+0x48>
      else if(Divider == DIVIDER_Q_UPDATE)
 800366e:	2f01      	cmp	r7, #1
 8003670:	d00c      	beq.n	800368c <RCCEx_PLLSAI1_Config+0xfc>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003672:	6922      	ldr	r2, [r4, #16]
 8003674:	696b      	ldr	r3, [r5, #20]
 8003676:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800367a:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	430a      	orrs	r2, r1
 8003682:	3b01      	subs	r3, #1
 8003684:	ea42 6243 	orr.w	r2, r2, r3, lsl #25
 8003688:	6122      	str	r2, [r4, #16]
 800368a:	e7d0      	b.n	800362e <RCCEx_PLLSAI1_Config+0x9e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800368c:	6923      	ldr	r3, [r4, #16]
 800368e:	692a      	ldr	r2, [r5, #16]
 8003690:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003694:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003698:	0852      	lsrs	r2, r2, #1
 800369a:	430b      	orrs	r3, r1
 800369c:	3a01      	subs	r2, #1
 800369e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80036a2:	6123      	str	r3, [r4, #16]
 80036a4:	e7c3      	b.n	800362e <RCCEx_PLLSAI1_Config+0x9e>
 80036a6:	bf00      	nop
 80036a8:	40021000 	.word	0x40021000

080036ac <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036ac:	4a3d      	ldr	r2, [pc, #244]	; (80037a4 <RCCEx_PLLSAI2_Config+0xf8>)
{
 80036ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036b0:	68d4      	ldr	r4, [r2, #12]
 80036b2:	6803      	ldr	r3, [r0, #0]
 80036b4:	07a4      	lsls	r4, r4, #30
 80036b6:	d006      	beq.n	80036c6 <RCCEx_PLLSAI2_Config+0x1a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036b8:	68d4      	ldr	r4, [r2, #12]
 80036ba:	f004 0403 	and.w	r4, r4, #3
 80036be:	429c      	cmp	r4, r3
 80036c0:	d00b      	beq.n	80036da <RCCEx_PLLSAI2_Config+0x2e>
 80036c2:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80036c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d011      	beq.n	80036ee <RCCEx_PLLSAI2_Config+0x42>
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d056      	beq.n	800377c <RCCEx_PLLSAI2_Config+0xd0>
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d1f7      	bne.n	80036c2 <RCCEx_PLLSAI2_Config+0x16>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	0797      	lsls	r7, r2, #30
 80036d6:	d5f4      	bpl.n	80036c2 <RCCEx_PLLSAI2_Config+0x16>
 80036d8:	e00c      	b.n	80036f4 <RCCEx_PLLSAI2_Config+0x48>
       ||
 80036da:	2c00      	cmp	r4, #0
 80036dc:	d0f1      	beq.n	80036c2 <RCCEx_PLLSAI2_Config+0x16>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036de:	68d3      	ldr	r3, [r2, #12]
       ||
 80036e0:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036e2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80036e6:	3301      	adds	r3, #1
       ||
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d1ea      	bne.n	80036c2 <RCCEx_PLLSAI2_Config+0x16>
 80036ec:	e00c      	b.n	8003708 <RCCEx_PLLSAI2_Config+0x5c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	0556      	lsls	r6, r2, #21
 80036f2:	d5e6      	bpl.n	80036c2 <RCCEx_PLLSAI2_Config+0x16>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036f4:	4d2b      	ldr	r5, [pc, #172]	; (80037a4 <RCCEx_PLLSAI2_Config+0xf8>)
 80036f6:	6844      	ldr	r4, [r0, #4]
 80036f8:	68ea      	ldr	r2, [r5, #12]
 80036fa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80036fe:	4313      	orrs	r3, r2
 8003700:	3c01      	subs	r4, #1
 8003702:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8003706:	60eb      	str	r3, [r5, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 8003708:	4c26      	ldr	r4, [pc, #152]	; (80037a4 <RCCEx_PLLSAI2_Config+0xf8>)
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003710:	6023      	str	r3, [r4, #0]
 8003712:	460f      	mov	r7, r1
 8003714:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();
 8003716:	f7fe fa2d 	bl	8001b74 <HAL_GetTick>
 800371a:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800371c:	e004      	b.n	8003728 <RCCEx_PLLSAI2_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800371e:	f7fe fa29 	bl	8001b74 <HAL_GetTick>
 8003722:	1b80      	subs	r0, r0, r6
 8003724:	2802      	cmp	r0, #2
 8003726:	d827      	bhi.n	8003778 <RCCEx_PLLSAI2_Config+0xcc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	009a      	lsls	r2, r3, #2
 800372c:	d4f7      	bmi.n	800371e <RCCEx_PLLSAI2_Config+0x72>
 800372e:	68ab      	ldr	r3, [r5, #8]
 8003730:	0219      	lsls	r1, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8003732:	bb57      	cbnz	r7, 800378a <RCCEx_PLLSAI2_Config+0xde>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003734:	6962      	ldr	r2, [r4, #20]
 8003736:	68eb      	ldr	r3, [r5, #12]
 8003738:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 800373c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003740:	430a      	orrs	r2, r1
 8003742:	091b      	lsrs	r3, r3, #4
 8003744:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8003748:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800374a:	4c16      	ldr	r4, [pc, #88]	; (80037a4 <RCCEx_PLLSAI2_Config+0xf8>)
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003752:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8003754:	f7fe fa0e 	bl	8001b74 <HAL_GetTick>
 8003758:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800375a:	e004      	b.n	8003766 <RCCEx_PLLSAI2_Config+0xba>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800375c:	f7fe fa0a 	bl	8001b74 <HAL_GetTick>
 8003760:	1b80      	subs	r0, r0, r6
 8003762:	2802      	cmp	r0, #2
 8003764:	d808      	bhi.n	8003778 <RCCEx_PLLSAI2_Config+0xcc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	d5f7      	bpl.n	800375c <RCCEx_PLLSAI2_Config+0xb0>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800376c:	696a      	ldr	r2, [r5, #20]
 800376e:	6963      	ldr	r3, [r4, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	6163      	str	r3, [r4, #20]
 8003774:	2000      	movs	r0, #0
}
 8003776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status = HAL_TIMEOUT;
 8003778:	2003      	movs	r0, #3
}
 800377a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800377c:	6814      	ldr	r4, [r2, #0]
 800377e:	03a5      	lsls	r5, r4, #14
 8003780:	d4b8      	bmi.n	80036f4 <RCCEx_PLLSAI2_Config+0x48>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	0354      	lsls	r4, r2, #13
 8003786:	d59c      	bpl.n	80036c2 <RCCEx_PLLSAI2_Config+0x16>
 8003788:	e7b4      	b.n	80036f4 <RCCEx_PLLSAI2_Config+0x48>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800378a:	6963      	ldr	r3, [r4, #20]
 800378c:	692a      	ldr	r2, [r5, #16]
 800378e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003792:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003796:	0852      	lsrs	r2, r2, #1
 8003798:	430b      	orrs	r3, r1
 800379a:	3a01      	subs	r2, #1
 800379c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80037a0:	6163      	str	r3, [r4, #20]
 80037a2:	e7d2      	b.n	800374a <RCCEx_PLLSAI2_Config+0x9e>
 80037a4:	40021000 	.word	0x40021000

080037a8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80037a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037ac:	6803      	ldr	r3, [r0, #0]
 80037ae:	f413 6600 	ands.w	r6, r3, #2048	; 0x800
{
 80037b2:	b083      	sub	sp, #12
 80037b4:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037b6:	d017      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    switch(PeriphClkInit->Sai1ClockSelection)
 80037b8:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80037ba:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80037be:	f000 81bb 	beq.w	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x390>
 80037c2:	f240 81ee 	bls.w	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80037c6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80037ca:	f000 81af 	beq.w	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x384>
 80037ce:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80037d2:	f040 81ec 	bne.w	8003bae <HAL_RCCEx_PeriphCLKConfig+0x406>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037d6:	48c3      	ldr	r0, [pc, #780]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037d8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80037dc:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80037e0:	4311      	orrs	r1, r2
 80037e2:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 80037e6:	2600      	movs	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037e8:	04d8      	lsls	r0, r3, #19
 80037ea:	f140 8100 	bpl.w	80039ee <HAL_RCCEx_PeriphCLKConfig+0x246>
    switch(PeriphClkInit->Sai2ClockSelection)
 80037ee:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80037f0:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80037f4:	f000 8187 	beq.w	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80037f8:	f240 81ca 	bls.w	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80037fc:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8003800:	f000 818d 	beq.w	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003804:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8003808:	f040 80f0 	bne.w	80039ec <HAL_RCCEx_PeriphCLKConfig+0x244>
 800380c:	4637      	mov	r7, r6
    if(ret == HAL_OK)
 800380e:	2f00      	cmp	r7, #0
 8003810:	f040 8183 	bne.w	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x372>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003814:	49b3      	ldr	r1, [pc, #716]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003816:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003818:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800381c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003820:	4302      	orrs	r2, r0
 8003822:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003826:	0399      	lsls	r1, r3, #14
 8003828:	f100 80e5 	bmi.w	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800382c:	07da      	lsls	r2, r3, #31
 800382e:	d508      	bpl.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003830:	49ac      	ldr	r1, [pc, #688]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003832:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003834:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003838:	f022 0203 	bic.w	r2, r2, #3
 800383c:	4302      	orrs	r2, r0
 800383e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003842:	079f      	lsls	r7, r3, #30
 8003844:	d508      	bpl.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003846:	49a7      	ldr	r1, [pc, #668]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003848:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800384a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800384e:	f022 020c 	bic.w	r2, r2, #12
 8003852:	4302      	orrs	r2, r0
 8003854:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003858:	075d      	lsls	r5, r3, #29
 800385a:	d508      	bpl.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800385c:	49a1      	ldr	r1, [pc, #644]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800385e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003860:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003864:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003868:	4302      	orrs	r2, r0
 800386a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800386e:	0718      	lsls	r0, r3, #28
 8003870:	d508      	bpl.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003872:	499c      	ldr	r1, [pc, #624]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003874:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003876:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800387a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800387e:	4302      	orrs	r2, r0
 8003880:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003884:	06d9      	lsls	r1, r3, #27
 8003886:	d508      	bpl.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003888:	4996      	ldr	r1, [pc, #600]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800388a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800388c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003890:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003894:	4302      	orrs	r2, r0
 8003896:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800389a:	069a      	lsls	r2, r3, #26
 800389c:	d508      	bpl.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800389e:	4991      	ldr	r1, [pc, #580]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038a0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80038a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80038a6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80038aa:	4302      	orrs	r2, r0
 80038ac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038b0:	059f      	lsls	r7, r3, #22
 80038b2:	d508      	bpl.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038b4:	498b      	ldr	r1, [pc, #556]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038b6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80038b8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80038bc:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80038c0:	4302      	orrs	r2, r0
 80038c2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038c6:	055d      	lsls	r5, r3, #21
 80038c8:	d508      	bpl.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038ca:	4986      	ldr	r1, [pc, #536]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038cc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80038ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80038d2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80038d6:	4302      	orrs	r2, r0
 80038d8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038dc:	0658      	lsls	r0, r3, #25
 80038de:	d508      	bpl.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038e0:	4980      	ldr	r1, [pc, #512]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038e2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80038e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80038e8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80038ec:	4302      	orrs	r2, r0
 80038ee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038f2:	0619      	lsls	r1, r3, #24
 80038f4:	d508      	bpl.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x160>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038f6:	497b      	ldr	r1, [pc, #492]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80038fa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80038fe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003902:	4302      	orrs	r2, r0
 8003904:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003908:	05da      	lsls	r2, r3, #23
 800390a:	d508      	bpl.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800390c:	4975      	ldr	r1, [pc, #468]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800390e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003910:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003914:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003918:	4302      	orrs	r2, r0
 800391a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800391e:	049f      	lsls	r7, r3, #18
 8003920:	d510      	bpl.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003922:	4970      	ldr	r1, [pc, #448]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003924:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003926:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800392a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800392e:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003930:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003934:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003938:	f000 80ce 	beq.w	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800393c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8003940:	f000 8116 	beq.w	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003944:	031d      	lsls	r5, r3, #12
 8003946:	d510      	bpl.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003948:	4966      	ldr	r1, [pc, #408]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800394a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800394c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003950:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003954:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003956:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800395a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800395e:	f000 80c5 	beq.w	8003aec <HAL_RCCEx_PeriphCLKConfig+0x344>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003962:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8003966:	f000 810b 	beq.w	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800396a:	0358      	lsls	r0, r3, #13
 800396c:	d510      	bpl.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800396e:	495d      	ldr	r1, [pc, #372]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003970:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003972:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003976:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800397a:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800397c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003980:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003984:	f000 80a3 	beq.w	8003ace <HAL_RCCEx_PeriphCLKConfig+0x326>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003988:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800398c:	f000 80e8 	beq.w	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003990:	0459      	lsls	r1, r3, #17
 8003992:	d510      	bpl.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003994:	4853      	ldr	r0, [pc, #332]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003996:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003998:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800399c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039a0:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039a2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039a6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039aa:	f000 80a4 	beq.w	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039ae:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80039b2:	f000 80cc 	beq.w	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039b6:	041a      	lsls	r2, r3, #16
 80039b8:	d508      	bpl.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039ba:	494a      	ldr	r1, [pc, #296]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039bc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80039be:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80039c2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80039c6:	4302      	orrs	r2, r0
 80039c8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039cc:	03db      	lsls	r3, r3, #15
 80039ce:	d509      	bpl.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039d0:	4a44      	ldr	r2, [pc, #272]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039d2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80039d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80039da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039de:	430b      	orrs	r3, r1
 80039e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80039e4:	4630      	mov	r0, r6
 80039e6:	b003      	add	sp, #12
 80039e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ret = HAL_ERROR;
 80039ec:	2601      	movs	r6, #1
 80039ee:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039f0:	0399      	lsls	r1, r3, #14
 80039f2:	f57f af1b 	bpl.w	800382c <HAL_RCCEx_PeriphCLKConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039f6:	4b3b      	ldr	r3, [pc, #236]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039fa:	00d2      	lsls	r2, r2, #3
 80039fc:	d559      	bpl.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x30a>
    FlagStatus       pwrclkchanged = RESET;
 80039fe:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a02:	4d39      	ldr	r5, [pc, #228]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003a04:	682b      	ldr	r3, [r5, #0]
 8003a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003a0c:	f7fe f8b2 	bl	8001b74 <HAL_GetTick>
 8003a10:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a12:	e005      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x278>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a14:	f7fe f8ae 	bl	8001b74 <HAL_GetTick>
 8003a18:	eba0 0009 	sub.w	r0, r0, r9
 8003a1c:	2802      	cmp	r0, #2
 8003a1e:	d854      	bhi.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x322>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a20:	682b      	ldr	r3, [r5, #0]
 8003a22:	05db      	lsls	r3, r3, #23
 8003a24:	d5f6      	bpl.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    if(ret == HAL_OK)
 8003a26:	2f00      	cmp	r7, #0
 8003a28:	f040 80c9 	bne.w	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x416>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a2c:	4b2d      	ldr	r3, [pc, #180]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a2e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003a32:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a36:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8003a3a:	d028      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8003a3c:	428a      	cmp	r2, r1
 8003a3e:	d026      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a40:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a44:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003a48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a50:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a54:	f420 7540 	bic.w	r5, r0, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a5c:	07c0      	lsls	r0, r0, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8003a62:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a66:	d512      	bpl.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a68:	461d      	mov	r5, r3
        tickstart = HAL_GetTick();
 8003a6a:	f7fe f883 	bl	8001b74 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6e:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003a72:	4681      	mov	r9, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a74:	e005      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a76:	f7fe f87d 	bl	8001b74 <HAL_GetTick>
 8003a7a:	eba0 0009 	sub.w	r0, r0, r9
 8003a7e:	42b8      	cmp	r0, r7
 8003a80:	d823      	bhi.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x322>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a82:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003a86:	0799      	lsls	r1, r3, #30
 8003a88:	d5f5      	bpl.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003a8a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a8e:	4a15      	ldr	r2, [pc, #84]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a90:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if(pwrclkchanged == SET)
 8003a9e:	f1b8 0f00 	cmp.w	r8, #0
 8003aa2:	d004      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa4:	4a0f      	ldr	r2, [pc, #60]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003aa6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aac:	6593      	str	r3, [r2, #88]	; 0x58
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	e6bc      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ab4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ab8:	659a      	str	r2, [r3, #88]	; 0x58
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003ac4:	f04f 0801 	mov.w	r8, #1
 8003ac8:	e79b      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        ret = HAL_TIMEOUT;
 8003aca:	2603      	movs	r6, #3
 8003acc:	e7e7      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ace:	68ca      	ldr	r2, [r1, #12]
 8003ad0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003ad4:	60ca      	str	r2, [r1, #12]
 8003ad6:	e75b      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad8:	68ca      	ldr	r2, [r1, #12]
 8003ada:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003ade:	60ca      	str	r2, [r1, #12]
 8003ae0:	e730      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003ae2:	bf00      	nop
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aec:	68ca      	ldr	r2, [r1, #12]
 8003aee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003af2:	60ca      	str	r2, [r1, #12]
 8003af4:	e739      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003af6:	2102      	movs	r1, #2
 8003af8:	1d20      	adds	r0, r4, #4
 8003afa:	f7ff fd49 	bl	8003590 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003afe:	b368      	cbz	r0, 8003b5c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      if(ret != HAL_OK)
 8003b00:	4606      	mov	r6, r0
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	e757      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b06:	2100      	movs	r1, #0
 8003b08:	f104 0020 	add.w	r0, r4, #32
 8003b0c:	f7ff fdce 	bl	80036ac <RCCEx_PLLSAI2_Config>
 8003b10:	4607      	mov	r7, r0
 8003b12:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003b14:	2f00      	cmp	r7, #0
 8003b16:	f43f ae7d 	beq.w	8003814 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003b1a:	463e      	mov	r6, r7
 8003b1c:	e768      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b1e:	4929      	ldr	r1, [pc, #164]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8003b20:	68ca      	ldr	r2, [r1, #12]
 8003b22:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b26:	60ca      	str	r2, [r1, #12]
      break;
 8003b28:	4637      	mov	r7, r6
 8003b2a:	e670      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b2c:	4825      	ldr	r0, [pc, #148]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8003b2e:	68c2      	ldr	r2, [r0, #12]
 8003b30:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b34:	60c2      	str	r2, [r0, #12]
 8003b36:	e64e      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b38:	2100      	movs	r1, #0
 8003b3a:	3020      	adds	r0, #32
 8003b3c:	f7ff fdb6 	bl	80036ac <RCCEx_PLLSAI2_Config>
 8003b40:	4606      	mov	r6, r0
 8003b42:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003b44:	2e00      	cmp	r6, #0
 8003b46:	f47f ae4f 	bne.w	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003b4a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003b4c:	e643      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b4e:	2102      	movs	r1, #2
 8003b50:	f104 0020 	add.w	r0, r4, #32
 8003b54:	f7ff fdaa 	bl	80036ac <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	d1d1      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	e72a      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b60:	2101      	movs	r1, #1
 8003b62:	1d20      	adds	r0, r4, #4
 8003b64:	f7ff fd14 	bl	8003590 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003b68:	b338      	cbz	r0, 8003bba <HAL_RCCEx_PeriphCLKConfig+0x412>
 8003b6a:	4606      	mov	r6, r0
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	e70f      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b70:	2101      	movs	r1, #1
 8003b72:	1d20      	adds	r0, r4, #4
 8003b74:	f7ff fd0c 	bl	8003590 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003b78:	b1e8      	cbz	r0, 8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b7a:	4606      	mov	r6, r0
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	e6e1      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b80:	2101      	movs	r1, #1
 8003b82:	1d20      	adds	r0, r4, #4
 8003b84:	f7ff fd04 	bl	8003590 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003b88:	b198      	cbz	r0, 8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003b8a:	4606      	mov	r6, r0
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	e6ec      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003b90:	2900      	cmp	r1, #0
 8003b92:	f47f af2b 	bne.w	80039ec <HAL_RCCEx_PeriphCLKConfig+0x244>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b96:	1d20      	adds	r0, r4, #4
 8003b98:	f7ff fcfa 	bl	8003590 <RCCEx_PLLSAI1_Config>
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	4607      	mov	r7, r0
      break;
 8003ba0:	e635      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003ba2:	b921      	cbnz	r1, 8003bae <HAL_RCCEx_PeriphCLKConfig+0x406>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ba4:	3004      	adds	r0, #4
 8003ba6:	f7ff fcf3 	bl	8003590 <RCCEx_PLLSAI1_Config>
 8003baa:	4606      	mov	r6, r0
      break;
 8003bac:	e7c9      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      ret = HAL_ERROR;
 8003bae:	2601      	movs	r6, #1
 8003bb0:	e61a      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	e6d9      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003bb6:	6823      	ldr	r3, [r4, #0]
 8003bb8:	e6c4      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	e6e8      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bbe:	463e      	mov	r6, r7
 8003bc0:	e76d      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8003bc2:	bf00      	nop
 8003bc4:	40021000 	.word	0x40021000

08003bc8 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	d06d      	beq.n	8003ca8 <HAL_SPI_Init+0xe0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bcc:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
{
 8003bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bd4:	f1bc 0f00 	cmp.w	ip, #0
 8003bd8:	d059      	beq.n	8003c8e <HAL_SPI_Init+0xc6>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bda:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bdc:	e9c0 3304 	strd	r3, r3, [r0, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003be0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003be4:	2200      	movs	r2, #0
 8003be6:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003be8:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bec:	6282      	str	r2, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d05c      	beq.n	8003cac <HAL_SPI_Init+0xe4>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bf2:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bf4:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003bfc:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bfe:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8003c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c06:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c08:	d948      	bls.n	8003c9c <HAL_SPI_Init+0xd4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c0a:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8003c0e:	d15a      	bne.n	8003cc6 <HAL_SPI_Init+0xfe>
 8003c10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c12:	2700      	movs	r7, #0
 8003c14:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c18:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 8003c1c:	6925      	ldr	r5, [r4, #16]
 8003c1e:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8003c22:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8003c26:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003c2a:	4333      	orrs	r3, r6
 8003c2c:	f005 0502 	and.w	r5, r5, #2
 8003c30:	432b      	orrs	r3, r5
 8003c32:	6965      	ldr	r5, [r4, #20]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c34:	f402 6870 	and.w	r8, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c38:	f005 0501 	and.w	r5, r5, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c3c:	6b62      	ldr	r2, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c3e:	432b      	orrs	r3, r5
 8003c40:	e9d4 6507 	ldrd	r6, r5, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c44:	f002 0208 	and.w	r2, r2, #8
 8003c48:	ea42 0208 	orr.w	r2, r2, r8
 8003c4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c50:	f40e 7e00 	and.w	lr, lr, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c54:	f008 0804 	and.w	r8, r8, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c58:	ea43 030e 	orr.w	r3, r3, lr
 8003c5c:	f006 0638 	and.w	r6, r6, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c60:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c64:	4333      	orrs	r3, r6
 8003c66:	f005 0580 	and.w	r5, r5, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c6a:	f00c 0c10 	and.w	ip, ip, #16
 8003c6e:	ea42 0c0c 	orr.w	ip, r2, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c72:	432b      	orrs	r3, r5
 8003c74:	4303      	orrs	r3, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c76:	2200      	movs	r2, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c78:	ea4c 0707 	orr.w	r7, ip, r7
  hspi->State     = HAL_SPI_STATE_READY;
 8003c7c:	2501      	movs	r5, #1
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c7e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003c80:	4610      	mov	r0, r2
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c82:	604f      	str	r7, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c84:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c86:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
}
 8003c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c8e:	6843      	ldr	r3, [r0, #4]
 8003c90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c94:	d0a4      	beq.n	8003be0 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c96:	f8c0 c01c 	str.w	ip, [r0, #28]
 8003c9a:	e7a1      	b.n	8003be0 <HAL_SPI_Init+0x18>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c9c:	d00d      	beq.n	8003cba <HAL_SPI_Init+0xf2>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c9e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	62a0      	str	r0, [r4, #40]	; 0x28
 8003ca6:	e7b7      	b.n	8003c18 <HAL_SPI_Init+0x50>
    return HAL_ERROR;
 8003ca8:	2001      	movs	r0, #1
}
 8003caa:	4770      	bx	lr
    hspi->Lock = HAL_UNLOCKED;
 8003cac:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003cb0:	f7fd fdd0 	bl	8001854 <HAL_SPI_MspInit>
 8003cb4:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8003cb8:	e79b      	b.n	8003bf2 <HAL_SPI_Init+0x2a>
 8003cba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cbc:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8003cc0:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 8003cc4:	e7a8      	b.n	8003c18 <HAL_SPI_Init+0x50>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cc6:	2700      	movs	r7, #0
 8003cc8:	e7eb      	b.n	8003ca2 <HAL_SPI_Init+0xda>
 8003cca:	bf00      	nop

08003ccc <HAL_SPI_ErrorCallback>:
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop

08003cd0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003cd0:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8003cd2:	6801      	ldr	r1, [r0, #0]
 8003cd4:	684d      	ldr	r5, [r1, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8003cd6:	688b      	ldr	r3, [r1, #8]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003cd8:	f3c3 1480 	ubfx	r4, r3, #6, #1
{
 8003cdc:	b085      	sub	sp, #20
 8003cde:	4602      	mov	r2, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ce0:	b954      	cbnz	r4, 8003cf8 <HAL_SPI_IRQHandler+0x28>
 8003ce2:	f013 0f01 	tst.w	r3, #1
 8003ce6:	d007      	beq.n	8003cf8 <HAL_SPI_IRQHandler+0x28>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ce8:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003cec:	d004      	beq.n	8003cf8 <HAL_SPI_IRQHandler+0x28>
  {
    hspi->RxISR(hspi);
 8003cee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
  }
}
 8003cf0:	b005      	add	sp, #20
 8003cf2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    hspi->TxISR(hspi);
 8003cf6:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003cf8:	0798      	lsls	r0, r3, #30
 8003cfa:	d507      	bpl.n	8003d0c <HAL_SPI_IRQHandler+0x3c>
 8003cfc:	0628      	lsls	r0, r5, #24
 8003cfe:	d505      	bpl.n	8003d0c <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 8003d00:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003d02:	4610      	mov	r0, r2
}
 8003d04:	b005      	add	sp, #20
 8003d06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    hspi->TxISR(hspi);
 8003d0a:	4718      	bx	r3
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d0c:	f3c3 1040 	ubfx	r0, r3, #5, #1
 8003d10:	2800      	cmp	r0, #0
 8003d12:	d13d      	bne.n	8003d90 <HAL_SPI_IRQHandler+0xc0>
 8003d14:	2c00      	cmp	r4, #0
 8003d16:	d04e      	beq.n	8003db6 <HAL_SPI_IRQHandler+0xe6>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d18:	06ac      	lsls	r4, r5, #26
 8003d1a:	d537      	bpl.n	8003d8c <HAL_SPI_IRQHandler+0xbc>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003d1c:	f892 405d 	ldrb.w	r4, [r2, #93]	; 0x5d
 8003d20:	2c03      	cmp	r4, #3
 8003d22:	d05a      	beq.n	8003dda <HAL_SPI_IRQHandler+0x10a>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d24:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8003d26:	f044 0404 	orr.w	r4, r4, #4
 8003d2a:	6614      	str	r4, [r2, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d2c:	9000      	str	r0, [sp, #0]
 8003d2e:	68c8      	ldr	r0, [r1, #12]
 8003d30:	9000      	str	r0, [sp, #0]
 8003d32:	6888      	ldr	r0, [r1, #8]
 8003d34:	9000      	str	r0, [sp, #0]
 8003d36:	9800      	ldr	r0, [sp, #0]
 8003d38:	f3c3 2300 	ubfx	r3, r3, #8, #1
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d13e      	bne.n	8003dbe <HAL_SPI_IRQHandler+0xee>
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d40:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8003d42:	b31b      	cbz	r3, 8003d8c <HAL_SPI_IRQHandler+0xbc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003d44:	684b      	ldr	r3, [r1, #4]
 8003d46:	4614      	mov	r4, r2
 8003d48:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
      hspi->State = HAL_SPI_STATE_READY;
 8003d4c:	2201      	movs	r2, #1
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003d4e:	07ad      	lsls	r5, r5, #30
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003d50:	604b      	str	r3, [r1, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003d52:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003d56:	d048      	beq.n	8003dea <HAL_SPI_IRQHandler+0x11a>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003d58:	684b      	ldr	r3, [r1, #4]
        if (hspi->hdmarx != NULL)
 8003d5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003d5c:	f023 0303 	bic.w	r3, r3, #3
 8003d60:	604b      	str	r3, [r1, #4]
        if (hspi->hdmarx != NULL)
 8003d62:	b140      	cbz	r0, 8003d76 <HAL_SPI_IRQHandler+0xa6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d64:	4b2a      	ldr	r3, [pc, #168]	; (8003e10 <HAL_SPI_IRQHandler+0x140>)
 8003d66:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d68:	f7fe fe16 	bl	8002998 <HAL_DMA_Abort_IT>
 8003d6c:	b118      	cbz	r0, 8003d76 <HAL_SPI_IRQHandler+0xa6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d6e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d74:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003d76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d78:	b140      	cbz	r0, 8003d8c <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d7a:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <HAL_SPI_IRQHandler+0x140>)
 8003d7c:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003d7e:	f7fe fe0b 	bl	8002998 <HAL_DMA_Abort_IT>
 8003d82:	b118      	cbz	r0, 8003d8c <HAL_SPI_IRQHandler+0xbc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d84:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d8a:	6623      	str	r3, [r4, #96]	; 0x60
}
 8003d8c:	b005      	add	sp, #20
 8003d8e:	bd30      	pop	{r4, r5, pc}
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003d90:	06a8      	lsls	r0, r5, #26
 8003d92:	d5fb      	bpl.n	8003d8c <HAL_SPI_IRQHandler+0xbc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003d94:	b9ec      	cbnz	r4, 8003dd2 <HAL_SPI_IRQHandler+0x102>
 8003d96:	f3c3 2300 	ubfx	r3, r3, #8, #1
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d9a:	6e10      	ldr	r0, [r2, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d9c:	2400      	movs	r4, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d9e:	f040 0001 	orr.w	r0, r0, #1
 8003da2:	6610      	str	r0, [r2, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003da4:	9402      	str	r4, [sp, #8]
 8003da6:	6888      	ldr	r0, [r1, #8]
 8003da8:	9002      	str	r0, [sp, #8]
 8003daa:	6808      	ldr	r0, [r1, #0]
 8003dac:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8003db0:	6008      	str	r0, [r1, #0]
 8003db2:	9802      	ldr	r0, [sp, #8]
 8003db4:	e7c2      	b.n	8003d3c <HAL_SPI_IRQHandler+0x6c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003db6:	05dc      	lsls	r4, r3, #23
 8003db8:	d5e8      	bpl.n	8003d8c <HAL_SPI_IRQHandler+0xbc>
 8003dba:	06ab      	lsls	r3, r5, #26
 8003dbc:	d5e6      	bpl.n	8003d8c <HAL_SPI_IRQHandler+0xbc>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003dbe:	6e13      	ldr	r3, [r2, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003dc0:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003dc2:	f043 0308 	orr.w	r3, r3, #8
 8003dc6:	6613      	str	r3, [r2, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003dc8:	9003      	str	r0, [sp, #12]
 8003dca:	688b      	ldr	r3, [r1, #8]
 8003dcc:	9303      	str	r3, [sp, #12]
 8003dce:	9b03      	ldr	r3, [sp, #12]
 8003dd0:	e7b6      	b.n	8003d40 <HAL_SPI_IRQHandler+0x70>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003dd2:	f892 005d 	ldrb.w	r0, [r2, #93]	; 0x5d
 8003dd6:	2803      	cmp	r0, #3
 8003dd8:	d10b      	bne.n	8003df2 <HAL_SPI_IRQHandler+0x122>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dda:	2300      	movs	r3, #0
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	68cb      	ldr	r3, [r1, #12]
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	688b      	ldr	r3, [r1, #8]
 8003de4:	9301      	str	r3, [sp, #4]
 8003de6:	9b01      	ldr	r3, [sp, #4]
        return;
 8003de8:	e7d0      	b.n	8003d8c <HAL_SPI_IRQHandler+0xbc>
        HAL_SPI_ErrorCallback(hspi);
 8003dea:	4620      	mov	r0, r4
 8003dec:	f7ff ff6e 	bl	8003ccc <HAL_SPI_ErrorCallback>
 8003df0:	e7cc      	b.n	8003d8c <HAL_SPI_IRQHandler+0xbc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003df2:	6e10      	ldr	r0, [r2, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003df4:	2400      	movs	r4, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003df6:	f040 0004 	orr.w	r0, r0, #4
 8003dfa:	6610      	str	r0, [r2, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dfc:	9400      	str	r4, [sp, #0]
 8003dfe:	68c8      	ldr	r0, [r1, #12]
 8003e00:	9000      	str	r0, [sp, #0]
 8003e02:	6888      	ldr	r0, [r1, #8]
 8003e04:	9000      	str	r0, [sp, #0]
 8003e06:	f3c3 2300 	ubfx	r3, r3, #8, #1
 8003e0a:	9800      	ldr	r0, [sp, #0]
 8003e0c:	e7c5      	b.n	8003d9a <HAL_SPI_IRQHandler+0xca>
 8003e0e:	bf00      	nop
 8003e10:	08003e15 	.word	0x08003e15

08003e14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e14:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e16:	6a83      	ldr	r3, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e1e:	4618      	mov	r0, r3
  hspi->TxXferCount = 0U;
 8003e20:	87da      	strh	r2, [r3, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8003e22:	f7ff ff53 	bl	8003ccc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e26:	bd08      	pop	{r3, pc}

08003e28 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	f000 8086 	beq.w	8003f3a <HAL_TIM_Base_Init+0x112>
{
 8003e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e30:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e34:	4604      	mov	r4, r0
 8003e36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003e3a:	b383      	cbz	r3, 8003e9e <HAL_TIM_Base_Init+0x76>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e3c:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e3e:	4e48      	ldr	r6, [pc, #288]	; (8003f60 <HAL_TIM_Base_Init+0x138>)
 8003e40:	69a5      	ldr	r5, [r4, #24]
 8003e42:	68e0      	ldr	r0, [r4, #12]
 8003e44:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8003e46:	2302      	movs	r3, #2
 8003e48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e4c:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8003e4e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e50:	d075      	beq.n	8003f3e <HAL_TIM_Base_Init+0x116>
 8003e52:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003e56:	d056      	beq.n	8003f06 <HAL_TIM_Base_Init+0xde>
 8003e58:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8003e5c:	42b2      	cmp	r2, r6
 8003e5e:	d023      	beq.n	8003ea8 <HAL_TIM_Base_Init+0x80>
 8003e60:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e64:	42b2      	cmp	r2, r6
 8003e66:	d01f      	beq.n	8003ea8 <HAL_TIM_Base_Init+0x80>
 8003e68:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e6c:	42b2      	cmp	r2, r6
 8003e6e:	d01b      	beq.n	8003ea8 <HAL_TIM_Base_Init+0x80>
 8003e70:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 8003e74:	42b2      	cmp	r2, r6
 8003e76:	d017      	beq.n	8003ea8 <HAL_TIM_Base_Init+0x80>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e78:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8003e7c:	42b2      	cmp	r2, r6
 8003e7e:	d06d      	beq.n	8003f5c <HAL_TIM_Base_Init+0x134>
 8003e80:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e84:	42b2      	cmp	r2, r6
 8003e86:	d069      	beq.n	8003f5c <HAL_TIM_Base_Init+0x134>
 8003e88:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e8c:	42b2      	cmp	r2, r6
 8003e8e:	d065      	beq.n	8003f5c <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e94:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 8003e96:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e98:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e9a:	6291      	str	r1, [r2, #40]	; 0x28
 8003e9c:	e017      	b.n	8003ece <HAL_TIM_Base_Init+0xa6>
    htim->Lock = HAL_UNLOCKED;
 8003e9e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003ea2:	f7fd fd15 	bl	80018d0 <HAL_TIM_Base_MspInit>
 8003ea6:	e7c9      	b.n	8003e3c <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003ea8:	68a6      	ldr	r6, [r4, #8]

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eaa:	4f2e      	ldr	r7, [pc, #184]	; (8003f64 <HAL_TIM_Base_Init+0x13c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003eb0:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eb2:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eb8:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ebe:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ec0:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 8003ec2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ec4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ec6:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ec8:	d12b      	bne.n	8003f22 <HAL_TIM_Base_Init+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eca:	6963      	ldr	r3, [r4, #20]
 8003ecc:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8003ed2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ed4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003edc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003ee0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003ee4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003ef4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ef8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003efc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8003f06:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f08:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f0e:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f14:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f1a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003f1c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f1e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f20:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f22:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <HAL_TIM_Base_Init+0x140>)
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d0d0      	beq.n	8003eca <HAL_TIM_Base_Init+0xa2>
 8003f28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d0cc      	beq.n	8003eca <HAL_TIM_Base_Init+0xa2>
 8003f30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d1ca      	bne.n	8003ece <HAL_TIM_Base_Init+0xa6>
 8003f38:	e7c7      	b.n	8003eca <HAL_TIM_Base_Init+0xa2>
    return HAL_ERROR;
 8003f3a:	2001      	movs	r0, #1
}
 8003f3c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003f3e:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f40:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f46:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f52:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003f54:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f56:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f58:	6291      	str	r1, [r2, #40]	; 0x28
 8003f5a:	e7b6      	b.n	8003eca <HAL_TIM_Base_Init+0xa2>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f5c:	6926      	ldr	r6, [r4, #16]
 8003f5e:	e7f3      	b.n	8003f48 <HAL_TIM_Base_Init+0x120>
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40013400 	.word	0x40013400
 8003f68:	40014000 	.word	0x40014000

08003f6c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003f6c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d001      	beq.n	8003f78 <HAL_TIM_Base_Start+0xc>
    return HAL_ERROR;
 8003f74:	2001      	movs	r0, #1
 8003f76:	4770      	bx	lr
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f78:	6803      	ldr	r3, [r0, #0]
 8003f7a:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f7e:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8003f80:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f84:	d01c      	beq.n	8003fc0 <HAL_TIM_Base_Start+0x54>
 8003f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8a:	d019      	beq.n	8003fc0 <HAL_TIM_Base_Start+0x54>
 8003f8c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d015      	beq.n	8003fc0 <HAL_TIM_Base_Start+0x54>
 8003f94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d011      	beq.n	8003fc0 <HAL_TIM_Base_Start+0x54>
 8003f9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00d      	beq.n	8003fc0 <HAL_TIM_Base_Start+0x54>
 8003fa4:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d009      	beq.n	8003fc0 <HAL_TIM_Base_Start+0x54>
 8003fac:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d005      	beq.n	8003fc0 <HAL_TIM_Base_Start+0x54>
    __HAL_TIM_ENABLE(htim);
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fc0:	6899      	ldr	r1, [r3, #8]
 8003fc2:	4a05      	ldr	r2, [pc, #20]	; (8003fd8 <HAL_TIM_Base_Start+0x6c>)
 8003fc4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc6:	2a06      	cmp	r2, #6
 8003fc8:	d002      	beq.n	8003fd0 <HAL_TIM_Base_Start+0x64>
 8003fca:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003fce:	d1f1      	bne.n	8003fb4 <HAL_TIM_Base_Start+0x48>
  return HAL_OK;
 8003fd0:	2000      	movs	r0, #0
}
 8003fd2:	4770      	bx	lr
 8003fd4:	40012c00 	.word	0x40012c00
 8003fd8:	00010007 	.word	0x00010007

08003fdc <HAL_TIM_PWM_MspInit>:
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop

08003fe0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	f000 8086 	beq.w	80040f2 <HAL_TIM_PWM_Init+0x112>
{
 8003fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003fec:	4604      	mov	r4, r0
 8003fee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003ff2:	b383      	cbz	r3, 8004056 <HAL_TIM_PWM_Init+0x76>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff4:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff6:	4e48      	ldr	r6, [pc, #288]	; (8004118 <HAL_TIM_PWM_Init+0x138>)
 8003ff8:	69a5      	ldr	r5, [r4, #24]
 8003ffa:	68e0      	ldr	r0, [r4, #12]
 8003ffc:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffe:	2302      	movs	r3, #2
 8004000:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004004:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8004006:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004008:	d075      	beq.n	80040f6 <HAL_TIM_PWM_Init+0x116>
 800400a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800400e:	d056      	beq.n	80040be <HAL_TIM_PWM_Init+0xde>
 8004010:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8004014:	42b2      	cmp	r2, r6
 8004016:	d023      	beq.n	8004060 <HAL_TIM_PWM_Init+0x80>
 8004018:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800401c:	42b2      	cmp	r2, r6
 800401e:	d01f      	beq.n	8004060 <HAL_TIM_PWM_Init+0x80>
 8004020:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004024:	42b2      	cmp	r2, r6
 8004026:	d01b      	beq.n	8004060 <HAL_TIM_PWM_Init+0x80>
 8004028:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 800402c:	42b2      	cmp	r2, r6
 800402e:	d017      	beq.n	8004060 <HAL_TIM_PWM_Init+0x80>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004030:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8004034:	42b2      	cmp	r2, r6
 8004036:	d06d      	beq.n	8004114 <HAL_TIM_PWM_Init+0x134>
 8004038:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800403c:	42b2      	cmp	r2, r6
 800403e:	d069      	beq.n	8004114 <HAL_TIM_PWM_Init+0x134>
 8004040:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004044:	42b2      	cmp	r2, r6
 8004046:	d065      	beq.n	8004114 <HAL_TIM_PWM_Init+0x134>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800404c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800404e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004050:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004052:	6291      	str	r1, [r2, #40]	; 0x28
 8004054:	e017      	b.n	8004086 <HAL_TIM_PWM_Init+0xa6>
    htim->Lock = HAL_UNLOCKED;
 8004056:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800405a:	f7ff ffbf 	bl	8003fdc <HAL_TIM_PWM_MspInit>
 800405e:	e7c9      	b.n	8003ff4 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004060:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004062:	4f2e      	ldr	r7, [pc, #184]	; (800411c <HAL_TIM_PWM_Init+0x13c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004068:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800406a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800406c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004070:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004076:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004078:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 800407a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800407c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800407e:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004080:	d12b      	bne.n	80040da <HAL_TIM_PWM_Init+0xfa>
    TIMx->RCR = Structure->RepetitionCounter;
 8004082:	6963      	ldr	r3, [r4, #20]
 8004084:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004086:	2301      	movs	r3, #1
 8004088:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 800408a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800408c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004090:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004094:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004098:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800409c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80040a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80040ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040b0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80040b4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80040b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80040bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 80040be:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c0:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80040c6:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80040c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040cc:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040d2:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80040d4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040d6:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80040d8:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040da:	4b11      	ldr	r3, [pc, #68]	; (8004120 <HAL_TIM_PWM_Init+0x140>)
 80040dc:	429a      	cmp	r2, r3
 80040de:	d0d0      	beq.n	8004082 <HAL_TIM_PWM_Init+0xa2>
 80040e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d0cc      	beq.n	8004082 <HAL_TIM_PWM_Init+0xa2>
 80040e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d1ca      	bne.n	8004086 <HAL_TIM_PWM_Init+0xa6>
 80040f0:	e7c7      	b.n	8004082 <HAL_TIM_PWM_Init+0xa2>
    return HAL_ERROR;
 80040f2:	2001      	movs	r0, #1
}
 80040f4:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80040f6:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040f8:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80040fe:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8004100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004104:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800410a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800410c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800410e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004110:	6291      	str	r1, [r2, #40]	; 0x28
 8004112:	e7b6      	b.n	8004082 <HAL_TIM_PWM_Init+0xa2>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004114:	6926      	ldr	r6, [r4, #16]
 8004116:	e7f3      	b.n	8004100 <HAL_TIM_PWM_Init+0x120>
 8004118:	40012c00 	.word	0x40012c00
 800411c:	40013400 	.word	0x40013400
 8004120:	40014000 	.word	0x40014000

08004124 <HAL_TIM_PWM_Start>:
 8004124:	2900      	cmp	r1, #0
 8004126:	d150      	bne.n	80041ca <HAL_TIM_PWM_Start+0xa6>
 8004128:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800412c:	2b01      	cmp	r3, #1
 800412e:	d160      	bne.n	80041f2 <HAL_TIM_PWM_Start+0xce>
 8004130:	2302      	movs	r3, #2
 8004132:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8004136:	6803      	ldr	r3, [r0, #0]
 8004138:	2201      	movs	r2, #1
 800413a:	6a18      	ldr	r0, [r3, #32]
 800413c:	f001 011f 	and.w	r1, r1, #31
 8004140:	fa02 f101 	lsl.w	r1, r2, r1
 8004144:	ea20 0001 	bic.w	r0, r0, r1
 8004148:	b410      	push	{r4}
 800414a:	6218      	str	r0, [r3, #32]
 800414c:	6a1a      	ldr	r2, [r3, #32]
 800414e:	4c3c      	ldr	r4, [pc, #240]	; (8004240 <HAL_TIM_PWM_Start+0x11c>)
 8004150:	4311      	orrs	r1, r2
 8004152:	42a3      	cmp	r3, r4
 8004154:	6219      	str	r1, [r3, #32]
 8004156:	d05a      	beq.n	800420e <HAL_TIM_PWM_Start+0xea>
 8004158:	4a3a      	ldr	r2, [pc, #232]	; (8004244 <HAL_TIM_PWM_Start+0x120>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00b      	beq.n	8004176 <HAL_TIM_PWM_Start+0x52>
 800415e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004162:	4293      	cmp	r3, r2
 8004164:	d007      	beq.n	8004176 <HAL_TIM_PWM_Start+0x52>
 8004166:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800416a:	4293      	cmp	r3, r2
 800416c:	d003      	beq.n	8004176 <HAL_TIM_PWM_Start+0x52>
 800416e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004172:	4293      	cmp	r3, r2
 8004174:	d103      	bne.n	800417e <HAL_TIM_PWM_Start+0x5a>
 8004176:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004178:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800417c:	645a      	str	r2, [r3, #68]	; 0x44
 800417e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004182:	d012      	beq.n	80041aa <HAL_TIM_PWM_Start+0x86>
 8004184:	4a30      	ldr	r2, [pc, #192]	; (8004248 <HAL_TIM_PWM_Start+0x124>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00f      	beq.n	80041aa <HAL_TIM_PWM_Start+0x86>
 800418a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800418e:	4293      	cmp	r3, r2
 8004190:	d00b      	beq.n	80041aa <HAL_TIM_PWM_Start+0x86>
 8004192:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004196:	4293      	cmp	r3, r2
 8004198:	d007      	beq.n	80041aa <HAL_TIM_PWM_Start+0x86>
 800419a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800419e:	4293      	cmp	r3, r2
 80041a0:	d003      	beq.n	80041aa <HAL_TIM_PWM_Start+0x86>
 80041a2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d107      	bne.n	80041ba <HAL_TIM_PWM_Start+0x96>
 80041aa:	6899      	ldr	r1, [r3, #8]
 80041ac:	4a27      	ldr	r2, [pc, #156]	; (800424c <HAL_TIM_PWM_Start+0x128>)
 80041ae:	400a      	ands	r2, r1
 80041b0:	2a06      	cmp	r2, #6
 80041b2:	d020      	beq.n	80041f6 <HAL_TIM_PWM_Start+0xd2>
 80041b4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80041b8:	d01d      	beq.n	80041f6 <HAL_TIM_PWM_Start+0xd2>
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041c0:	f042 0201 	orr.w	r2, r2, #1
 80041c4:	2000      	movs	r0, #0
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	4770      	bx	lr
 80041ca:	2904      	cmp	r1, #4
 80041cc:	d017      	beq.n	80041fe <HAL_TIM_PWM_Start+0xda>
 80041ce:	2908      	cmp	r1, #8
 80041d0:	d022      	beq.n	8004218 <HAL_TIM_PWM_Start+0xf4>
 80041d2:	290c      	cmp	r1, #12
 80041d4:	d009      	beq.n	80041ea <HAL_TIM_PWM_Start+0xc6>
 80041d6:	2910      	cmp	r1, #16
 80041d8:	d02a      	beq.n	8004230 <HAL_TIM_PWM_Start+0x10c>
 80041da:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d107      	bne.n	80041f2 <HAL_TIM_PWM_Start+0xce>
 80041e2:	2302      	movs	r3, #2
 80041e4:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 80041e8:	e7a5      	b.n	8004136 <HAL_TIM_PWM_Start+0x12>
 80041ea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d01a      	beq.n	8004228 <HAL_TIM_PWM_Start+0x104>
 80041f2:	2001      	movs	r0, #1
 80041f4:	4770      	bx	lr
 80041f6:	2000      	movs	r0, #0
 80041f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8004202:	2b01      	cmp	r3, #1
 8004204:	d1f5      	bne.n	80041f2 <HAL_TIM_PWM_Start+0xce>
 8004206:	2302      	movs	r3, #2
 8004208:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800420c:	e793      	b.n	8004136 <HAL_TIM_PWM_Start+0x12>
 800420e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004210:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004214:	645a      	str	r2, [r3, #68]	; 0x44
 8004216:	e7c8      	b.n	80041aa <HAL_TIM_PWM_Start+0x86>
 8004218:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800421c:	2b01      	cmp	r3, #1
 800421e:	d1e8      	bne.n	80041f2 <HAL_TIM_PWM_Start+0xce>
 8004220:	2302      	movs	r3, #2
 8004222:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8004226:	e786      	b.n	8004136 <HAL_TIM_PWM_Start+0x12>
 8004228:	2302      	movs	r3, #2
 800422a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800422e:	e782      	b.n	8004136 <HAL_TIM_PWM_Start+0x12>
 8004230:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8004234:	2b01      	cmp	r3, #1
 8004236:	d1dc      	bne.n	80041f2 <HAL_TIM_PWM_Start+0xce>
 8004238:	2302      	movs	r3, #2
 800423a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 800423e:	e77a      	b.n	8004136 <HAL_TIM_PWM_Start+0x12>
 8004240:	40012c00 	.word	0x40012c00
 8004244:	40013400 	.word	0x40013400
 8004248:	40000400 	.word	0x40000400
 800424c:	00010007 	.word	0x00010007

08004250 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004250:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004254:	2b01      	cmp	r3, #1
 8004256:	f000 81c1 	beq.w	80045dc <HAL_TIM_PWM_ConfigChannel+0x38c>
 800425a:	2301      	movs	r3, #1
{
 800425c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 800425e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004262:	2a14      	cmp	r2, #20
 8004264:	d854      	bhi.n	8004310 <HAL_TIM_PWM_ConfigChannel+0xc0>
 8004266:	e8df f012 	tbh	[pc, r2, lsl #1]
 800426a:	0015      	.short	0x0015
 800426c:	00530053 	.word	0x00530053
 8004270:	009e0053 	.word	0x009e0053
 8004274:	00530053 	.word	0x00530053
 8004278:	01730053 	.word	0x01730053
 800427c:	00530053 	.word	0x00530053
 8004280:	00e70053 	.word	0x00e70053
 8004284:	00530053 	.word	0x00530053
 8004288:	012c0053 	.word	0x012c0053
 800428c:	00530053 	.word	0x00530053
 8004290:	00590053 	.word	0x00590053
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004294:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004296:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800429a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800429c:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800429e:	4eab      	ldr	r6, [pc, #684]	; (800454c <HAL_TIM_PWM_ConfigChannel+0x2fc>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042a0:	f025 0501 	bic.w	r5, r5, #1
 80042a4:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80042a6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80042a8:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80042aa:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042ac:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 80042b0:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042b4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042b8:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 80042ba:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 80042be:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042c2:	d008      	beq.n	80042d6 <HAL_TIM_PWM_ConfigChannel+0x86>
 80042c4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80042c8:	42b3      	cmp	r3, r6
 80042ca:	d004      	beq.n	80042d6 <HAL_TIM_PWM_ConfigChannel+0x86>
 80042cc:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80042d0:	42b3      	cmp	r3, r6
 80042d2:	f040 8195 	bne.w	8004600 <HAL_TIM_PWM_ConfigChannel+0x3b0>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042d6:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80042d8:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80042dc:	4332      	orrs	r2, r6
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042de:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042e2:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80042e6:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 80042e8:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80042ec:	4335      	orrs	r5, r6

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042ee:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80042f0:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80042f2:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80042f4:	635e      	str	r6, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042f8:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042fa:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042fc:	f044 0408 	orr.w	r4, r4, #8
 8004300:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004302:	6999      	ldr	r1, [r3, #24]
 8004304:	f021 0104 	bic.w	r1, r1, #4
 8004308:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800430a:	699a      	ldr	r2, [r3, #24]
 800430c:	432a      	orrs	r2, r5
 800430e:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004310:	2300      	movs	r3, #0
 8004312:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004316:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004318:	4618      	mov	r0, r3
}
 800431a:	4770      	bx	lr
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800431c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800431e:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004322:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004324:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004326:	4e89      	ldr	r6, [pc, #548]	; (800454c <HAL_TIM_PWM_ConfigChannel+0x2fc>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004328:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 800432c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800432e:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004330:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8004332:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004334:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004338:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800433c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004340:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004342:	ea44 540c 	orr.w	r4, r4, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004346:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800434a:	d00f      	beq.n	800436c <HAL_TIM_PWM_ConfigChannel+0x11c>
 800434c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004350:	42b3      	cmp	r3, r6
 8004352:	d00b      	beq.n	800436c <HAL_TIM_PWM_ConfigChannel+0x11c>
 8004354:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8004358:	42b3      	cmp	r3, r6
 800435a:	d007      	beq.n	800436c <HAL_TIM_PWM_ConfigChannel+0x11c>
 800435c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004360:	42b3      	cmp	r3, r6
 8004362:	d003      	beq.n	800436c <HAL_TIM_PWM_ConfigChannel+0x11c>
 8004364:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004368:	42b3      	cmp	r3, r6
 800436a:	d104      	bne.n	8004376 <HAL_TIM_PWM_ConfigChannel+0x126>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800436c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800436e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004372:	ea45 2586 	orr.w	r5, r5, r6, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004376:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004378:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800437a:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800437c:	65de      	str	r6, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437e:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004380:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004382:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004384:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8004388:	655c      	str	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800438a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800438c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004390:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004392:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004394:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004398:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 800439a:	2300      	movs	r3, #0
 800439c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80043a0:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80043a2:	4618      	mov	r0, r3
}
 80043a4:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043a6:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043a8:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ac:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043ae:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043b0:	4e66      	ldr	r6, [pc, #408]	; (800454c <HAL_TIM_PWM_ConfigChannel+0x2fc>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b2:	f025 0510 	bic.w	r5, r5, #16
 80043b6:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80043b8:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80043ba:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80043bc:	699a      	ldr	r2, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043be:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 80043c2:	f024 0420 	bic.w	r4, r4, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043c6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043ca:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043cc:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043d0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043d4:	f000 8104 	beq.w	80045e0 <HAL_TIM_PWM_ConfigChannel+0x390>
 80043d8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80043dc:	42b3      	cmp	r3, r6
 80043de:	f000 80ff 	beq.w	80045e0 <HAL_TIM_PWM_ConfigChannel+0x390>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e2:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80043e6:	42b3      	cmp	r3, r6
 80043e8:	d007      	beq.n	80043fa <HAL_TIM_PWM_ConfigChannel+0x1aa>
 80043ea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80043ee:	42b3      	cmp	r3, r6
 80043f0:	d003      	beq.n	80043fa <HAL_TIM_PWM_ConfigChannel+0x1aa>
 80043f2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80043f6:	42b3      	cmp	r3, r6
 80043f8:	d106      	bne.n	8004408 <HAL_TIM_PWM_ConfigChannel+0x1b8>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043fa:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043fe:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004402:	433e      	orrs	r6, r7
 8004404:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8004408:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800440a:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800440c:	619a      	str	r2, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800440e:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004410:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004412:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004414:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004416:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800441a:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800441c:	6999      	ldr	r1, [r3, #24]
 800441e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004422:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800442a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800442c:	2300      	movs	r3, #0
 800442e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004432:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004434:	4618      	mov	r0, r3
}
 8004436:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004438:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800443a:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800443e:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004440:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004442:	4e42      	ldr	r6, [pc, #264]	; (800454c <HAL_TIM_PWM_ConfigChannel+0x2fc>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004444:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8004448:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800444a:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800444c:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800444e:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004450:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8004454:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004458:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445c:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800445e:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004462:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004466:	d00f      	beq.n	8004488 <HAL_TIM_PWM_ConfigChannel+0x238>
 8004468:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800446c:	42b3      	cmp	r3, r6
 800446e:	d00b      	beq.n	8004488 <HAL_TIM_PWM_ConfigChannel+0x238>
 8004470:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8004474:	42b3      	cmp	r3, r6
 8004476:	d007      	beq.n	8004488 <HAL_TIM_PWM_ConfigChannel+0x238>
 8004478:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800447c:	42b3      	cmp	r3, r6
 800447e:	d003      	beq.n	8004488 <HAL_TIM_PWM_ConfigChannel+0x238>
 8004480:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004484:	42b3      	cmp	r3, r6
 8004486:	d104      	bne.n	8004492 <HAL_TIM_PWM_ConfigChannel+0x242>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004488:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800448a:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800448e:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 8004492:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004494:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004496:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004498:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800449a:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800449c:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800449e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044a0:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80044a4:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044a6:	69d9      	ldr	r1, [r3, #28]
 80044a8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80044ac:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ae:	69da      	ldr	r2, [r3, #28]
 80044b0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80044b4:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80044b6:	2300      	movs	r3, #0
 80044b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80044bc:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80044be:	4618      	mov	r0, r3
}
 80044c0:	4770      	bx	lr
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044c2:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044c4:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044c8:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80044ca:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044cc:	4e1f      	ldr	r6, [pc, #124]	; (800454c <HAL_TIM_PWM_ConfigChannel+0x2fc>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044ce:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
 80044d2:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80044d4:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80044d6:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80044d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 80044de:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e6:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044e8:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 80044ec:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f0:	d00f      	beq.n	8004512 <HAL_TIM_PWM_ConfigChannel+0x2c2>
 80044f2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80044f6:	42b3      	cmp	r3, r6
 80044f8:	d00b      	beq.n	8004512 <HAL_TIM_PWM_ConfigChannel+0x2c2>
 80044fa:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80044fe:	42b3      	cmp	r3, r6
 8004500:	d007      	beq.n	8004512 <HAL_TIM_PWM_ConfigChannel+0x2c2>
 8004502:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004506:	42b3      	cmp	r3, r6
 8004508:	d003      	beq.n	8004512 <HAL_TIM_PWM_ConfigChannel+0x2c2>
 800450a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800450e:	42b3      	cmp	r3, r6
 8004510:	d104      	bne.n	800451c <HAL_TIM_PWM_ConfigChannel+0x2cc>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004512:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004514:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004518:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 800451c:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800451e:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004520:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8004522:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8004524:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004526:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004528:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800452a:	f044 0408 	orr.w	r4, r4, #8
 800452e:	655c      	str	r4, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004530:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004532:	f021 0104 	bic.w	r1, r1, #4
 8004536:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800453a:	432a      	orrs	r2, r5
 800453c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 800453e:	2300      	movs	r3, #0
 8004540:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004544:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004546:	4618      	mov	r0, r3
}
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40012c00 	.word	0x40012c00
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004550:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004552:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004556:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8004558:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800455a:	4e2f      	ldr	r6, [pc, #188]	; (8004618 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800455c:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8004560:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004562:	6a1c      	ldr	r4, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004564:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004566:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004568:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 800456c:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004570:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004574:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004576:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800457a:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800457e:	d037      	beq.n	80045f0 <HAL_TIM_PWM_ConfigChannel+0x3a0>
 8004580:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004584:	42b3      	cmp	r3, r6
 8004586:	d033      	beq.n	80045f0 <HAL_TIM_PWM_ConfigChannel+0x3a0>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004588:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800458c:	42b3      	cmp	r3, r6
 800458e:	d007      	beq.n	80045a0 <HAL_TIM_PWM_ConfigChannel+0x350>
 8004590:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004594:	42b3      	cmp	r3, r6
 8004596:	d003      	beq.n	80045a0 <HAL_TIM_PWM_ConfigChannel+0x350>
 8004598:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800459c:	42b3      	cmp	r3, r6
 800459e:	d106      	bne.n	80045ae <HAL_TIM_PWM_ConfigChannel+0x35e>
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045a0:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045a4:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045a8:	433e      	orrs	r6, r7
 80045aa:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
  TIMx->CCR3 = OC_Config->Pulse;
 80045ae:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80045b0:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80045b2:	61da      	str	r2, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80045b4:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80045b6:	621c      	str	r4, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045b8:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045ba:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045bc:	f044 0408 	orr.w	r4, r4, #8
 80045c0:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045c2:	69d9      	ldr	r1, [r3, #28]
 80045c4:	f021 0104 	bic.w	r1, r1, #4
 80045c8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045ca:	69da      	ldr	r2, [r3, #28]
 80045cc:	432a      	orrs	r2, r5
 80045ce:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80045d0:	2300      	movs	r3, #0
 80045d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 80045d6:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80045d8:	4618      	mov	r0, r3
}
 80045da:	4770      	bx	lr
  __HAL_LOCK(htim);
 80045dc:	2002      	movs	r0, #2
}
 80045de:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045e0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80045e2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045e6:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80045ea:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 80045ee:	e704      	b.n	80043fa <HAL_TIM_PWM_ConfigChannel+0x1aa>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045f0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80045f2:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045f6:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80045fa:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80045fe:	e7cf      	b.n	80045a0 <HAL_TIM_PWM_ConfigChannel+0x350>
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004600:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004604:	42b3      	cmp	r3, r6
 8004606:	f43f ae66 	beq.w	80042d6 <HAL_TIM_PWM_ConfigChannel+0x86>
 800460a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800460e:	42b3      	cmp	r3, r6
 8004610:	f47f ae6d 	bne.w	80042ee <HAL_TIM_PWM_ConfigChannel+0x9e>
 8004614:	e65f      	b.n	80042d6 <HAL_TIM_PWM_ConfigChannel+0x86>
 8004616:	bf00      	nop
 8004618:	40012c00 	.word	0x40012c00

0800461c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800461c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004620:	2b01      	cmp	r3, #1
 8004622:	d05a      	beq.n	80046da <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 8004624:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8004626:	6803      	ldr	r3, [r0, #0]
{
 8004628:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800462a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800462e:	689d      	ldr	r5, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8004630:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004632:	4c4d      	ldr	r4, [pc, #308]	; (8004768 <HAL_TIM_ConfigClockSource+0x14c>)
  switch (sClockSourceConfig->ClockSource)
 8004634:	2a40      	cmp	r2, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004636:	ea04 0405 	and.w	r4, r4, r5
  __HAL_LOCK(htim);
 800463a:	f04f 0501 	mov.w	r5, #1
 800463e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8004642:	609c      	str	r4, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8004644:	d074      	beq.n	8004730 <HAL_TIM_ConfigClockSource+0x114>
 8004646:	d94a      	bls.n	80046de <HAL_TIM_ConfigClockSource+0xc2>
 8004648:	2a60      	cmp	r2, #96	; 0x60
 800464a:	d02d      	beq.n	80046a8 <HAL_TIM_ConfigClockSource+0x8c>
 800464c:	d956      	bls.n	80046fc <HAL_TIM_ConfigClockSource+0xe0>
 800464e:	2a70      	cmp	r2, #112	; 0x70
 8004650:	d01a      	beq.n	8004688 <HAL_TIM_ConfigClockSource+0x6c>
 8004652:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004656:	d10e      	bne.n	8004676 <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004658:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 800465c:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800465e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004660:	432a      	orrs	r2, r5
 8004662:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004666:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800466a:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800466c:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004674:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8004676:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004678:	2201      	movs	r2, #1
 800467a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800467e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004682:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004684:	4618      	mov	r0, r3
}
 8004686:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004688:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 800468c:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800468e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004690:	432a      	orrs	r2, r5
 8004692:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004696:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800469a:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800469c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800469e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046a0:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80046a4:	609a      	str	r2, [r3, #8]
      break;
 80046a6:	e7e6      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a8:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046aa:	684d      	ldr	r5, [r1, #4]
 80046ac:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ae:	f024 0410 	bic.w	r4, r4, #16
 80046b2:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b4:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80046b6:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046b8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80046c0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046c4:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80046c8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80046ca:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80046cc:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046d2:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80046d6:	609a      	str	r2, [r3, #8]
 80046d8:	e7cd      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 80046da:	2002      	movs	r0, #2
}
 80046dc:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80046de:	2a10      	cmp	r2, #16
 80046e0:	d004      	beq.n	80046ec <HAL_TIM_ConfigClockSource+0xd0>
 80046e2:	d93d      	bls.n	8004760 <HAL_TIM_ConfigClockSource+0x144>
 80046e4:	2a20      	cmp	r2, #32
 80046e6:	d001      	beq.n	80046ec <HAL_TIM_ConfigClockSource+0xd0>
 80046e8:	2a30      	cmp	r2, #48	; 0x30
 80046ea:	d1c4      	bne.n	8004676 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 80046ec:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ee:	f042 0207 	orr.w	r2, r2, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80046f2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046f6:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80046f8:	609a      	str	r2, [r3, #8]
 80046fa:	e7bc      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80046fc:	2a50      	cmp	r2, #80	; 0x50
 80046fe:	d1ba      	bne.n	8004676 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8004700:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004702:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004704:	684c      	ldr	r4, [r1, #4]
 8004706:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004708:	f026 0601 	bic.w	r6, r6, #1
 800470c:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800470e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004710:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004714:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004718:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800471c:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800471e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004720:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004722:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004724:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004728:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800472c:	609a      	str	r2, [r3, #8]
 800472e:	e7a2      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8004730:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004732:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004734:	684c      	ldr	r4, [r1, #4]
 8004736:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004738:	f026 0601 	bic.w	r6, r6, #1
 800473c:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800473e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004740:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004744:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004748:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800474c:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800474e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004750:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004752:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004754:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004758:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800475c:	609a      	str	r2, [r3, #8]
 800475e:	e78a      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004760:	2a00      	cmp	r2, #0
 8004762:	d0c3      	beq.n	80046ec <HAL_TIM_ConfigClockSource+0xd0>
 8004764:	e787      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x5a>
 8004766:	bf00      	nop
 8004768:	fffe0088 	.word	0xfffe0088

0800476c <HAL_TIM_OC_DelayElapsedCallback>:
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop

08004770 <HAL_TIM_IC_CaptureCallback>:
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop

08004774 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop

08004778 <HAL_TIM_TriggerCallback>:
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop

0800477c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800477c:	6803      	ldr	r3, [r0, #0]
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	0791      	lsls	r1, r2, #30
{
 8004782:	b510      	push	{r4, lr}
 8004784:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004786:	d502      	bpl.n	800478e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	0792      	lsls	r2, r2, #30
 800478c:	d468      	bmi.n	8004860 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	0752      	lsls	r2, r2, #29
 8004792:	d502      	bpl.n	800479a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	0750      	lsls	r0, r2, #29
 8004798:	d44f      	bmi.n	800483a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	0711      	lsls	r1, r2, #28
 800479e:	d502      	bpl.n	80047a6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	0712      	lsls	r2, r2, #28
 80047a4:	d437      	bmi.n	8004816 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	06d0      	lsls	r0, r2, #27
 80047aa:	d502      	bpl.n	80047b2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	06d1      	lsls	r1, r2, #27
 80047b0:	d41e      	bmi.n	80047f0 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	07d2      	lsls	r2, r2, #31
 80047b6:	d502      	bpl.n	80047be <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	07d0      	lsls	r0, r2, #31
 80047bc:	d469      	bmi.n	8004892 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	0611      	lsls	r1, r2, #24
 80047c2:	d502      	bpl.n	80047ca <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	0612      	lsls	r2, r2, #24
 80047c8:	d46b      	bmi.n	80048a2 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	05d0      	lsls	r0, r2, #23
 80047ce:	d502      	bpl.n	80047d6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	0611      	lsls	r1, r2, #24
 80047d4:	d46d      	bmi.n	80048b2 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	0652      	lsls	r2, r2, #25
 80047da:	d502      	bpl.n	80047e2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	0650      	lsls	r0, r2, #25
 80047e0:	d46f      	bmi.n	80048c2 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	0691      	lsls	r1, r2, #26
 80047e6:	d502      	bpl.n	80047ee <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	0692      	lsls	r2, r2, #26
 80047ec:	d449      	bmi.n	8004882 <HAL_TIM_IRQHandler+0x106>
}
 80047ee:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047f0:	f06f 0210 	mvn.w	r2, #16
 80047f4:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047f6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047f8:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047fa:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047fe:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004800:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004802:	d16f      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004804:	f7ff ffb2 	bl	800476c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004808:	4620      	mov	r0, r4
 800480a:	f7ff ffb3 	bl	8004774 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480e:	2200      	movs	r2, #0
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	7722      	strb	r2, [r4, #28]
 8004814:	e7cd      	b.n	80047b2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004816:	f06f 0208 	mvn.w	r2, #8
 800481a:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800481c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800481e:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004820:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004822:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004824:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004826:	d15a      	bne.n	80048de <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004828:	f7ff ffa0 	bl	800476c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482c:	4620      	mov	r0, r4
 800482e:	f7ff ffa1 	bl	8004774 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004832:	2200      	movs	r2, #0
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	7722      	strb	r2, [r4, #28]
 8004838:	e7b5      	b.n	80047a6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800483a:	f06f 0204 	mvn.w	r2, #4
 800483e:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004840:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004842:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004844:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004848:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800484a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800484c:	d144      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484e:	f7ff ff8d 	bl	800476c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004852:	4620      	mov	r0, r4
 8004854:	f7ff ff8e 	bl	8004774 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004858:	2200      	movs	r2, #0
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	7722      	strb	r2, [r4, #28]
 800485e:	e79c      	b.n	800479a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004860:	f06f 0202 	mvn.w	r2, #2
 8004864:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004866:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004868:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800486a:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800486c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800486e:	d130      	bne.n	80048d2 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004870:	f7ff ff7c 	bl	800476c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004874:	4620      	mov	r0, r4
 8004876:	f7ff ff7d 	bl	8004774 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487a:	2200      	movs	r2, #0
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	7722      	strb	r2, [r4, #28]
 8004880:	e785      	b.n	800478e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004882:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004886:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004888:	611a      	str	r2, [r3, #16]
}
 800488a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800488e:	f000 b931 	b.w	8004af4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004892:	f06f 0201 	mvn.w	r2, #1
 8004896:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004898:	4620      	mov	r0, r4
 800489a:	f7fc fa33 	bl	8000d04 <HAL_TIM_PeriodElapsedCallback>
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	e78d      	b.n	80047be <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80048a8:	4620      	mov	r0, r4
 80048aa:	f000 f925 	bl	8004af8 <HAL_TIMEx_BreakCallback>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	e78b      	b.n	80047ca <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048b6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80048b8:	4620      	mov	r0, r4
 80048ba:	f000 f91f 	bl	8004afc <HAL_TIMEx_Break2Callback>
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	e789      	b.n	80047d6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048c6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80048c8:	4620      	mov	r0, r4
 80048ca:	f7ff ff55 	bl	8004778 <HAL_TIM_TriggerCallback>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	e787      	b.n	80047e2 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 80048d2:	f7ff ff4d 	bl	8004770 <HAL_TIM_IC_CaptureCallback>
 80048d6:	e7d0      	b.n	800487a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80048d8:	f7ff ff4a 	bl	8004770 <HAL_TIM_IC_CaptureCallback>
 80048dc:	e7bc      	b.n	8004858 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80048de:	f7ff ff47 	bl	8004770 <HAL_TIM_IC_CaptureCallback>
 80048e2:	e7a6      	b.n	8004832 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80048e4:	f7ff ff44 	bl	8004770 <HAL_TIM_IC_CaptureCallback>
 80048e8:	e791      	b.n	800480e <HAL_TIM_IRQHandler+0x92>
 80048ea:	bf00      	nop

080048ec <HAL_TIMEx_PWMN_Start>:
 80048ec:	2900      	cmp	r1, #0
 80048ee:	d141      	bne.n	8004974 <HAL_TIMEx_PWMN_Start+0x88>
 80048f0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d149      	bne.n	800498c <HAL_TIMEx_PWMN_Start+0xa0>
 80048f8:	2302      	movs	r3, #2
 80048fa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80048fe:	6803      	ldr	r3, [r0, #0]
 8004900:	2204      	movs	r2, #4
 8004902:	6a18      	ldr	r0, [r3, #32]
 8004904:	f001 011f 	and.w	r1, r1, #31
 8004908:	fa02 f101 	lsl.w	r1, r2, r1
 800490c:	ea20 0001 	bic.w	r0, r0, r1
 8004910:	b410      	push	{r4}
 8004912:	6218      	str	r0, [r3, #32]
 8004914:	6a1a      	ldr	r2, [r3, #32]
 8004916:	4c28      	ldr	r4, [pc, #160]	; (80049b8 <HAL_TIMEx_PWMN_Start+0xcc>)
 8004918:	4311      	orrs	r1, r2
 800491a:	6219      	str	r1, [r3, #32]
 800491c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800491e:	42a3      	cmp	r3, r4
 8004920:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004924:	645a      	str	r2, [r3, #68]	; 0x44
 8004926:	d015      	beq.n	8004954 <HAL_TIMEx_PWMN_Start+0x68>
 8004928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492c:	d012      	beq.n	8004954 <HAL_TIMEx_PWMN_Start+0x68>
 800492e:	4a23      	ldr	r2, [pc, #140]	; (80049bc <HAL_TIMEx_PWMN_Start+0xd0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00f      	beq.n	8004954 <HAL_TIMEx_PWMN_Start+0x68>
 8004934:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004938:	4293      	cmp	r3, r2
 800493a:	d00b      	beq.n	8004954 <HAL_TIMEx_PWMN_Start+0x68>
 800493c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004940:	4293      	cmp	r3, r2
 8004942:	d007      	beq.n	8004954 <HAL_TIMEx_PWMN_Start+0x68>
 8004944:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <HAL_TIMEx_PWMN_Start+0x68>
 800494c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004950:	4293      	cmp	r3, r2
 8004952:	d107      	bne.n	8004964 <HAL_TIMEx_PWMN_Start+0x78>
 8004954:	6899      	ldr	r1, [r3, #8]
 8004956:	4a1a      	ldr	r2, [pc, #104]	; (80049c0 <HAL_TIMEx_PWMN_Start+0xd4>)
 8004958:	400a      	ands	r2, r1
 800495a:	2a06      	cmp	r2, #6
 800495c:	d018      	beq.n	8004990 <HAL_TIMEx_PWMN_Start+0xa4>
 800495e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004962:	d015      	beq.n	8004990 <HAL_TIMEx_PWMN_Start+0xa4>
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	f85d 4b04 	ldr.w	r4, [sp], #4
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	2000      	movs	r0, #0
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	4770      	bx	lr
 8004974:	2904      	cmp	r1, #4
 8004976:	d00f      	beq.n	8004998 <HAL_TIMEx_PWMN_Start+0xac>
 8004978:	2908      	cmp	r1, #8
 800497a:	d015      	beq.n	80049a8 <HAL_TIMEx_PWMN_Start+0xbc>
 800497c:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8004980:	2b01      	cmp	r3, #1
 8004982:	d103      	bne.n	800498c <HAL_TIMEx_PWMN_Start+0xa0>
 8004984:	2302      	movs	r3, #2
 8004986:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 800498a:	e7b8      	b.n	80048fe <HAL_TIMEx_PWMN_Start+0x12>
 800498c:	2001      	movs	r0, #1
 800498e:	4770      	bx	lr
 8004990:	2000      	movs	r0, #0
 8004992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800499c:	2b01      	cmp	r3, #1
 800499e:	d1f5      	bne.n	800498c <HAL_TIMEx_PWMN_Start+0xa0>
 80049a0:	2302      	movs	r3, #2
 80049a2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80049a6:	e7aa      	b.n	80048fe <HAL_TIMEx_PWMN_Start+0x12>
 80049a8:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d1ed      	bne.n	800498c <HAL_TIMEx_PWMN_Start+0xa0>
 80049b0:	2302      	movs	r3, #2
 80049b2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 80049b6:	e7a2      	b.n	80048fe <HAL_TIMEx_PWMN_Start+0x12>
 80049b8:	40012c00 	.word	0x40012c00
 80049bc:	40000400 	.word	0x40000400
 80049c0:	00010007 	.word	0x00010007

080049c4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d047      	beq.n	8004a5c <HAL_TIMEx_MasterConfigSynchronization+0x98>
{
 80049cc:	b4f0      	push	{r4, r5, r6, r7}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049ce:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049d0:	4c23      	ldr	r4, [pc, #140]	; (8004a60 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80049d2:	680e      	ldr	r6, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	2202      	movs	r2, #2
 80049d6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80049da:	2501      	movs	r5, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049dc:	42a3      	cmp	r3, r4
  tmpcr2 = htim->Instance->CR2;
 80049de:	685a      	ldr	r2, [r3, #4]
  __HAL_LOCK(htim);
 80049e0:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80049e4:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049e6:	d027      	beq.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80049e8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80049ec:	42a3      	cmp	r3, r4
 80049ee:	d02c      	beq.n	8004a4a <HAL_TIMEx_MasterConfigSynchronization+0x86>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049f4:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80049fa:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049fc:	d00e      	beq.n	8004a1c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80049fe:	4a19      	ldr	r2, [pc, #100]	; (8004a64 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00b      	beq.n	8004a1c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8004a04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d007      	beq.n	8004a1c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8004a0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d003      	beq.n	8004a1c <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8004a14:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d104      	bne.n	8004a26 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a1c:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a1e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a22:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a24:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004a26:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004a2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004a32:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004a34:	4618      	mov	r0, r3
}
 8004a36:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a38:	684c      	ldr	r4, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a3e:	4322      	orrs	r2, r4
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a44:	4332      	orrs	r2, r6
  htim->Instance->CR2 = tmpcr2;
 8004a46:	605a      	str	r2, [r3, #4]
 8004a48:	e7e8      	b.n	8004a1c <HAL_TIMEx_MasterConfigSynchronization+0x58>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a4a:	684f      	ldr	r7, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a4c:	f422 0470 	bic.w	r4, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a50:	433c      	orrs	r4, r7
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a52:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a56:	4334      	orrs	r4, r6
  htim->Instance->CR2 = tmpcr2;
 8004a58:	605c      	str	r4, [r3, #4]
 8004a5a:	e7df      	b.n	8004a1c <HAL_TIMEx_MasterConfigSynchronization+0x58>
  __HAL_LOCK(htim);
 8004a5c:	2002      	movs	r0, #2
}
 8004a5e:	4770      	bx	lr
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	40000400 	.word	0x40000400

08004a68 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a68:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d03c      	beq.n	8004aea <HAL_TIMEx_ConfigBreakDeadTime+0x82>
{
 8004a70:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a72:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8004a76:	4602      	mov	r2, r0
 8004a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a7c:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a80:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a86:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a8c:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a90:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a96:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a9c:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004a9e:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004aa0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aa6:	4303      	orrs	r3, r0

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004aa8:	4c11      	ldr	r4, [pc, #68]	; (8004af0 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8004aaa:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004aac:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ab0:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004ab2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ab6:	d00a      	beq.n	8004ace <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8004ab8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004abc:	42a0      	cmp	r0, r4
 8004abe:	d006      	beq.n	8004ace <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8004ac0:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8004ac2:	6443      	str	r3, [r0, #68]	; 0x44

  return HAL_OK;
}
 8004ac4:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8004ac6:	4608      	mov	r0, r1
  __HAL_UNLOCK(htim);
 8004ac8:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 8004acc:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ace:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8004ad0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ad4:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ad8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004adc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ae0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ae2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004ae6:	430b      	orrs	r3, r1
 8004ae8:	e7ea      	b.n	8004ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8004aea:	2002      	movs	r0, #2
}
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40012c00 	.word	0x40012c00

08004af4 <HAL_TIMEx_CommutCallback>:
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop

08004af8 <HAL_TIMEx_BreakCallback>:
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop

08004afc <HAL_TIMEx_Break2Callback>:
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop

08004b00 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004b02:	07da      	lsls	r2, r3, #31
{
 8004b04:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b06:	d506      	bpl.n	8004b16 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b08:	6801      	ldr	r1, [r0, #0]
 8004b0a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004b0c:	684a      	ldr	r2, [r1, #4]
 8004b0e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004b12:	4322      	orrs	r2, r4
 8004b14:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b16:	079c      	lsls	r4, r3, #30
 8004b18:	d506      	bpl.n	8004b28 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b1a:	6801      	ldr	r1, [r0, #0]
 8004b1c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004b1e:	684a      	ldr	r2, [r1, #4]
 8004b20:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004b24:	4322      	orrs	r2, r4
 8004b26:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b28:	0759      	lsls	r1, r3, #29
 8004b2a:	d506      	bpl.n	8004b3a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b2c:	6801      	ldr	r1, [r0, #0]
 8004b2e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004b30:	684a      	ldr	r2, [r1, #4]
 8004b32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b36:	4322      	orrs	r2, r4
 8004b38:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b3a:	071a      	lsls	r2, r3, #28
 8004b3c:	d506      	bpl.n	8004b4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b3e:	6801      	ldr	r1, [r0, #0]
 8004b40:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004b42:	684a      	ldr	r2, [r1, #4]
 8004b44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b48:	4322      	orrs	r2, r4
 8004b4a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b4c:	06dc      	lsls	r4, r3, #27
 8004b4e:	d506      	bpl.n	8004b5e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b50:	6801      	ldr	r1, [r0, #0]
 8004b52:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004b54:	688a      	ldr	r2, [r1, #8]
 8004b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b5a:	4322      	orrs	r2, r4
 8004b5c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b5e:	0699      	lsls	r1, r3, #26
 8004b60:	d506      	bpl.n	8004b70 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b62:	6801      	ldr	r1, [r0, #0]
 8004b64:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004b66:	688a      	ldr	r2, [r1, #8]
 8004b68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b6c:	4322      	orrs	r2, r4
 8004b6e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b70:	065a      	lsls	r2, r3, #25
 8004b72:	d509      	bpl.n	8004b88 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b74:	6801      	ldr	r1, [r0, #0]
 8004b76:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004b78:	684a      	ldr	r2, [r1, #4]
 8004b7a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004b7e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b80:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b84:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b86:	d00b      	beq.n	8004ba0 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b88:	061b      	lsls	r3, r3, #24
 8004b8a:	d506      	bpl.n	8004b9a <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b8c:	6802      	ldr	r2, [r0, #0]
 8004b8e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004b90:	6853      	ldr	r3, [r2, #4]
 8004b92:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004b96:	430b      	orrs	r3, r1
 8004b98:	6053      	str	r3, [r2, #4]
  }
}
 8004b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b9e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ba0:	684a      	ldr	r2, [r1, #4]
 8004ba2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004ba4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004ba8:	4322      	orrs	r2, r4
 8004baa:	604a      	str	r2, [r1, #4]
 8004bac:	e7ec      	b.n	8004b88 <UART_AdvFeatureConfig+0x88>
 8004bae:	bf00      	nop

08004bb0 <HAL_UART_Init>:
  if (huart == NULL)
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	d056      	beq.n	8004c62 <HAL_UART_Init+0xb2>
{
 8004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004bb6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8004bb8:	4604      	mov	r4, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d04c      	beq.n	8004c58 <HAL_UART_Init+0xa8>
  __HAL_UART_DISABLE(huart);
 8004bbe:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bc0:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bc2:	49bb      	ldr	r1, [pc, #748]	; (8004eb0 <HAL_UART_Init+0x300>)
  huart->gState = HAL_UART_STATE_BUSY;
 8004bc4:	2224      	movs	r2, #36	; 0x24
 8004bc6:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8004bc8:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bca:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8004bcc:	f020 0001 	bic.w	r0, r0, #1
 8004bd0:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bd2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bd4:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bd6:	4332      	orrs	r2, r6
 8004bd8:	4302      	orrs	r2, r0
 8004bda:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bdc:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bde:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004be0:	430a      	orrs	r2, r1
 8004be2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004be8:	49b2      	ldr	r1, [pc, #712]	; (8004eb4 <HAL_UART_Init+0x304>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bea:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004bee:	432a      	orrs	r2, r5
 8004bf0:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bf2:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bf4:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bf6:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bf8:	d035      	beq.n	8004c66 <HAL_UART_Init+0xb6>
    tmpreg |= huart->Init.OneBitSampling;
 8004bfa:	6a26      	ldr	r6, [r4, #32]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bfc:	4dae      	ldr	r5, [pc, #696]	; (8004eb8 <HAL_UART_Init+0x308>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bfe:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8004c02:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c04:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c06:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c08:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c0a:	d045      	beq.n	8004c98 <HAL_UART_Init+0xe8>
 8004c0c:	4aab      	ldr	r2, [pc, #684]	; (8004ebc <HAL_UART_Init+0x30c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d064      	beq.n	8004cdc <HAL_UART_Init+0x12c>
 8004c12:	4aab      	ldr	r2, [pc, #684]	; (8004ec0 <HAL_UART_Init+0x310>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	f000 8125 	beq.w	8004e64 <HAL_UART_Init+0x2b4>
 8004c1a:	4aaa      	ldr	r2, [pc, #680]	; (8004ec4 <HAL_UART_Init+0x314>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	f000 80e1 	beq.w	8004de4 <HAL_UART_Init+0x234>
 8004c22:	4aa9      	ldr	r2, [pc, #676]	; (8004ec8 <HAL_UART_Init+0x318>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d112      	bne.n	8004c4e <HAL_UART_Init+0x9e>
 8004c28:	4ba8      	ldr	r3, [pc, #672]	; (8004ecc <HAL_UART_Init+0x31c>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c36:	f000 80cb 	beq.w	8004dd0 <HAL_UART_Init+0x220>
 8004c3a:	f240 80e8 	bls.w	8004e0e <HAL_UART_Init+0x25e>
 8004c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c42:	f000 8187 	beq.w	8004f54 <HAL_UART_Init+0x3a4>
 8004c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c4a:	f000 80d9 	beq.w	8004e00 <HAL_UART_Init+0x250>
  huart->RxISR = NULL;
 8004c4e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8004c50:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
    return HAL_ERROR;
 8004c54:	2001      	movs	r0, #1
}
 8004c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8004c58:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8004c5c:	f7fc feb4 	bl	80019c8 <HAL_UART_MspInit>
 8004c60:	e7ad      	b.n	8004bbe <HAL_UART_Init+0xe>
    return HAL_ERROR;
 8004c62:	2001      	movs	r0, #1
}
 8004c64:	4770      	bx	lr
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c66:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c6a:	4898      	ldr	r0, [pc, #608]	; (8004ecc <HAL_UART_Init+0x31c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c70:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8004c74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c7c:	f000 8162 	beq.w	8004f44 <HAL_UART_Init+0x394>
 8004c80:	f240 8138 	bls.w	8004ef4 <HAL_UART_Init+0x344>
 8004c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c88:	f000 816f 	beq.w	8004f6a <HAL_UART_Init+0x3ba>
 8004c8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c90:	d1dd      	bne.n	8004c4e <HAL_UART_Init+0x9e>
        pclk = (uint32_t) LSE_VALUE;
 8004c92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004c96:	e134      	b.n	8004f02 <HAL_UART_Init+0x352>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c98:	4b8c      	ldr	r3, [pc, #560]	; (8004ecc <HAL_UART_Init+0x31c>)
 8004c9a:	4a8d      	ldr	r2, [pc, #564]	; (8004ed0 <HAL_UART_Init+0x320>)
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca0:	f003 0303 	and.w	r3, r3, #3
 8004ca4:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ca6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004caa:	f000 80e8 	beq.w	8004e7e <HAL_UART_Init+0x2ce>
    switch (clocksource)
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d8cd      	bhi.n	8004c4e <HAL_UART_Init+0x9e>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <HAL_UART_Init+0x108>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004ddf 	.word	0x08004ddf
 8004cbc:	08004ced 	.word	0x08004ced
 8004cc0:	08004f51 	.word	0x08004f51
 8004cc4:	08004c4f 	.word	0x08004c4f
 8004cc8:	08004dd9 	.word	0x08004dd9
 8004ccc:	08004c4f 	.word	0x08004c4f
 8004cd0:	08004c4f 	.word	0x08004c4f
 8004cd4:	08004c4f 	.word	0x08004c4f
 8004cd8:	08004e09 	.word	0x08004e09
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cdc:	4b7b      	ldr	r3, [pc, #492]	; (8004ecc <HAL_UART_Init+0x31c>)
 8004cde:	4a7d      	ldr	r2, [pc, #500]	; (8004ed4 <HAL_UART_Init+0x324>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce4:	f003 030c 	and.w	r3, r3, #12
 8004ce8:	5cd3      	ldrb	r3, [r2, r3]
 8004cea:	e7dc      	b.n	8004ca6 <HAL_UART_Init+0xf6>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cec:	f7fe fc3e 	bl	800356c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	f000 80b3 	beq.w	8004e5c <HAL_UART_Init+0x2ac>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cf6:	6863      	ldr	r3, [r4, #4]
 8004cf8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004cfc:	fbb0 f0f3 	udiv	r0, r0, r3
 8004d00:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d02:	f1a0 0210 	sub.w	r2, r0, #16
 8004d06:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d89f      	bhi.n	8004c4e <HAL_UART_Init+0x9e>
        huart->Instance->BRR = usartdiv;
 8004d0e:	6822      	ldr	r2, [r4, #0]
  huart->RxISR = NULL;
 8004d10:	2300      	movs	r3, #0
        huart->Instance->BRR = usartdiv;
 8004d12:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8004d14:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f040 809a 	bne.w	8004e54 <HAL_UART_Init+0x2a4>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d30:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004d32:	681a      	ldr	r2, [r3, #0]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d34:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3c:	67e1      	str	r1, [r4, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004d3e:	f7fc ff19 	bl	8001b74 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8004d48:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d4a:	d409      	bmi.n	8004d60 <HAL_UART_Init+0x1b0>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	0750      	lsls	r0, r2, #29
 8004d50:	d42b      	bmi.n	8004daa <HAL_UART_Init+0x1fa>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d52:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  __HAL_UNLOCK(huart);
 8004d54:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004d56:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8004d58:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8004d5c:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8004d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d60:	69dd      	ldr	r5, [r3, #28]
 8004d62:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8004d66:	d1f1      	bne.n	8004d4c <HAL_UART_Init+0x19c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d68:	f7fc ff04 	bl	8001b74 <HAL_GetTick>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d6c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6e:	1b80      	subs	r0, r0, r6
 8004d70:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d74:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d76:	f080 80af 	bcs.w	8004ed8 <HAL_UART_Init+0x328>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d7a:	0752      	lsls	r2, r2, #29
 8004d7c:	d5f0      	bpl.n	8004d60 <HAL_UART_Init+0x1b0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	0517      	lsls	r7, r2, #20
 8004d82:	d5ed      	bpl.n	8004d60 <HAL_UART_Init+0x1b0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d90:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d92:	6899      	ldr	r1, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d94:	2220      	movs	r2, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d96:	f021 0101 	bic.w	r1, r1, #1
 8004d9a:	6099      	str	r1, [r3, #8]
      return HAL_TIMEOUT;
 8004d9c:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8004d9e:	6762      	str	r2, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004da0:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 8004da4:	67a2      	str	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004da6:	67e2      	str	r2, [r4, #124]	; 0x7c
}
 8004da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004daa:	69dd      	ldr	r5, [r3, #28]
 8004dac:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8004db0:	d1cf      	bne.n	8004d52 <HAL_UART_Init+0x1a2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db2:	f7fc fedf 	bl	8001b74 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004db6:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db8:	1b80      	subs	r0, r0, r6
 8004dba:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dbe:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc0:	f080 808a 	bcs.w	8004ed8 <HAL_UART_Init+0x328>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dc4:	0751      	lsls	r1, r2, #29
 8004dc6:	d5f0      	bpl.n	8004daa <HAL_UART_Init+0x1fa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dc8:	69da      	ldr	r2, [r3, #28]
 8004dca:	0512      	lsls	r2, r2, #20
 8004dcc:	d5ed      	bpl.n	8004daa <HAL_UART_Init+0x1fa>
 8004dce:	e7d9      	b.n	8004d84 <HAL_UART_Init+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dd0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004dd4:	f000 80c3 	beq.w	8004f5e <HAL_UART_Init+0x3ae>
        pclk = HAL_RCC_GetSysClockFreq();
 8004dd8:	f7fd ff54 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8004ddc:	e788      	b.n	8004cf0 <HAL_UART_Init+0x140>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dde:	f7fe fbb3 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 8004de2:	e785      	b.n	8004cf0 <HAL_UART_Init+0x140>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004de4:	4b39      	ldr	r3, [pc, #228]	; (8004ecc <HAL_UART_Init+0x31c>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004dee:	2b40      	cmp	r3, #64	; 0x40
 8004df0:	d0ee      	beq.n	8004dd0 <HAL_UART_Init+0x220>
 8004df2:	d90c      	bls.n	8004e0e <HAL_UART_Init+0x25e>
 8004df4:	2b80      	cmp	r3, #128	; 0x80
 8004df6:	f000 80ad 	beq.w	8004f54 <HAL_UART_Init+0x3a4>
 8004dfa:	2bc0      	cmp	r3, #192	; 0xc0
 8004dfc:	f47f af27 	bne.w	8004c4e <HAL_UART_Init+0x9e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e00:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004e04:	f000 80ae 	beq.w	8004f64 <HAL_UART_Init+0x3b4>
        pclk = (uint32_t) LSE_VALUE;
 8004e08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004e0c:	e773      	b.n	8004cf6 <HAL_UART_Init+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f47f af1d 	bne.w	8004c4e <HAL_UART_Init+0x9e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e14:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004e18:	d1e1      	bne.n	8004dde <HAL_UART_Init+0x22e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e1a:	f7fe fb95 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004e1e:	b1e8      	cbz	r0, 8004e5c <HAL_UART_Init+0x2ac>
 8004e20:	0043      	lsls	r3, r0, #1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e22:	6862      	ldr	r2, [r4, #4]
 8004e24:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004e28:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e2c:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e2e:	f1a2 0010 	sub.w	r0, r2, #16
 8004e32:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8004e36:	4288      	cmp	r0, r1
 8004e38:	f63f af09 	bhi.w	8004c4e <HAL_UART_Init+0x9e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e3c:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e40:	f3c2 0242 	ubfx	r2, r2, #1, #3
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e44:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8004e46:	6821      	ldr	r1, [r4, #0]
 8004e48:	4313      	orrs	r3, r2
  huart->RxISR = NULL;
 8004e4a:	2200      	movs	r2, #0
        huart->Instance->BRR = brrtemp;
 8004e4c:	60cb      	str	r3, [r1, #12]
  huart->TxISR = NULL;
 8004e4e:	e9c4 2218 	strd	r2, r2, [r4, #96]	; 0x60
 8004e52:	e761      	b.n	8004d18 <HAL_UART_Init+0x168>
    UART_AdvFeatureConfig(huart);
 8004e54:	4620      	mov	r0, r4
 8004e56:	f7ff fe53 	bl	8004b00 <UART_AdvFeatureConfig>
 8004e5a:	e761      	b.n	8004d20 <HAL_UART_Init+0x170>
  huart->RxISR = NULL;
 8004e5c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8004e5e:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 8004e62:	e759      	b.n	8004d18 <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e64:	4b19      	ldr	r3, [pc, #100]	; (8004ecc <HAL_UART_Init+0x31c>)
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e6e:	2b10      	cmp	r3, #16
 8004e70:	d0ae      	beq.n	8004dd0 <HAL_UART_Init+0x220>
 8004e72:	d9cc      	bls.n	8004e0e <HAL_UART_Init+0x25e>
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	d06d      	beq.n	8004f54 <HAL_UART_Init+0x3a4>
 8004e78:	2b30      	cmp	r3, #48	; 0x30
 8004e7a:	d0c1      	beq.n	8004e00 <HAL_UART_Init+0x250>
 8004e7c:	e6e7      	b.n	8004c4e <HAL_UART_Init+0x9e>
    switch (clocksource)
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	f63f aee5 	bhi.w	8004c4e <HAL_UART_Init+0x9e>
 8004e84:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <HAL_UART_Init+0x2dc>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004e1b 	.word	0x08004e1b
 8004e90:	08004f4b 	.word	0x08004f4b
 8004e94:	08004f5b 	.word	0x08004f5b
 8004e98:	08004c4f 	.word	0x08004c4f
 8004e9c:	08004f5f 	.word	0x08004f5f
 8004ea0:	08004c4f 	.word	0x08004c4f
 8004ea4:	08004c4f 	.word	0x08004c4f
 8004ea8:	08004c4f 	.word	0x08004c4f
 8004eac:	08004f65 	.word	0x08004f65
 8004eb0:	efff69f3 	.word	0xefff69f3
 8004eb4:	40008000 	.word	0x40008000
 8004eb8:	40013800 	.word	0x40013800
 8004ebc:	40004400 	.word	0x40004400
 8004ec0:	40004800 	.word	0x40004800
 8004ec4:	40004c00 	.word	0x40004c00
 8004ec8:	40005000 	.word	0x40005000
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	08005190 	.word	0x08005190
 8004ed4:	08005194 	.word	0x08005194
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ed8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004edc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ede:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004ee0:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee2:	f022 0201 	bic.w	r2, r2, #1
 8004ee6:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 8004ee8:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8004eea:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 8004eec:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 8004ef0:	67a1      	str	r1, [r4, #120]	; 0x78
}
 8004ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f47f aeaa 	bne.w	8004c4e <HAL_UART_Init+0x9e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004efa:	f7fe fb25 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d0ac      	beq.n	8004e5c <HAL_UART_Init+0x2ac>
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f02:	6862      	ldr	r2, [r4, #4]
 8004f04:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8004f08:	4283      	cmp	r3, r0
 8004f0a:	f63f aea0 	bhi.w	8004c4e <HAL_UART_Init+0x9e>
 8004f0e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8004f12:	f63f ae9c 	bhi.w	8004c4e <HAL_UART_Init+0x9e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004f16:	0856      	lsrs	r6, r2, #1
 8004f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f1c:	2700      	movs	r7, #0
 8004f1e:	fbe3 6700 	umlal	r6, r7, r3, r0
 8004f22:	2500      	movs	r5, #0
 8004f24:	462b      	mov	r3, r5
 8004f26:	4630      	mov	r0, r6
 8004f28:	4639      	mov	r1, r7
 8004f2a:	f7fb fd6b 	bl	8000a04 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f2e:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <HAL_UART_Init+0x3c0>)
 8004f30:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004f34:	429a      	cmp	r2, r3
 8004f36:	f63f ae8a 	bhi.w	8004c4e <HAL_UART_Init+0x9e>
          huart->Instance->BRR = usartdiv;
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	60d8      	str	r0, [r3, #12]
  huart->TxISR = NULL;
 8004f3e:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
 8004f42:	e6e9      	b.n	8004d18 <HAL_UART_Init+0x168>
        pclk = HAL_RCC_GetSysClockFreq();
 8004f44:	f7fd fe9e 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8004f48:	e7d9      	b.n	8004efe <HAL_UART_Init+0x34e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f4a:	f7fe fb0f 	bl	800356c <HAL_RCC_GetPCLK2Freq>
 8004f4e:	e766      	b.n	8004e1e <HAL_UART_Init+0x26e>
        pclk = (uint32_t) HSI_VALUE;
 8004f50:	4808      	ldr	r0, [pc, #32]	; (8004f74 <HAL_UART_Init+0x3c4>)
 8004f52:	e6d0      	b.n	8004cf6 <HAL_UART_Init+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f54:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004f58:	d1fa      	bne.n	8004f50 <HAL_UART_Init+0x3a0>
 8004f5a:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <HAL_UART_Init+0x3c8>)
 8004f5c:	e761      	b.n	8004e22 <HAL_UART_Init+0x272>
        pclk = HAL_RCC_GetSysClockFreq();
 8004f5e:	f7fd fe91 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8004f62:	e75c      	b.n	8004e1e <HAL_UART_Init+0x26e>
    switch (clocksource)
 8004f64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f68:	e75b      	b.n	8004e22 <HAL_UART_Init+0x272>
        pclk = (uint32_t) HSI_VALUE;
 8004f6a:	4802      	ldr	r0, [pc, #8]	; (8004f74 <HAL_UART_Init+0x3c4>)
 8004f6c:	e7c9      	b.n	8004f02 <HAL_UART_Init+0x352>
 8004f6e:	bf00      	nop
 8004f70:	000ffcff 	.word	0x000ffcff
 8004f74:	00f42400 	.word	0x00f42400
 8004f78:	01e84800 	.word	0x01e84800

08004f7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004f80:	f7fc fd82 	bl	8001a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004f84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004f86:	e003      	b.n	8004f90 <LoopCopyDataInit>

08004f88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004f88:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004f8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004f8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004f8e:	3104      	adds	r1, #4

08004f90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004f90:	480a      	ldr	r0, [pc, #40]	; (8004fbc <LoopForever+0xa>)
	ldr	r3, =_edata
 8004f92:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004f94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004f96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004f98:	d3f6      	bcc.n	8004f88 <CopyDataInit>
	ldr	r2, =_sbss
 8004f9a:	4a0a      	ldr	r2, [pc, #40]	; (8004fc4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004f9c:	e002      	b.n	8004fa4 <LoopFillZerobss>

08004f9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004f9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004fa0:	f842 3b04 	str.w	r3, [r2], #4

08004fa4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004fa4:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <LoopForever+0x16>)
	cmp	r2, r3
 8004fa6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004fa8:	d3f9      	bcc.n	8004f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004faa:	f000 f895 	bl	80050d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004fae:	f7fc f9d3 	bl	8001358 <main>

08004fb2 <LoopForever>:

LoopForever:
    b LoopForever
 8004fb2:	e7fe      	b.n	8004fb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004fb4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004fb8:	080059b8 	.word	0x080059b8
	ldr	r0, =_sdata
 8004fbc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004fc0:	20000020 	.word	0x20000020
	ldr	r2, =_sbss
 8004fc4:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 8004fc8:	2000095c 	.word	0x2000095c

08004fcc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004fcc:	e7fe      	b.n	8004fcc <ADC3_IRQHandler>
	...

08004fd0 <arm_sin_f32>:
 8004fd0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800504c <arm_sin_f32+0x7c>
 8004fd4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004fd8:	ee20 7a07 	vmul.f32	s14, s0, s14
 8004fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8004fe4:	d42c      	bmi.n	8005040 <arm_sin_f32+0x70>
 8004fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fea:	eddf 6a19 	vldr	s13, [pc, #100]	; 8005050 <arm_sin_f32+0x80>
 8004fee:	4a19      	ldr	r2, [pc, #100]	; (8005054 <arm_sin_f32+0x84>)
 8004ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ff4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004ff8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004ffc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005004:	bfa8      	it	ge
 8005006:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800500a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800500e:	ee17 3a10 	vmov	r3, s14
 8005012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005016:	ee07 3a10 	vmov	s14, r3
 800501a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800501e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005022:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005026:	edd1 6a01 	vldr	s13, [r1, #4]
 800502a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800502e:	ed91 0a00 	vldr	s0, [r1]
 8005032:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005036:	ee27 0a00 	vmul.f32	s0, s14, s0
 800503a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800503e:	4770      	bx	lr
 8005040:	ee17 3a90 	vmov	r3, s15
 8005044:	3b01      	subs	r3, #1
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	e7cc      	b.n	8004fe6 <arm_sin_f32+0x16>
 800504c:	3e22f983 	.word	0x3e22f983
 8005050:	44000000 	.word	0x44000000
 8005054:	080051a4 	.word	0x080051a4

08005058 <arm_cos_f32>:
 8005058:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80050cc <arm_cos_f32+0x74>
 800505c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005060:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8005064:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005068:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800506c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005070:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005074:	d504      	bpl.n	8005080 <arm_cos_f32+0x28>
 8005076:	ee17 3a90 	vmov	r3, s15
 800507a:	3b01      	subs	r3, #1
 800507c:	ee07 3a90 	vmov	s15, r3
 8005080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005084:	eddf 6a12 	vldr	s13, [pc, #72]	; 80050d0 <arm_cos_f32+0x78>
 8005088:	4a12      	ldr	r2, [pc, #72]	; (80050d4 <arm_cos_f32+0x7c>)
 800508a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800508e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005092:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005096:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800509a:	ee17 3a90 	vmov	r3, s15
 800509e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050aa:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80050ae:	ee70 7a67 	vsub.f32	s15, s0, s15
 80050b2:	edd1 6a01 	vldr	s13, [r1, #4]
 80050b6:	ed91 0a00 	vldr	s0, [r1]
 80050ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80050c2:	ee27 0a00 	vmul.f32	s0, s14, s0
 80050c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80050ca:	4770      	bx	lr
 80050cc:	3e22f983 	.word	0x3e22f983
 80050d0:	44000000 	.word	0x44000000
 80050d4:	080051a4 	.word	0x080051a4

080050d8 <__libc_init_array>:
 80050d8:	b570      	push	{r4, r5, r6, lr}
 80050da:	4e0d      	ldr	r6, [pc, #52]	; (8005110 <__libc_init_array+0x38>)
 80050dc:	4c0d      	ldr	r4, [pc, #52]	; (8005114 <__libc_init_array+0x3c>)
 80050de:	1ba4      	subs	r4, r4, r6
 80050e0:	10a4      	asrs	r4, r4, #2
 80050e2:	2500      	movs	r5, #0
 80050e4:	42a5      	cmp	r5, r4
 80050e6:	d109      	bne.n	80050fc <__libc_init_array+0x24>
 80050e8:	4e0b      	ldr	r6, [pc, #44]	; (8005118 <__libc_init_array+0x40>)
 80050ea:	4c0c      	ldr	r4, [pc, #48]	; (800511c <__libc_init_array+0x44>)
 80050ec:	f000 f820 	bl	8005130 <_init>
 80050f0:	1ba4      	subs	r4, r4, r6
 80050f2:	10a4      	asrs	r4, r4, #2
 80050f4:	2500      	movs	r5, #0
 80050f6:	42a5      	cmp	r5, r4
 80050f8:	d105      	bne.n	8005106 <__libc_init_array+0x2e>
 80050fa:	bd70      	pop	{r4, r5, r6, pc}
 80050fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005100:	4798      	blx	r3
 8005102:	3501      	adds	r5, #1
 8005104:	e7ee      	b.n	80050e4 <__libc_init_array+0xc>
 8005106:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800510a:	4798      	blx	r3
 800510c:	3501      	adds	r5, #1
 800510e:	e7f2      	b.n	80050f6 <__libc_init_array+0x1e>
 8005110:	080059b0 	.word	0x080059b0
 8005114:	080059b0 	.word	0x080059b0
 8005118:	080059b0 	.word	0x080059b0
 800511c:	080059b4 	.word	0x080059b4

08005120 <memset>:
 8005120:	4402      	add	r2, r0
 8005122:	4603      	mov	r3, r0
 8005124:	4293      	cmp	r3, r2
 8005126:	d100      	bne.n	800512a <memset+0xa>
 8005128:	4770      	bx	lr
 800512a:	f803 1b01 	strb.w	r1, [r3], #1
 800512e:	e7f9      	b.n	8005124 <memset+0x4>

08005130 <_init>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	bf00      	nop
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr

0800513c <_fini>:
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	bf00      	nop
 8005140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005142:	bc08      	pop	{r3}
 8005144:	469e      	mov	lr, r3
 8005146:	4770      	bx	lr
